// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var $, $async, CND, PS, badge, debug, echo, help, info, rpr, test, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'GENERATOR-AS-SOURCE';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  //...........................................................................................................
  PS = require('../..');

  ({$, $async} = PS);

  //-----------------------------------------------------------------------------------------------------------
  this["generator as source: random numbers"] = function(T, done) {
    var $random, pipeline, Ø;
    //.........................................................................................................
    pipeline = [];
    Ø = (x) => {
      return pipeline.push(x);
    };
    // expect_count  = Math.max 0, probes.length - width + 1
    //.........................................................................................................
    /* TAINT his isn't a generator in the technical sense, but the code from
    https://github.com/pull-stream/pull-stream/blob/master/sources/infinite.js expanded upon. */
    $random = function(n, seed, delta) {
      var rnd;
      rnd = CND.get_rnd(n, seed, delta);
      return function(end, callback) {
        if (end) {
          return callback(end);
        }
        if (0 > (n += -1)) {
          return callback(true);
        }
        return callback(null, rnd());
      };
    };
    //.........................................................................................................
    Ø($random(10, 1, 1));
    Ø(PS.$show());
    Ø(PS.$collect());
    Ø($('null', function(data, send) {
      if (data != null) {
        // T.ok section_count is expect_count
        return send(data);
      } else {
        return done();
      }
    }));
    // send null
    Ø(PS.$drain());
    //.........................................................................................................
    return PS.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this["generator as source 2"] = async function(T, done) {
    var count, g;
    count = 0;
    //.........................................................................................................
    g = function*(max) {
      while (true) {
        if (count >= max) {
          break;
        }
        yield ++count;
      }
      return null;
    };
    //.........................................................................................................
    await T.perform(null, [1, 2, 3, 4], function() {
      return new Promise(function(resolve) {
        var pipeline;
        pipeline = [];
        pipeline.push(PS.$generate(g(10)));
        pipeline.push($(function(d, send) {
          return send(d === 5 ? null : d);
        }));
        pipeline.push(PS.$show());
        pipeline.push(PS.$collect());
        pipeline.push(PS.$watch(function(d) {
          debug('22920', d);
          return resolve(d);
        }));
        pipeline.push(PS.$drain());
        return PS.pull(...pipeline);
      });
    });
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this);
  }

}).call(this);

//# sourceMappingURL=generator-as-source.test.js.map
