{
  "version": 3,
  "file": "async-map.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/async-map.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/ASYNC-MAP'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nnew_numeral               = require 'numeral'\nformat_float              = ( x ) -> ( new_numeral x ).format '0,0.000'\nformat_integer            = ( x ) -> ( new_numeral x ).format '0,0'\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\n$split                    = require 'pull-split'\n$stringify                = require 'pull-stringify'\n$utf8                     = require 'pull-utf8-decoder'\nnew_file_source           = require 'pull-file'\npull                      = require 'pull-stream'\n### NOTE these two are different: ###\n# $pass_through             = require 'pull-stream/throughs/through'\nthrough                   = require 'pull-through'\nasync_map                 = require 'pull-stream/throughs/async-map'\n$drain                    = require 'pull-stream/sinks/drain'\nSTPS                      = require 'stream-to-pull-stream'\n#...........................................................................................................\nS                         = {}\nS.pass_through_count      = 0\n# S.pass_through_count      = 1\n# S.pass_through_count      = 100\n# S.implementation          = 'pull-stream'\nS.implementation          = 'pipestreams-map'\n# S.implementation          = 'pipestreams-remit'\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\n\n#-----------------------------------------------------------------------------------------------------------\nafter = ( dts, f ) -> setTimeout f, dts * 1000\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ->\n  test @, 'timeout': 30000\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 1\" ] = ( T, done ) ->\n  ok        = false\n  probe     = \"abcdef\"\n  matcher   =  \"*a**b**c**d**e**f*\"\n  pipeline  = []\n  pipeline.push PS.new_value_source Array.from probe\n  pipeline.push PS._$async_map ( d, handler ) ->\n    after ( Math.random() / 5 ), ->\n      handler null, '*' + d + '*'\n    return null\n  pipeline.push PS.$show()\n  pipeline.push PS.$join()\n  #.........................................................................................................\n  pipeline.push PS.$watch ( result ) ->\n    echo CND.gold jr [ probe, result, ]\n    T.eq result, matcher\n    ok = true\n  #.........................................................................................................\n  pipeline.push PS.$drain ->\n    T.fail \"failed to pass test\" unless ok\n    done()\n  #.........................................................................................................\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 1 paramap\" ] = ( T, done ) ->\n  ok        = false\n  probe     = \"abcdef\"\n  matcher   =  \"*a**b**c**d**e**f*\"\n  pipeline  = []\n  pipeline.push PS.new_value_source Array.from probe\n  pipeline.push PS._$paramap ( d, handler ) ->\n    after ( Math.random() / 5 ), ->\n      handler null, '*' + d + '*'\n    return null\n  pipeline.push PS.$show()\n  pipeline.push PS.$join()\n  #.........................................................................................................\n  pipeline.push PS.$watch ( result ) ->\n    echo CND.gold jr [ probe, result, ]\n    T.eq result, matcher\n    ok = true\n  #.........................................................................................................\n  pipeline.push PS.$drain ->\n    T.fail \"failed to pass test\" unless ok\n    done()\n  #.........................................................................................................\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$send_three = ->\n  return PS.$async ( d, send, done ) ->\n    count = 0\n    n     = 3\n    after ( Math.random() / 5 ), ->\n      debug '77634', d\n      for nr in [ 1 .. n ]\n        count += +1\n        send \"(#{d}:#{nr})\"\n        done() if count >= n\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"async 2\" ] = ( T, done ) ->\n  ok        = false\n  probe     = \"abcdef\"\n  matcher   = \"(a:1)(a:2)(a:3)(b:1)(b:2)(b:3)(c:1)(c:2)(c:3)(d:1)(d:2)(d:3)(e:1)(e:2)(e:3)(f:1)(f:2)(f:3)\"\n  pipeline  = []\n  pipeline.push PS.new_value_source Array.from probe\n  pipeline.push $send_three()\n  pipeline.push PS.$show()\n  pipeline.push PS.$join()\n  #.........................................................................................................\n  pipeline.push PS.$watch ( result ) ->\n    echo CND.gold jr [ probe, result, ]\n    T.eq result, matcher\n    ok = true\n  #.........................................................................................................\n  pipeline.push PS.$drain ->\n    T.fail \"failed to pass test\" unless ok\n    done()\n  #.........................................................................................................\n  PS.pull pipeline...\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  include = [\n    \"async 1\"\n    \"async 1 paramap\"\n    \"async 2\"\n    ]\n  @_prune()\n  @_main()\n\n\n\n\n\n\n"
  ]
}