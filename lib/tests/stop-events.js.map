{
  "version": 3,
  "file": "stop-events.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/stop-events.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/TEE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\nTAP                       = require 'tap'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\n#...........................................................................................................\n\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"tee and stop events\", ( T ) ->\n  sink_0_path       = '/tmp/pipestreams-test-tee-0.txt'\n  sink_1_path       = '/tmp/pipestreams-test-tee-1.txt'\n  sink_2_path       = '/tmp/pipestreams-test-tee-2.txt'\n  sink_0            = PS.new_file_sink sink_0_path\n  sink_1            = PS.new_file_sink sink_1_path\n  sink_2            = PS.new_file_sink sink_2_path\n  sink_0_finished   = no\n  sink_1_finished   = no\n  sink_2_finished   = no\n  #.........................................................................................................\n  $link       = ( linker )  -> PS.map    ( value  ) -> ( JSON.stringify value ) + linker\n  $keep_odd   =             -> PS.filter ( number ) -> number % 2 isnt 0\n  $keep_even  =             -> PS.filter ( number ) -> number % 2 is   0\n  #.........................................................................................................\n  finish = ->\n    if sink_0_finished then help \"sink_0 finished\" else warn \"waiting for sink_0\"\n    if sink_1_finished then help \"sink_1 finished\" else warn \"waiting for sink_1\"\n    if sink_2_finished then help \"sink_2 finished\" else warn \"waiting for sink_2\"\n    whisper '----------------------'\n    # return unless sink_0_finished\n    # return unless sink_0_finished and sink_1_finished\n    return unless sink_0_finished and sink_1_finished and sink_2_finished\n    T.ok CND.equals ( FS.readFileSync sink_0_path, { encoding: 'utf-8', } ), '0-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-'\n    T.ok CND.equals ( FS.readFileSync sink_1_path, { encoding: 'utf-8', } ), '1*3*5*7*9*11*13*15*17*19*'\n    T.ok CND.equals ( FS.readFileSync sink_2_path, { encoding: 'utf-8', } ), '0+2+4+6+8+10+12+14+16+18+20+'\n    # debug '30091', FS.readFileSync sink_1_path, { encoding: 'utf-8', }\n    # debug '30091', FS.readFileSync sink_2_path, { encoding: 'utf-8', }\n    T.end()\n  #.........................................................................................................\n  sink_0.on 'stop', => sink_0_finished = yes; finish()\n  sink_1.on 'stop', => sink_1_finished = yes; finish()\n  sink_2.on 'stop', => sink_2_finished = yes; finish()\n  #.........................................................................................................\n  ppline_1  = []\n  ppline_1.push $keep_odd()\n  ppline_1.push $link '*'\n  ppline_1.push sink_1\n  stream_1 = PS.pull ppline_1...\n  #.........................................................................................................\n  ppline_2  = []\n  ppline_2.push $keep_even()\n  ppline_2.push $link '+'\n  ppline_2.push sink_2\n  stream_2 = PS.pull ppline_2...\n  #.........................................................................................................\n  ppline_0  = []\n  ppline_0.push PS.new_value_source ( n for n in [ 0 .. 20 ] )\n  ppline_0.push PS.$tee stream_1\n  ppline_0.push PS.$tee stream_2\n  ppline_0.push $link '-'\n  ppline_0.push sink_0\n  #.........................................................................................................\n  stream_0 = PS.pull ppline_0...\n  # PS.pull ppline_1...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"tee and stop events, 'collective' API\", ( T ) ->\n  on_stop = PS.new_event_collector 'stop', ->\n    T.ok CND.equals ( FS.readFileSync sink_0_path, { encoding: 'utf-8', } ), '0-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-'\n    T.ok CND.equals ( FS.readFileSync sink_1_path, { encoding: 'utf-8', } ), '1*3*5*7*9*11*13*15*17*19*'\n    T.ok CND.equals ( FS.readFileSync sink_2_path, { encoding: 'utf-8', } ), '0+2+4+6+8+10+12+14+16+18+20+'\n    T.end()\n  #.........................................................................................................\n  sink_0_path       = '/tmp/pipestreams-test-tee-0.txt'\n  sink_1_path       = '/tmp/pipestreams-test-tee-1.txt'\n  sink_2_path       = '/tmp/pipestreams-test-tee-2.txt'\n  sink_0            = on_stop.add PS.new_file_sink sink_0_path\n  sink_1            = on_stop.add PS.new_file_sink sink_1_path\n  sink_2            = on_stop.add PS.new_file_sink sink_2_path\n  #.........................................................................................................\n  $link       = ( linker )  -> PS.map    ( value  ) -> ( JSON.stringify value ) + linker\n  $keep_odd   =             -> PS.filter ( number ) -> number % 2 isnt 0\n  $keep_even  =             -> PS.filter ( number ) -> number % 2 is   0\n  #.........................................................................................................\n  ppline_1  = []\n  ppline_1.push $keep_odd()\n  ppline_1.push $link '*'\n  ppline_1.push sink_1\n  stream_1 = PS.pull ppline_1...\n  #.........................................................................................................\n  ppline_2  = []\n  ppline_2.push $keep_even()\n  ppline_2.push $link '+'\n  ppline_2.push sink_2\n  stream_2 = PS.pull ppline_2...\n  #.........................................................................................................\n  ppline_0  = []\n  ppline_0.push PS.new_value_source ( n for n in [ 0 .. 20 ] )\n  ppline_0.push PS.$tee stream_1\n  ppline_0.push PS.$tee stream_2\n  ppline_0.push $link '-'\n  ppline_0.push sink_0\n  #.........................................................................................................\n  PS.pull ppline_0...\n  return null\n\n"
  ]
}