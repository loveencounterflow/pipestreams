// Generated by CoffeeScript 1.11.1
(function() {
  var $, $async, CND, FS, OS, PATH, PS, TAP, alert, badge, debug, echo, help, info, log, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS/TESTS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  TAP = require('tap');

  PS = require('../..');

  $ = PS.$, $async = PS.$async;

  TAP.test("test line assembler", function(T) {
    var assembler, chunk, chunks, collector, i, len, text;
    text = "\"　2. 纯；专：专～。～心～意。\"\n!\"　3. 全；满：～生。～地水。\"\n\"　4. 相同：～样。颜色不～。\"\n\"　5. 另外!的：蟋蟀～名促织。!\"\n\"　6. 表示动作短暂，或是一次，或具试探性：算～算。试～试。\"!\n\"　7. 乃；竞：～至于此。\"";
    chunks = text.split('!');
    text = text.replace(/!/g, '');
    collector = [];
    assembler = PS._new_line_assembler({
      extra: true,
      splitter: '\n'
    }, function(error, line) {
      if (error != null) {
        throw error;
      }
      if (line != null) {
        collector.push(line);
        return info(rpr(line));
      } else {
        if (CND.equals(text, collector.join('\n'))) {
          T.pass("texts are equal");
        }
        return T.end();
      }
    });
    for (i = 0, len = chunks.length; i < len; i++) {
      chunk = chunks[i];
      assembler(chunk);
    }
    return assembler(null);
  });

  TAP.test("test throughput (1)", function(T) {
    var input, lines, output;
    input = PS.new_stream(PATH.resolve(__dirname, '../../test-data/Unicode-NamesList-tiny.txt'));
    output = FS.createWriteStream('/tmp/output.txt');
    lines = [];
    input.pipe(PS.$split()).pipe(PS.$pass()).pipe(PS.$as_line()).pipe($(function(line, send) {
      lines.push(line);
      return send(line);
    })).pipe(output);

    /* TAINT use PipeStreams method */
    input.on('end', function() {
      return output.end();
    });
    output.on('close', function() {
      T.pass("assuming equality");
      return T.end();
    });
    return null;
  });

  TAP.test("test throughput (2)", function(T) {
    var input, lines, output, p;
    input = PS.new_stream(PATH.resolve(__dirname, '../../test-data/Unicode-NamesList-tiny.txt'));
    output = FS.createWriteStream('/tmp/output.txt');
    lines = [];
    p = input;
    p = p.pipe(PS.$split());
    p = p.pipe(PS.$pass());
    p = p.pipe(PS.$as_line());
    p = p.pipe($(function(line, send) {
      lines.push(line);
      return send(line);
    }));
    p = p.pipe(output);

    /* TAINT use PipeStreams method */
    input.on('end', function() {
      return output.end();
    });
    output.on('close', function() {
      T.pass("assuming equality");
      return T.end();
    });
    return null;
  });

  TAP.test("read with pipestreams", function(T) {
    var S, collector, input, input_path, matcher, output, output_path, p;
    matcher = ['01 ; charset=UTF-8', '02 @@@\tThe Unicode Standard 9.0.0', '03 @@@+\tU90M160615.lst', '04 \tUnicode 9.0.0 final names list.', '05 \tThis file is semi-automatically derived from UnicodeData.txt and', '06 \ta set of manually created annotations using a script to select', '07 \tor suppress information from the data file. The rules used', '08 \tfor this process are aimed at readability for the human reader,', '09 \tat the expense of some details; therefore, this file should not', '10 \tbe parsed for machine-readable information.', '11 @+\t\t© 2016 Unicode®, Inc.', '12 \tFor terms of use, see http://www.unicode.org/terms_of_use.html', '13 @@\t0000\tC0 Controls and Basic Latin (Basic Latin)\t007F', '14 @@+'];
    input_path = '/home/flow/io/basic-stream-benchmarks/test-data/Unicode-NamesList-tiny.txt';
    output_path = '/tmp/output.txt';
    input = PS.new_stream(input_path);
    output = FS.createWriteStream(output_path);
    collector = [];
    S = {};
    S.item_count = 0;
    S.byte_count = 0;
    p = input;
    p = p.pipe($(function(data, send) {
      whisper('20078-1', rpr(data));
      return send(data);
    }));
    p = p.pipe(PS.$split());
    p = p.pipe($(function(data, send) {
      help('20078-1', rpr(data));
      return send(data);
    }));
    p = p.pipe(PS.$(function(line, send) {
      S.item_count += +1;
      S.byte_count += line.length;
      debug('22001-0', rpr(line));
      collector.push(line);
      return send(line);
    }));
    p = p.pipe($(function(data, send) {
      urge('20078-2', rpr(data));
      return send(data);
    }));
    p = p.pipe(PS.$as_line());
    p = p.pipe(output);

    /* TAINT use PipeStreams method */
    output.on('close', function() {
      if (CND.equals(collector, matcher)) {
        T.pass("collector equals matcher");
      }
      return T.end();
    });

    /* TAINT should be done by PipeStreams */
    input.on('end', function() {
      return output.end();
    });
    return null;
  });

}).call(this);

//# sourceMappingURL=basic.js.map
