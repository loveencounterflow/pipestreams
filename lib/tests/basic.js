// Generated by CoffeeScript 1.12.2
(function() {
  var $, $async, $pull_drain, $take, $values, CND, FS, OS, PATH, PS, TAP, alert, badge, debug, echo, help, info, log, pull, pull_through, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS/TESTS/BASIC';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  TAP = require('tap');

  PS = require('../..');

  $ = PS.$, $async = PS.$async;

  pull = require('pull-stream');

  $take = require('pull-stream/throughs/take');

  $values = require('pull-stream/sources/values');

  $pull_drain = require('pull-stream/sinks/drain');

  pull_through = require('pull-through');

  TAP.test("remit with end detection", function(T) {
    var pipeline;
    pipeline = [];
    pipeline.push($values(Array.from('abcdef')));
    pipeline.push($('null', function(data, send) {
      if (data != null) {
        send(data);
        return send('*' + data + '*');
      } else {
        return send('ok');
      }
    }));
    pipeline.push(PS.$show());
    pipeline.push($pull_drain());
    PS.pull.apply(PS, pipeline);
    T.pass("ok");
    return T.end();
  });

  TAP.test("wrap FS object for sink", function(T) {
    var output_file, output_path, pipeline, sink;
    output_path = '/tmp/pipestreams-test-output.txt';
    output_file = FS.createWriteStream(output_path);
    sink = PS.new_file_sink(output_file);
    pipeline = [];
    pipeline.push($values(Array.from('abcdef')));
    pipeline.push(PS.$show());
    pipeline.push(sink);
    pull.apply(null, pipeline);
    return output_file.on('finish', (function(_this) {
      return function() {
        T.ok(CND.equals('abcdef', FS.readFileSync(output_path, {
          encoding: 'utf-8'
        })));
        return T.end();
      };
    })(this));
  });

  TAP.test("function as pull-stream source", function(T) {
    var pipeline, random, Ø;
    random = (function(_this) {
      return function(n) {
        return function(end, callback) {
          if (end != null) {
            debug('40998', rpr(callback));
            debug('40998', rpr(end));
            return callback(end);
          }
          n += -1;
          if (n < 0) {
            return callback(true);
          }
          callback(null, Math.random());
          return null;
        };
      };
    })(this);
    pipeline = [];
    Ø = (function(_this) {
      return function(x) {
        return pipeline.push(x);
      };
    })(this);
    Ø(random(10));
    Ø(PS.$collect());
    Ø($('null', function(data, send) {
      if (data != null) {
        T.ok(data.length === 10);
        debug(data);
        return send(data);
      } else {
        T.ok("function works as pull-stream source");
        T.end();
        return send(null);
      }
    }));
    Ø(PS.$show());
    Ø(PS.$drain());
    PS.pull.apply(PS, pipeline);
    return null;
  });

}).call(this);

//# sourceMappingURL=basic.js.map
