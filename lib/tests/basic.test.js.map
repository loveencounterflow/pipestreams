{
  "version": 3,
  "file": "basic.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/basic.test.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,WAAA,EAAA,KAAA,EAAA,OAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,UAAR,EAnB5B;;;EAqBA,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,CAAF,EAAK,MAAL,CAAA,GAA4B,EAA5B,EAtBA;;;EAwBA,IAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,KAAA,GAA4B,OAAA,CAAQ,2BAAR;;EAC5B,OAAA,GAA4B,OAAA,CAAQ,4BAAR;;EAC5B,WAAA,GAA4B,OAAA,CAAQ,yBAAR;;EAC5B,YAAA,GAA4B,OAAA,CAAQ,cAAR,EA5B5B;;;EA8BA,IAAA,GAA4B,QAAA,CAAE,IAAF,CAAA;WAAY,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAsB;MAAE,QAAA,EAAU;IAAZ,CAAtB;EAAZ;;EAC5B,KAAA,GAA4B,aA/B5B;;;EAkCA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAA,CAAA;AACR,QAAA,IAAA,EAAA,GAAA,EAAA;AAAA;IAAA,KAAA,WAAA;;MACE,IAAY,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAZ;AAAA,iBAAA;;MACA,IAAwB,aAAQ,OAAR,EAAA,IAAA,KAAxB;QAAA,OAAO,IAAG,CAAA,IAAA,EAAV;;IAFF;AAGA,WAAO;EAJC,EAlCV;;;EAyCA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAA,CAAA;WACP,IAAA,CAAK,IAAL,EAAQ;MAAA,SAAA,EAAW;IAAX,CAAR;EADO,EAzCT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkMA,IAAG,CAAA,0BAAA,CAAH,GAAkC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAEhC,QAAA,QAAA;;IAAA,QAAA,GAAW;IACX,QAAQ,CAAC,IAAT,CAAc,OAAA,CAAQ,KAAK,CAAC,IAAN,CAAW,QAAX,CAAR,CAAd,EADA;;;IAIA,QAAQ,CAAC,IAAT,CAAc,CAAA,CAAE;MAAE,IAAA,EAAM;IAAR,CAAF,EAAmB,QAAA,CAAE,IAAF,EAAQ,IAAR,CAAA;MAC/B,IAAG,YAAH;QACE,IAAA,CAAK,IAAL;eACA,IAAA,CAAK,GAAA,GAAM,IAAN,GAAa,GAAlB,EAFF;OAAA,MAAA;eAIE,IAAA,CAAK,IAAL,EAJF;;IAD+B,CAAnB,CAAd;IAMA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,KAAH,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,WAAA,CAAA,CAAd;IACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;IACA,CAAC,CAAC,OAAF,CAAU,IAAV;WACA,IAAA,CAAA;EAhBgC,EAlMlC;;;EAqNA,IAAG,CAAA,yBAAA,CAAH,GAAiC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAC/B,QAAA,WAAA,EAAA,aAAA,EAAA,QAAA,EAAA;IAAA,WAAA,GAAgB;IAChB,aAAA,GAAgB,EAAE,CAAC,iBAAH,CAAqB,WAArB;IAChB,IAAA,GAAgB,EAAE,CAAC,sBAAH,CAA0B,aAA1B,EAFhB;IAGA,QAAA,GAAgB;IAChB,QAAQ,CAAC,IAAT,CAAc,OAAA,CAAQ,KAAK,CAAC,IAAN,CAAW,QAAX,CAAR,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,KAAH,CAAA,CAAd;IACA,QAAQ,CAAC,IAAT,CAAc,IAAd;IACA,IAAA,CAAK,GAAA,QAAL;WACA,aAAa,CAAC,EAAd,CAAiB,QAAjB,EAA2B,CAAA,CAAA,GAAA;MACzB,CAAC,CAAC,EAAF,CAAK,GAAG,CAAC,MAAJ,CAAW,QAAX,EAAqB,IAAA,CAAK,WAAL,CAArB,CAAL;aACA,IAAA,CAAA;IAFyB,CAA3B;EAT+B,EArNjC;;;EAmOA,IAAG,CAAA,gCAAA,CAAH,GAAwC,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtC,QAAA,QAAA,EAAA,MAAA,EAAA;IAAA,MAAA,GAAS,CAAE,CAAF,CAAA,GAAA;AACP,aAAO,CAAE,GAAF,EAAO,QAAP,CAAA,GAAA;QACL,IAAG,WAAH;UACE,KAAA,CAAM,OAAN,EAAe,GAAA,CAAI,QAAJ,CAAf;UACA,KAAA,CAAM,OAAN,EAAe,GAAA,CAAI,GAAJ,CAAf;AACA,iBAAO,QAAA,CAAS,GAAT,EAHT;SAAA;;QAKA,CAAA,IAAK,CAAC;QACN,IAAG,CAAA,GAAI,CAAP;AACE,iBAAO,QAAA,CAAS,IAAT,EADT;;QAEA,QAAA,CAAS,IAAT,EAAe,IAAI,CAAC,MAAL,CAAA,CAAf;AACA,eAAO;MAVF;IADA,EAAT;;IAaA,QAAA,GAAY;IACZ,CAAA,GAAY,CAAE,CAAF,CAAA,GAAA;aAAS,QAAQ,CAAC,IAAT,CAAc,CAAd;IAAT;IACZ,CAAA,CAAE,MAAA,CAAO,EAAP,CAAF,EAfA;;IAiBA,CAAA,CAAE,EAAE,CAAC,QAAH,CAAA,CAAF;IACA,CAAA,CAAE,CAAA,CAAE;MAAE,IAAA,EAAM;IAAR,CAAF,EAAmB,QAAA,CAAE,IAAF,EAAQ,IAAR,CAAA;MACnB,IAAG,YAAH;QACE,CAAC,CAAC,EAAF,CAAK,IAAI,CAAC,MAAL,KAAe,EAApB;QACA,KAAA,CAAM,IAAN;eACA,IAAA,CAAK,IAAL,EAHF;OAAA,MAAA;QAKE,CAAC,CAAC,OAAF,CAAU,sCAAV;QACA,IAAA,CAAA;eACA,IAAA,CAAK,IAAL,EAPF;;IADmB,CAAnB,CAAF;IASA,CAAA,CAAE,EAAE,CAAC,KAAH,CAAA,CAAF;IACA,CAAA,CAAE,EAAE,CAAC,MAAH,CAAA,CAAF,EA5BA;;IA8BA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,WAAO;EAhC+B,EAnOxC;;;EAsQA,IAAG,CAAA,WAAA,CAAH,GAAmB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACjB,QAAA,KAAA,EAAA,OAAA,EAAA;IAAA,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB,CAAA,GAA6B,CAAC,IAAD,EAAM,gCAAN,EAAuC,IAAvC;IAC7B,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AACrC,aAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjB,YAAA,CAAA,EAAA,OAAA,EAAA;QAAA,CAAA,GAAY;QACZ,OAAA,GAAY,QAAA,CAAA,CAAA;UAAG,IAAA,CAAK,IAAL;iBAAW,OAAA,CAAQ,CAAR;QAAd;QACZ,QAAA,GAAY;QACZ,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,gBAAH,CAAoB,eAApB,CAAd,EAHA;;QAKA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,SAAH,CAAa;UAAE,KAAA,EAAO,GAAT;UAAc,IAAA,EAAM,GAApB;UAAyB,MAAA,EAAQ,GAAjC;UAAsC,OAAA,EAAS,GAA/C;UAAoD,KAAA,EAAO;QAA3D,CAAb,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,SAAH,CAAa;UAAE,KAAA,EAAO,OAAT;UAAkB,IAAA,EAAM;QAAxB,CAAb,CAAd,EANA;;;;QAUA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,QAAH,CAAA,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAAe,cAAA;iBAAA,IAAA,CAAK;;AAAe;YAAA,KAAA,mCAAA;;2BAAb,CAAC,CAAC,QAAF,CAAA;YAAa,CAAA;;cAAf,CAA2B,CAAC,IAA5B,CAAiC,EAAjC,CAAL;QAAf,CAAF,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAA,GAAI;QAAb,CAAV,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,OAAV,CAAd;QACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,eAAO;MAhBU,CAAZ;IAD8B,CAAjC,EADN;;IAoBA,IAAA,CAAA;AACA,WAAO;EAtBU,EAtQnB;;;EA+RA,IAAG,CAAA,iBAAA,CAAH,GAAyB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACvB,QAAA,KAAA,EAAA,OAAA,EAAA;IAAA,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB,CAAA,GAA6B,CAAC,IAAD,EAAM,wBAAN,EAA+B,IAA/B;IAC7B,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AACrC,aAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;AACjB,YAAA,CAAA,EAAA,OAAA,EAAA;QAAA,CAAA,GAAY;QACZ,OAAA,GAAY,QAAA,CAAA,CAAA;UAAG,IAAA,CAAK,IAAL;iBAAW,OAAA,CAAQ,CAAR;QAAd;QACZ,QAAA,GAAY;QACZ,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,gBAAH,CAAoB,eAApB,CAAd,EAHA;;QAKA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,SAAH,CAAa;UAAE,KAAA,EAAO,OAAT;UAAkB,IAAA,EAAM;QAAxB,CAAb,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO;UAAE,KAAA,EAAO,GAAT;UAAc,IAAA,EAAM,GAApB;UAAyB,OAAA,EAAS;QAAlC,CAAP,EAAiD,CAAE,CAAF,EAAK,IAAL,EAAW,IAAX,CAAA,GAAA;iBAC7D,KAAA,CAAM,QAAA,CAAA,CAAA,EAAA;;YAEJ,IAAA,CAAK,CAAL;mBACA,IAAA,CAAA;UAHI,CAAN;QAD6D,CAAjD,CAAd,EANA;;QAYA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,QAAH,CAAA,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,CAAA,CAAE,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AAAe,cAAA;iBAAA,IAAA,CAAK;;AAAe;YAAA,KAAA,mCAAA;;2BAAb,CAAC,CAAC,QAAF,CAAA;YAAa,CAAA;;cAAf,CAA2B,CAAC,IAA5B,CAAiC,EAAjC,CAAL;QAAf,CAAF,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAA,GAAI;QAAb,CAAV,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,OAAV,CAAd;QACA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,eAAO;MAlBU,CAAZ;IAD8B,CAAjC,EADN;;IAsBA,IAAA,CAAA;AACA,WAAO;EAxBgB,EA/RzB;;;EA0TA,IAAO,qBAAP;;;;IAIE,IAAA,CAAK,IAAG,CAAA,iBAAA,CAAR,EAJF;;AA1TA",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/BASIC'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\n#...........................................................................................................\npull                      = require 'pull-stream'\n$take                     = require 'pull-stream/throughs/take'\n$values                   = require 'pull-stream/sources/values'\n$pull_drain               = require 'pull-stream/sinks/drain'\npull_through              = require 'pull-through'\n#...........................................................................................................\nread                      = ( path ) -> FS.readFileSync path, { encoding: 'utf-8', }\ndefer                     = setImmediate\n\n#-----------------------------------------------------------------------------------------------------------\n@_prune = ->\n  for name, value of @\n    continue if name.startsWith '_'\n    delete @[ name ] unless name in include\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_main = ->\n  test @, 'timeout': 30000\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test line assembler\" ] = ( T, done ) ->\n#   text = \"\"\"\n#   \"　2. 纯；专：专～。～心～意。\"\n#   !\"　3. 全；满：～生。～地水。\"\n#   \"　4. 相同：～样。颜色不～。\"\n#   \"　5. 另外!的：蟋蟀～名促织。!\"\n#   \"　6. 表示动作短暂，或是一次，或具试探性：算～算。试～试。\"!\n#   \"　7. 乃；竞：～至于此。\"\n#   \"\"\"\n#   # text = \"abc\\ndefg\\nhijk\"\n#   chunks    = text.split '!'\n#   text      = text.replace /!/g, ''\n#   collector = []\n#   assembler = PS._new_line_assembler { extra: true, splitter: '\\n', }, ( error, line ) ->\n#     throw error if error?\n#     if line?\n#       collector.push line\n#       info rpr line\n#     else\n#       # urge rpr text\n#       # help rpr collector.join '\\n'\n#       # debug collector\n#       if CND.equals text, collector.join '\\n'\n#         T.succeed \"texts are equal\"\n#       done()\n#   for chunk in chunks\n#     assembler chunk\n#   assembler null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test throughput (1)\" ] = ( T, done ) ->\n#   # input   = @new_stream PATH.resolve __dirname, '../test-data/guoxuedashi-excerpts-short.txt'\n#   input   = PS.new_stream PATH.resolve __dirname, '../../test-data/Unicode-NamesList-tiny.txt'\n#   output  = FS.createWriteStream '/tmp/output.txt'\n#   lines   = []\n#   input\n#     .pipe PS.$split()\n#     # .pipe PS.$show()\n#     .pipe PS.$succeed()\n#     .pipe PS.$as_line()\n#     .pipe $ ( line, send ) ->\n#       lines.push line\n#       send line\n#     .pipe output\n#   ### TAINT use PipeStreams method ###\n#   input.on 'end', -> outpudone()\n#   output.on 'close', ->\n#     # if CND.equals lines.join '\\n'\n#     T.succeed \"assuming equality\"\n#     done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"test throughput (2)\" ] = ( T, done ) ->\n#   # input   = @new_stream PATH.resolve __dirname, '../test-data/guoxuedashi-excerpts-short.txt'\n#   input   = PS.new_stream PATH.resolve __dirname, '../../test-data/Unicode-NamesList-tiny.txt'\n#   output  = FS.createWriteStream '/tmp/output.txt'\n#   lines   = []\n#   p       = input\n#   p       = p.pipe PS.$split()\n#   # p       = p.pipe PS.$show()\n#   p       = p.pipe PS.$succeed()\n#   p       = p.pipe PS.$as_line()\n#   p       = p.pipe $ ( line, send ) ->\n#       lines.push line\n#       send line\n#   p       = p.pipe output\n#   ### TAINT use PipeStreams method ###\n#   input.on 'end', -> outpudone()\n#   output.on 'close', ->\n#     # if CND.equals lines.join '\\n'\n#     # debug '12001', lines\n#     T.succeed \"assuming equality\"\n#     done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"read with pipestreams\" ] = ( T, done ) ->\n#   matcher       = [\n#     '01 ; charset=UTF-8',\n#     '02 @@@\\tThe Unicode Standard 9.0.0',\n#     '03 @@@+\\tU90M160615.lst',\n#     '04 \\tUnicode 9.0.0 final names list.',\n#     '05 \\tThis file is semi-automatically derived from UnicodeData.txt and',\n#     '06 \\ta set of manually created annotations using a script to select',\n#     '07 \\tor suppress information from the data file. The rules used',\n#     '08 \\tfor this process are aimed at readability for the human reader,',\n#     '09 \\tat the expense of some details; therefore, this file should not',\n#     '10 \\tbe parsed for machine-readable information.',\n#     '11 @+\\t\\t© 2016 Unicode®, Inc.',\n#     '12 \\tFor terms of use, see http://www.unicode.org/terms_of_use.html',\n#     '13 @@\\t0000\\tC0 Controls and Basic Latin (Basic Latin)\\t007F',\n#     '14 @@+'\n#     ]\n#   # input_path    = '../../test-data/Unicode-NamesList-tiny.txt'\n#   input_path    = '/home/flow/io/basic-stream-benchmarks/test-data/Unicode-NamesList-tiny.txt'\n#   # output_path   = '/dev/null'\n#   output_path   = '/tmp/output.txt'\n#   input         = PS.new_stream input_path\n#   output        = FS.createWriteStream output_path\n#   collector     = []\n#   S             = {}\n#   S.item_count  = 0\n#   S.byte_count  = 0\n#   p             = input\n#   p             = p.pipe $ ( data, send ) -> whisper '20078-1', rpr data; send data\n#   p             = p.pipe PS.$split()\n#   p             = p.pipe $ ( data, send ) -> help '20078-1', rpr data; send data\n#   #.........................................................................................................\n#   p             = p.pipe PS.$ ( line, send ) ->\n#     S.item_count += +1\n#     S.byte_count += line.length\n#     debug '22001-0', rpr line\n#     collector.push line\n#     send line\n#   #.........................................................................................................\n#   p             = p.pipe $ ( data, send ) -> urge '20078-2', rpr data; send data\n#   p             = p.pipe PS.$as_line()\n#   p             = p.pipe output\n#   #.........................................................................................................\n#   ### TAINT use PipeStreams method ###\n#   output.on 'close', ->\n#     # debug '88862', S\n#     # debug '88862', collector\n#     if CND.equals collector, matcher\n#       T.succeed \"collector equals matcher\"\n#     done()\n#   #.........................................................................................................\n#   ### TAINT should be done by PipeStreams ###\n#   input.on 'end', ->\n#     outpudone()\n#   #.........................................................................................................\n#   return null\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"remit without end detection\" ] = ( T, done ) ->\n#   pipeline = []\n#   pipeline.push $values Array.from 'abcdef'\n#   pipeline.push $ ( data, send ) ->\n#     send data\n#     send '*' + data + '*'\n#   pipeline.push PS.$show()\n#   pipeline.push $pull_drain()\n#   PS.pull pipeline...\n#   T.succeed \"ok\"\n#   done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"remit with end detection\" ] = ( T, done ) ->\n  # debug ( key for key of T ); xxx\n  pipeline = []\n  pipeline.push $values Array.from 'abcdef'\n  # pipeline.push pull_through ( ( data ) -> urge data ), ( -> urge 'ok'; @queue null )\n  # pipeline.push pull_through ( ( data ) -> urge data ), null\n  pipeline.push $ { last: null, }, ( data, send ) ->\n    if data?\n      send data\n      send '*' + data + '*'\n    else\n      send 'ok'\n  pipeline.push PS.$show()\n  pipeline.push $pull_drain()\n  PS.pull pipeline...\n  T.succeed \"ok\"\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wrap FS object for sink\" ] = ( T, done ) ->\n  output_path   = '/tmp/pipestreams-test-output.txt'\n  output_stream = FS.createWriteStream output_path\n  sink          = PS.write_to_nodejs_stream output_stream #, ( error ) -> debug '37783', error\n  pipeline      = []\n  pipeline.push $values Array.from 'abcdef'\n  pipeline.push PS.$show()\n  pipeline.push sink\n  pull pipeline...\n  output_stream.on 'finish', =>\n    T.ok CND.equals 'abcdef', read output_path\n    done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"function as pull-stream source\" ] = ( T, done ) ->\n  random = ( n ) =>\n    return ( end, callback ) =>\n      if end?\n        debug '40998', rpr callback\n        debug '40998', rpr end\n        return callback end\n      #only read n times, then stop.\n      n += -1\n      if n < 0\n        return callback true\n      callback null, Math.random()\n      return null\n  #.........................................................................................................\n  pipeline  = []\n  Ø         = ( x ) => pipeline.push x\n  Ø random 10\n  # Ø random 3\n  Ø PS.$collect()\n  Ø $ { last: null, }, ( data, send ) ->\n    if data?\n      T.ok data.length is 10\n      debug data\n      send data\n    else\n      T.succeed \"function works as pull-stream source\"\n      done()\n      send null\n  Ø PS.$show()\n  Ø PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$surround\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [null,\"first[(1),(2),(3),(4),(5)]last\",null]\n  await T.perform probe, matcher, error, ->\n    return new Promise ( resolve, reject ) ->\n      R         = null\n      drainer   = -> help 'ok'; resolve R\n      pipeline  = []\n      pipeline.push PS.new_value_source [ 1 .. 5 ]\n      #.........................................................................................................\n      pipeline.push PS.$surround { first: '[', last: ']', before: '(', between: ',', after: ')' }\n      pipeline.push PS.$surround { first: 'first', last: 'last', }\n      # pipeline.push PS.$surround { first: 'first', last: 'last', before: 'before', between: 'between', after: 'after' }\n      # pipeline.push PS.$surround { first: '[', last: ']', }\n      #.........................................................................................................\n      pipeline.push PS.$collect()\n      pipeline.push $ ( d, send ) -> send ( x.toString() for x in d ).join ''\n      pipeline.push PS.$watch ( d ) -> R = d\n      pipeline.push PS.$drain drainer\n      PS.pull pipeline...\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$surround async\" ] = ( T, done ) ->\n  [ probe, matcher, error, ] = [null,\"[first|1|2|3|4|5|last]\",null]\n  await T.perform probe, matcher, error, ->\n    return new Promise ( resolve, reject ) ->\n      R         = null\n      drainer   = -> help 'ok'; resolve R\n      pipeline  = []\n      pipeline.push PS.new_value_source [ 1 .. 5 ]\n      #.........................................................................................................\n      pipeline.push PS.$surround { first: 'first', last: 'last', }\n      pipeline.push $async { first: '[', last: ']', between: '|', }, ( d, send, done ) =>\n        defer ->\n          # debug '22922', jr d\n          send d\n          done()\n      #.........................................................................................................\n      pipeline.push PS.$collect()\n      pipeline.push $ ( d, send ) -> send ( x.toString() for x in d ).join ''\n      pipeline.push PS.$watch ( d ) -> R = d\n      pipeline.push PS.$drain drainer\n      PS.pull pipeline...\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n############################################################################################################\nunless module.parent?\n  # include = []\n  # @_prune()\n  # @_main()\n  test @[ \"$surround async\" ]\n\n"
  ]
}