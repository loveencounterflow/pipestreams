// Generated by CoffeeScript 2.3.1
(function() {
  //###########################################################################################################
  var $, $async, $drain, $send_three, $split, $stringify, $utf8, CND, FS, PATH, PS, S, STPS, after, async_map, badge, debug, echo, format_float, format_integer, help, include, info, jr, new_file_source, new_numeral, provide_async, pull, rpr, test, through, urge, warn, whisper,
    indexOf = [].indexOf;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS/TESTS/ASYNC-MAP';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  new_numeral = require('numeral');

  format_float = function(x) {
    return (new_numeral(x)).format('0,0.000');
  };

  format_integer = function(x) {
    return (new_numeral(x)).format('0,0');
  };

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  //...........................................................................................................
  $split = require('pull-split');

  $stringify = require('pull-stringify');

  $utf8 = require('pull-utf8-decoder');

  new_file_source = require('pull-file');

  pull = require('pull-stream');

  /* NOTE these two are different: */
  // $pass_through             = require 'pull-stream/throughs/through'
  through = require('pull-through');

  async_map = require('pull-stream/throughs/async-map');

  $drain = require('pull-stream/sinks/drain');

  STPS = require('stream-to-pull-stream');

  //...........................................................................................................
  S = {};

  S.pass_through_count = 0;

  // S.pass_through_count      = 1
  // S.pass_through_count      = 100
  // S.implementation          = 'pull-stream'
  S.implementation = 'pipestreams-map';

  // S.implementation          = 'pipestreams-remit'
  //...........................................................................................................
  test = require('guy-test');

  jr = JSON.stringify;

  //...........................................................................................................
  PS = require('../..');

  ({$, $async} = PS);

  //-----------------------------------------------------------------------------------------------------------
  after = function(dts, f) {
    return setTimeout(f, dts * 1000);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._main = function() {
    return test(this, {
      'timeout': 30000
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this["async 1"] = function(T, done) {
    var matcher, ok, pipeline, probe;
    ok = false;
    probe = "abcdef";
    matcher = "*a**b**c**d**e**f*";
    pipeline = [];
    pipeline.push(PS.new_value_source(Array.from(probe)));
    pipeline.push(PS._$async_map(function(d, handler) {
      after(Math.random() / 5, function() {
        return handler(null, '*' + d + '*');
      });
      return null;
    }));
    pipeline.push(PS.$show());
    pipeline.push(PS.$join());
    //.........................................................................................................
    pipeline.push(PS.$watch(function(result) {
      echo(CND.gold(jr([probe, result])));
      T.eq(result, matcher);
      return ok = true;
    }));
    //.........................................................................................................
    pipeline.push(PS.$drain(function() {
      if (!ok) {
        T.fail("failed to pass test");
      }
      return done();
    }));
    //.........................................................................................................
    PS.pull(...pipeline);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["async 1 paramap"] = function(T, done) {
    var matcher, ok, pipeline, probe;
    ok = false;
    probe = "abcdef";
    matcher = "*a**b**c**d**e**f*";
    pipeline = [];
    pipeline.push(PS.new_value_source(Array.from(probe)));
    pipeline.push(PS._$paramap(function(d, handler) {
      after(Math.random() / 5, function() {
        return handler(null, '*' + d + '*');
      });
      return null;
    }));
    pipeline.push(PS.$show());
    pipeline.push(PS.$join());
    //.........................................................................................................
    pipeline.push(PS.$watch(function(result) {
      echo(CND.gold(jr([probe, result])));
      T.eq(result, matcher);
      return ok = true;
    }));
    //.........................................................................................................
    pipeline.push(PS.$drain(function() {
      if (!ok) {
        T.fail("failed to pass test");
      }
      return done();
    }));
    //.........................................................................................................
    PS.pull(...pipeline);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT should be ( hint, method ) */
  provide_async = function() {
    var unpack_sym;
    unpack_sym = Symbol('unpack');
    //-----------------------------------------------------------------------------------------------------------
    this.$async = function(method) {
      var arity, pipeline, type;
      if ((type = CND.type_of(method)) !== 'function') {
        throw new Error(`µ18187 expected a function, got a ${type}`);
      }
      if ((arity = arguments.length) !== 1) {
        throw new Error(`µ18203 expected one argument, got ${arity}`);
      }
      if ((arity = method.length) !== 3) {
        throw new Error(`µ18219 method arity ${arity} not implemented`);
      }
      pipeline = [];
      //.........................................................................................................
      pipeline.push(this._$paramap((d, handler) => {
        var collector, done, send;
        collector = [];
        collector[unpack_sym] = true;
        //.......................................................................................................
        send = (d) => {
          if (d === null) {
            return handler(true);
          }
          collector.push(d);
          return null;
        };
        //.......................................................................................................
        done = () => {
          handler(null, collector);
          collector = null;
          return null;
        };
        //.......................................................................................................
        method(d, send, done);
        return null;
      }));
      //.........................................................................................................
      pipeline.push(this.$((d, send) => {
        var i, len, results, x;
        if ((CND.isa_list(d)) && d[unpack_sym]) {
          results = [];
          for (i = 0, len = d.length; i < len; i++) {
            x = d[i];
            results.push(send(x));
          }
          return results;
        } else {
          return send(d);
        }
      }));
      //.........................................................................................................
      return this.pull(...pipeline);
    };
    return this;
  };

  provide_async.apply(PS);

  //-----------------------------------------------------------------------------------------------------------
  $send_three = function() {
    return PS.$async(function(d, send, done) {
      var count, n;
      count = 0;
      n = 3;
      after(Math.random() / 5, function() {
        var i, nr, ref, results;
        debug('77634', d);
        results = [];
        for (nr = i = 1, ref = n; (1 <= ref ? i <= ref : i >= ref); nr = 1 <= ref ? ++i : --i) {
          count += +1;
          send(`(${d}:${nr})`);
          if (count >= n) {
            results.push(done());
          } else {
            results.push(void 0);
          }
        }
        return results;
      });
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this["async 2"] = function(T, done) {
    var matcher, ok, pipeline, probe;
    ok = false;
    probe = "abcdef";
    matcher = "(a:1)(a:2)(a:3)(b:1)(b:2)(b:3)(c:1)(c:2)(c:3)(d:1)(d:2)(d:3)(e:1)(e:2)(e:3)(f:1)(f:2)(f:3)";
    pipeline = [];
    pipeline.push(PS.new_value_source(Array.from(probe)));
    pipeline.push($send_three());
    pipeline.push(PS.$show());
    pipeline.push(PS.$join());
    //.........................................................................................................
    pipeline.push(PS.$watch(function(result) {
      echo(CND.gold(jr([probe, result])));
      T.eq(result, matcher);
      return ok = true;
    }));
    //.........................................................................................................
    pipeline.push(PS.$drain(function() {
      if (!ok) {
        T.fail("failed to pass test");
      }
      return done();
    }));
    //.........................................................................................................
    PS.pull(...pipeline);
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    // "async 1"
    // "async 1 paramap"
    include = ["async 2"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=async-map.js.map
