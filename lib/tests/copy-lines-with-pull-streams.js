// Generated by CoffeeScript 1.12.1
(function() {
  'use strict';

  /*
  Testing Parameters
  
  * number of no-op pass-through transforms
  * highWaterMark for input stream
  * whether input stream emits buffers or strings (if it emits strings, whether `$utf8` transform should be kept)
  * implementation model for transforms
  * implementation model for pass-throughs
  
  Easy to show that `$split` doesn't work correctly on buffers (set highWaterMark to, say, 3 and have
  input stream emit buffers).
   */
  var $, $async, $split, $stringify, $utf8, CND, FS, O, PATH, PS, STPS, TAP, async_map, badge, debug, echo, format_float, format_integer, help, info, new_file_source, new_numeral, pull, rpr, tail_call, through, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'BASIC-STREAM-BENCHMARKS-2/COPY-LINES-WITH-PULL-STREAM';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  new_numeral = require('numeral');

  format_float = function(x) {
    return (new_numeral(x)).format('0,0.000');
  };

  format_integer = function(x) {
    return (new_numeral(x)).format('0,0');
  };

  PATH = require('path');

  FS = require('fs');

  $split = require('pull-split');

  $stringify = require('pull-stringify');

  $utf8 = require('pull-utf8-decoder');

  new_file_source = require('pull-file');

  pull = require('pull-stream');


  /* NOTE these two are different: */

  through = require('pull-through');

  async_map = require('pull-stream/throughs/async-map');

  STPS = require('stream-to-pull-stream');

  O = {};

  O.pass_through_count = 0;

  O.implementation = 'pipestreams-map';

  TAP = require('tap');

  PS = require('../..');

  $ = PS.$, $async = PS.$async;

  tail_call = function() {
    'use strict';
    var f;
    f = function(count) {
      if (count == null) {
        count = 0;
      }
      if (count % 1e5 === 0) {
        whisper(format_integer(count));
      }
      if (count === 12345) {
        throw new Error('X');
      }
      if (count < 1e6) {
        return f(count + 1);
      }
    };
    return f();
  };

  tail_call();

}).call(this);

//# sourceMappingURL=copy-lines-with-pull-streams.js.map
