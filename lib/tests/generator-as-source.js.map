{
  "version": 3,
  "file": "generator-as-source.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/generator-as-source.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,iFAAA;;;EAMA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAf5B;;;EAiBA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAjB5B;;;EAmBA,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,CAAF,EAAK,MAAL,CAAA,GAA4B,EAA5B,EApBA;;;EAwBA,GAAG,CAAC,IAAJ,CAAS,qCAAT,EAAgD,QAAA,CAAE,CAAF,CAAA;AAE9C,QAAA,oBAAA;;IAAA,QAAA,GAAgB;IAChB,CAAA,GAAgB,CAAE,CAAF,CAAA,GAAA;aAAS,QAAQ,CAAC,IAAT,CAAc,CAAd;IAAT,EADhB;;;IAIA,OAAA,GAAU,QAAA,CAAE,CAAF,EAAK,IAAL,EAAW,KAAX,CAAA;AACR,UAAA;MAAA,GAAA,GAAM,GAAG,CAAC,OAAJ,CAAY,CAAZ,EAAe,IAAf,EAAqB,KAArB;AACN,aAAO,QAAA,CAAE,GAAF,EAAO,QAAP,CAAA;QACL,IAAyB,GAAzB;AAAA,iBAAO,QAAA,CAAS,GAAT,EAAP;;QACA,IAAyB,CAAA,GAAI,CAAE,CAAA,IAAK,CAAC,CAAR,CAA7B;AAAA,iBAAO,QAAA,CAAS,IAAT,EAAP;;eACA,QAAA,CAAS,IAAT,EAAe,GAAA,CAAA,CAAf;MAHK;IAFC,EAJV;;IAWA,CAAA,CAAE,OAAA,CAAQ,EAAR,EAAY,CAAZ,EAAe,CAAf,CAAF;IACA,CAAA,CAAE,EAAE,CAAC,KAAH,CAAA,CAAF;IACA,CAAA,CAAE,EAAE,CAAC,QAAH,CAAA,CAAF;IACA,CAAA,CAAE,CAAA,CAAE,MAAF,EAAU,QAAA,CAAE,IAAF,EAAQ,IAAR,CAAA;MACV,IAAG,YAAH;;eAEE,IAAA,CAAK,IAAL,EAFF;OAAA,MAAA;eAIE,CAAC,CAAC,GAAF,CAAA,EAJF;;IADU,CAAV,CAAF,EAdA;;IAqBA,CAAA,CAAE,EAAE,CAAC,MAAH,CAAA,CAAF,EArBA;;WAuBA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;EAzB8C,CAAhD;AAxBA",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'GENERATOR-AS-SOURCE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nTAP                       = require 'tap'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\n\n\n#-----------------------------------------------------------------------------------------------------------\nTAP.test \"generator as source: random numbers\", ( T ) ->\n  #.........................................................................................................\n  pipeline      = []\n  Ø             = ( x ) => pipeline.push x\n  # expect_count  = Math.max 0, probes.length - width + 1\n  #.........................................................................................................\n  $random = ( n, seed, delta ) ->\n    rnd = CND.get_rnd n, seed, delta\n    return ( end, callback ) ->\n      return callback end   if end\n      return callback true  if 0 > ( n += -1 )\n      callback null, rnd()\n  #.........................................................................................................\n  Ø $random 10, 1, 1\n  Ø PS.$show()\n  Ø PS.$collect()\n  Ø $ 'null', ( data, send ) ->\n    if data?\n      # T.ok section_count is expect_count\n      send data\n    else\n      T.end()\n      # send null\n  Ø PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline...\n\n"
  ]
}