// Generated by CoffeeScript 2.3.1
(function() {
  //###########################################################################################################
  var $, $async, CND, FS, OS, PATH, PS, alert, badge, debug, echo, help, info, jr, log, provide_$wye, rpr, test, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS/TESTS/WYE';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  test = require('guy-test');

  //...........................................................................................................
  PS = require('../..');

  ({$, $async} = PS);

  //...........................................................................................................
  ({jr} = CND);

  // https://pull-stream.github.io/#pull-through

  // https://github.com/pull-stream/pull-cont
  // https://github.com/pull-stream/pull-defer
  // https://github.com/scrapjs/pull-imux
  // https://github.com/dominictarr/pull-flow (https://github.com/pull-stream/pull-stream/issues/4)

  //-----------------------------------------------------------------------------------------------------------
  provide_$wye = function() {
    var mux;
    mux = require('pull-mux');
    //-----------------------------------------------------------------------------------------------------------
    this./* https://github.com/nichoth/pull-mux */$merge = function(...sources) {
      var $_demux, $_mux, pipeline;
      //.........................................................................................................
      $_mux = (...sources) => {
        var R, i, idx, len, source;
        R = {};
        for (idx = i = 0, len = sources.length; i < len; idx = ++i) {
          source = sources[idx];
          R[idx] = source;
        }
        return mux(R);
      };
      //.........................................................................................................
      $_demux = () => {
        return this.$map(function([k, v]) {
          return v;
        });
      };
      //.........................................................................................................
      pipeline = [];
      pipeline.push($_mux(...sources));
      pipeline.push($_demux());
      return this.pull(...pipeline);
    };
    //-----------------------------------------------------------------------------------------------------------
    return this.$wye = function(bysource) {
      var R, pipeline, x;
      pipeline = [];
      pipeline.push(this.$watch(function(d) {
        return urge('***', d);
      }));
      // pipeline.push @$tee ( d ) -> urge '***', d
      R = this.pull(...pipeline);
      x = [];
      x.push(this.$merge(R, bysource));
      x.push(this.$show());
      x.push(this.$drain());
      return R;
    };
  };

  provide_$wye.apply(PS);

  //-----------------------------------------------------------------------------------------------------------
  this["$merge 1"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [[[["a", "b", "c"], [1, 2, 3, 4, 5, 6]], ["a", 1, "b", 2, "c", 3, 4, 5, 6], null]];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var R, drainer, idx, j, max_idx, pipeline_1, pipeline_2, pipeline_3, ref, source_1, source_2, x;
          R = [];
          drainer = function() {
            return resolve(R);
          };
          source_1 = PS.new_push_source();
          source_2 = PS.new_push_source();
          //...................................................................................................
          pipeline_1 = [];
          pipeline_1.push(source_1);
          pipeline_1.push(PS.$watch(function(d) {
            return whisper('10191-1', d);
          }));
          //...................................................................................................
          pipeline_2 = [];
          pipeline_2.push(source_2);
          pipeline_2.push(PS.$watch(function(d) {
            return whisper('10191-2', d);
          }));
          //...................................................................................................
          pipeline_3 = [];
          pipeline_3.push(PS.$merge(PS.pull(...pipeline_1), PS.pull(...pipeline_2)));
          pipeline_3.push(PS.$watch(function(d) {
            return R.push(d);
          }));
          pipeline_3.push(PS.$watch(function(d) {
            return urge('10191-3', d);
          }));
          pipeline_3.push(PS.$drain(drainer));
          PS.pull(...pipeline_3);
          max_idx = (Math.max(probe[0].length, probe[1].length)) - 1;
          for (idx = j = 0, ref = max_idx; (0 <= ref ? j <= ref : j >= ref); idx = 0 <= ref ? ++j : --j) {
            if ((x = probe[0][idx]) != null) {
              source_1.push(x);
            }
            if ((x = probe[1][idx]) != null) {
              source_2.push(x);
            }
          }
          source_1.end();
          return source_2.end();
        });
      });
    }
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["$wye 1"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [[[["a", "b", "c"], [1, 2, 3, 4, 5, 6]], ["a", 1, "b", 2, "c", 3, 4, 5, 6], null]];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var R, bystream, drainer, idx, j, mainstream, max_idx, ref, source_1, source_2, x;
          R = [];
          drainer = function() {
            return resolve(R);
          };
          source_1 = PS.new_push_source();
          source_2 = PS.new_push_source();
          //...................................................................................................
          bystream = [];
          bystream.push(source_2);
          bystream.push(PS.$watch(function(d) {
            return whisper('10191-2', d);
          }));
          bystream = PS.pull(...bystream);
          //...................................................................................................
          mainstream = [];
          mainstream.push(source_1);
          mainstream.push(PS.$watch(function(d) {
            return whisper('10191-1', d);
          }));
          mainstream.push(PS.$wye(bystream));
          mainstream.push(PS.$watch(function(d) {
            return R.push(d);
          }));
          mainstream.push(PS.$watch(function(d) {
            return urge('10191-3', d);
          }));
          mainstream.push(PS.$drain(drainer));
          PS.pull(...mainstream);
          max_idx = (Math.max(probe[0].length, probe[1].length)) - 1;
          for (idx = j = 0, ref = max_idx; (0 <= ref ? j <= ref : j >= ref); idx = 0 <= ref ? ++j : --j) {
            if ((x = probe[0][idx]) != null) {
              source_1.push(x);
            }
            if ((x = probe[1][idx]) != null) {
              source_2.push(x);
            }
          }
          source_1.end();
          return source_2.end();
        });
      });
    }
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    // test @
    test(this["$wye 1"]);
  }

}).call(this);

//# sourceMappingURL=wyes.test.js.map
