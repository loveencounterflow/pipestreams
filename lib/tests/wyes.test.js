// Generated by CoffeeScript 2.3.1
(function() {
  //###########################################################################################################
  var $, $async, CND, FS, OS, PATH, PS, alert, badge, debug, echo, f, help, info, log, rpr, test, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS/TESTS/WYE';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  test = require('guy-test');

  //...........................................................................................................
  PS = require('../..');

  ({$, $async} = PS);

  //...........................................................................................................

  // https://pull-stream.github.io/#pull-through

  // https://github.com/pull-stream/pull-cont
  // https://github.com/pull-stream/pull-defer
  // https://github.com/scrapjs/pull-imux
  // https://github.com/dominictarr/pull-flow (https://github.com/pull-stream/pull-stream/issues/4)

  //-----------------------------------------------------------------------------------------------------------
  f = function() {
    //-----------------------------------------------------------------------------------------------------------
    return this.$wye = function(bysource) {
      /* NOTE: what is called (main-, by-) 'stream' here is called 'pipeline' elsewhere. The `mainstream`
      is really a stream transform, a.k.a. a through stream. */
      var R, bystream, bystream_buffer, bystream_end_sym, bystream_started, mainstream, mainstream_end_sym, mainstream_has_ended, mainstream_send;
      mainstream_end_sym = Symbol('mainstream_end');
      bystream_end_sym = Symbol('bystream_end');
      mainstream_has_ended = false;
      // bystream_has_ended    = false
      bystream_started = false;
      mainstream = [];
      bystream = [];
      mainstream_send = null;
      bystream_buffer = [];
      //.........................................................................................................
      bystream.push(bysource);
      bystream.push(this.$('null', function(d, send) {
        if (d == null) {
          d = bystream_end_sym;
        }
        if (mainstream_send != null) {
          while (bystream_buffer.length > 0) {
            mainstream_send(bystream_buffer.pop());
          }
          mainstream_send(d);
        } else {
          bystream_buffer.unshift(d);
        }
        return null;
      }));
      bystream.push(this.$drain());
      //.........................................................................................................
      /* TAINT this step is necessary because `PS.$async 'null', $f` is not implemented */
      mainstream.push(this.$('null', function(d, send) {
        /* When the first event—data or the end signal—comes down the mainstream, start the bystream: */
        if (!bystream_started) {
          PS.pull(...bystream);
          bystream_started = true;
        }
        //.......................................................................................................
        if (d != null) {
          return send(d);
        } else {
          mainstream_has_ended = true;
          return send(mainstream_end_sym);
        }
      }));
      //.........................................................................................................
      mainstream.push(this.$async(function(d, send, done) {
        mainstream_send = send;
        if (d === mainstream_end_sym) {
          send(null);
          return done();
        } else {
          send(d);
          return done();
        }
      }));
      //.........................................................................................................
      R = PS.pull(...mainstream);
      return R;
    };
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @$wye = ( bysource ) ->
  //   generator = ->
  //     loop
  //       yield d
  //     return null
  //   return @pull mainstream...
  f.apply(PS);

  //-----------------------------------------------------------------------------------------------------------
  this["$wye 1"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [[[['a', 'b', 'c'], [1, 2, 3]], ["a", "b", "c"], null]];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var R, chr, drainer, j, k, len1, len2, pipeline_1, ref, ref1, source_1, source_2;
          R = [];
          drainer = function() {
            return resolve(R);
          };
          source_1 = PS.new_push_source();
          source_2 = PS.new_push_source();
          pipeline_1 = [];
          pipeline_1.push(source_1);
          pipeline_1.push(PS.$watch(function(d) {
            return whisper('10191', d);
          }));
          pipeline_1.push(PS.$wye(source_2));
          pipeline_1.push(PS.$watch(function(d) {
            return R.push(d);
          }));
          pipeline_1.push(PS.$watch(function(d) {
            return urge('10191', d);
          }));
          pipeline_1.push(PS.$drain(drainer));
          PS.pull(...pipeline_1);
          ref = probe[0];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            chr = ref[j];
            source_1.push(chr);
          }
          ref1 = probe[1];
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            chr = ref1[k];
            source_2.push(chr);
          }
          return source_1.end();
        });
      });
    }
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this);
  }

}).call(this);

//# sourceMappingURL=wyes.test.js.map
