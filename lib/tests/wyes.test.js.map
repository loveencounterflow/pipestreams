{
  "version": 3,
  "file": "wyes.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/wyes.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/TESTS/WYE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\n#...........................................................................................................\n{ jr\n  is_empty }              = CND\ndefer                     = setImmediate\n\n# https://pull-stream.github.io/#pull-through\n\n# https://github.com/pull-stream/pull-cont\n# https://github.com/pull-stream/pull-defer\n# https://github.com/scrapjs/pull-imux\n# https://github.com/dominictarr/pull-flow (https://github.com/pull-stream/pull-stream/issues/4)\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$merge 1\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[[\"a\",\"b\",\"c\"],[1,2,3,4,5,6]],[\"a\",1,\"b\",2,\"c\",3,4,5,6],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve, reject ) ->\n      R                   = []\n      drainer             = -> resolve R\n      source_1            = PS.new_push_source()\n      source_2            = PS.new_push_source()\n      #...................................................................................................\n      pipeline_1          = []\n      pipeline_1.push source_1\n      pipeline_1.push PS.$watch ( d ) -> whisper '10191-2', d\n      #...................................................................................................\n      pipeline_2          = []\n      pipeline_2.push source_2\n      pipeline_2.push PS.$watch ( d ) -> whisper '10191-3', d\n      #...................................................................................................\n      pipeline_3          = []\n      pipeline_3.push PS.$merge ( PS.pull pipeline_1... ), ( PS.pull pipeline_2... )\n      pipeline_3.push PS.$watch ( d ) -> R.push d\n      pipeline_3.push PS.$watch ( d ) -> urge '10191-4', d\n      pipeline_3.push PS.$drain drainer\n      PS.pull pipeline_3...\n      max_idx = ( Math.max probe[ 0 ].length, probe[ 1 ].length ) - 1\n      for idx in [ 0 .. max_idx ]\n        source_1.send x if ( x = probe[ 0 ][ idx ] )?\n        source_2.send x if ( x = probe[ 1 ][ idx ] )?\n      source_1.end()\n      source_2.end()\n    done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_filtered_bysink = ( name, collector, filter ) ->\n  R = []\n  R.push PS.$filter filter\n  R.push PS.$watch ( d ) -> collector.push d\n  R.push PS.$watch ( d ) -> whisper '10191', name, jr d\n  R.push PS.$drain()\n  return PS.pull R...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$wye 1\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[[\"a\",\"b\",\"c\"],[1,2,3,4,5,6]],[[1,2,3,4,5,6],[\"a\",\"b\",\"c\"]],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve, reject ) ->\n      numbers             = []\n      texts               = []\n      R                   = [ numbers, texts, ]\n      drainer             = -> resolve R\n      source_1            = PS.new_push_source()\n      source_2            = PS.new_push_source()\n      #...................................................................................................\n      bysource            = []\n      bysource.push source_2\n      bysource.push PS.$watch ( d ) -> whisper '10191-5', 'bysource', jr d\n      # bysource.push PS.$defer()\n      bysource            = PS.pull bysource...\n      #...................................................................................................\n      mainstream          = []\n      mainstream.push source_1\n      # mainstream.push PS.$defer()\n      mainstream.push PS.$wye bysource\n      # mainstream.push PS.$watch ( d ) -> whisper '10191-6', 'confluence', jr d\n      mainstream.push PS.$tee new_filtered_bysink 'number', numbers,  ( d ) -> CND.isa_number d\n      mainstream.push PS.$tee new_filtered_bysink 'text',   texts,    ( d ) -> CND.isa_text d\n      mainstream.push PS.$tee new_filtered_bysink 'other',  null,     ( d ) -> ( not CND.isa_number d ) and ( not CND.isa_text d )\n      mainstream.push PS.$drain drainer\n      PS.pull mainstream...\n      #...................................................................................................\n      max_idx = ( Math.max probe[ 0 ].length, probe[ 1 ].length ) - 1\n      for idx in [ 0 .. max_idx ]\n        source_1.send x if ( x = probe[ 0 ][ idx ] )?\n        source_2.send x if ( x = probe[ 1 ][ idx ] )?\n      source_1.end()\n      source_2.end()\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$wye 2\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[true,true,[\"a\",\"b\",\"c\"],[1,2,3,4,5,6]],[\"a\",1,\"b\",2,\"c\",3,4,5,6],null]\n    [[false,true,[\"a\",\"b\",\"c\"],[1,2,3,4,5,6]],[\"a\",1,\"b\",2,\"c\",3,4,5,6],null]\n    [[false,false,[\"a\",\"b\",\"c\"],[1,2,3,4,5,6]],[\"a\",1,\"b\",2,\"c\",3,4,5,6],null]\n    [[true,false,[\"a\",\"b\",\"c\"],[1,2,3,4,5,6]],[\"a\",1,\"b\",2,\"c\",3,4,5,6],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    matcher = matcher.sort()\n    await T.perform probe, matcher, error, ->\n      return new Promise ( resolve, reject ) ->\n        [ defer_mainstream\n          defer_bystream\n          mainstream_values\n          bystream_values ] = probe\n        R                   = []\n        drainer             = -> R = R.sort(); resolve R\n        mainsource          = PS.new_push_source()\n        bysource            = PS.new_push_source()\n        #...................................................................................................\n        bystream            = []\n        bystream.push bysource\n        bystream.push PS.$watch ( d ) -> whisper '10191-5', 'bysource', jr d\n        bystream.push PS.$defer() if defer_bystream\n        bystream = PS.pull bystream...\n        #...................................................................................................\n        mainstream          = []\n        mainstream.push mainsource\n        mainstream.push PS.$defer() if defer_mainstream\n        mainstream.push PS.$watch ( d ) -> whisper '10191-6', 'mainstream', jr d\n        mainstream.push PS.$wye bystream\n        mainstream.push PS.$watch ( d ) -> R.push d\n        mainstream.push PS.$watch ( d ) -> urge CND.white '10191-7', 'confluence', jr d\n        mainstream.push PS.$drain drainer\n        PS.pull mainstream...\n        max_idx = ( Math.max mainstream_values.length, bystream_values.length ) - 1\n        for idx in [ 0 .. max_idx ]\n          mainsource.send x if ( x = mainstream_values[ idx ] )?\n          bysource.send   x if ( x = bystream_values[   idx ] )?\n        mainsource.end()\n        bysource.end()\n        return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@divert = ( T, done ) ->\n  probes_and_matchers = [\n    [[10,11,12,13,14,15,16,17,18,19,20],{\"odd_numbers\":[11,13,15,17,19],\"all_numbers\":[10,11,12,13,14,15,16,17,18,19,20]},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      is_odd      = ( d ) -> ( d % 2 ) isnt 0\n      odd_numbers = []\n      all_numbers = []\n      R           = { odd_numbers, all_numbers, }\n      #.....................................................................................................\n      byline      = []\n      mainline    = []\n      #.....................................................................................................\n      byline.push PS.$show title: 'bystream'\n      byline.push PS.$watch ( d ) -> odd_numbers.push d\n      byline.push PS.$drain()\n      bystream  = PS.pull byline...\n      #.....................................................................................................\n      mainline.push PS.new_value_source probe\n      mainline.push PS.$tee is_odd, bystream\n      mainline.push PS.$show title: 'mainstream'\n      mainline.push PS.$watch ( d ) -> all_numbers.push d\n      mainline.push PS.$drain ->\n        help 'ok'\n        resolve R\n      PS.pull mainline...\n      #.....................................................................................................\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@bifurcate = ( T, done ) ->\n  probes_and_matchers = [\n    [[10,11,12,13,14,15,16,17,18,19,20],{\"odd_numbers\":[11,13,15,17,19],\"even_numbers\":[10,12,14,16,18,20]},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      is_even       = ( d ) -> ( d % 2 ) is 0\n      odd_numbers   = []\n      even_numbers  = []\n      R             = { odd_numbers, even_numbers, }\n      #.....................................................................................................\n      byline        = []\n      mainline      = []\n      #.....................................................................................................\n      byline.push PS.$show title: 'bystream'\n      byline.push PS.$watch ( d ) -> even_numbers.push d\n      byline.push PS.$drain()\n      bystream  = PS.pull byline...\n      #.....................................................................................................\n      mainline.push PS.new_value_source probe\n      mainline.push PS.$bifurcate is_even, bystream\n      mainline.push PS.$show title: 'mainstream'\n      mainline.push PS.$watch ( d ) -> odd_numbers.push d\n      mainline.push PS.$drain ->\n        help 'ok'\n        resolve R\n      PS.pull mainline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"wye from asnyc random sources\" ] = ( T, done ) ->\n  ### A mainstream and a bystream are created from lists of values using\n  `PS.new_random_async_value_source()`. Values from both streams are marked up for their respective source.\n  After being funnelled together using `PS.$wye()`, the result is a POD whose keys are the source names\n  and whose values are lists of the values in the order they were seen. The expected result is that the\n  ordering of each stream is preserved, no values get lost, and that relative ordering of values in the\n  mainstream and the bystream is arbitrary. ###\n  probes_and_matchers = [\n    [[[3,4,5,6,7,8],[\"just\",\"a\",\"few\",\"words\"]],{\"bystream\":[3,4,5,6,7,8],\"mainstream\":[\"just\",\"a\",\"few\",\"words\"]},null]\n    [[[3,4],[9,10,11,true]],{\"bystream\":[3,4],\"mainstream\":[9,10,11,true]},null]\n    [[[3,4,{\"foo\":\"bar\"}],[false,9,10,11,true]],{\"bystream\":[3,4,{\"foo\":\"bar\"}],\"mainstream\":[false,9,10,11,true]},null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    R = null\n    #.......................................................................................................\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      byline    = []\n      byline.push PS.new_random_async_value_source 0.1, probe[ 0 ]\n      byline.push $ ( d, send ) -> send [ 'bystream', d, ]\n      # byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n      #.....................................................................................................\n      mainline = []\n      mainline.push PS.new_random_async_value_source probe[ 1 ]\n      mainline.push $ ( d, send ) -> send [ 'mainstream', d, ]\n      mainline.push PS.$wye PS.pull byline...\n      mainline.push PS.$collect()\n      mainline.push PS.$watch ( d ) ->\n        R       = { bystream: [], mainstream: [], }\n        R[ x[ 0 ] ].push x[ 1 ] for x in d\n      mainline.push PS.$drain ->\n        help 'ok'\n        resolve R\n      PS.pull mainline...\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  done()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$wye 3\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [{\"start_value\":0.5,\"delta\":0.01,\"min\":0.3233333333333333,\"max\":0.3433333333333333},[0.5,0.25,0.375,0.3125,0.34375,0.328125],null]\n    ]\n  end_sym = Symbol 'end'\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    probe.min = 1 / 3 - probe.delta\n    probe.max = 1 / 3 + probe.delta\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      R                   = []\n      drainer             = -> debug '10191-1', \"mainstream ended\"; resolve R\n      mainsource          = PS.new_push_source()\n      bysource            = PS.new_push_source()\n      #...................................................................................................\n      bystream            = []\n      bystream.push bysource\n      bystream.push $ { last: end_sym,}, ( d, send ) ->\n        if d is end_sym\n          debug '22092', \"bystream ended\"\n        else\n          send d\n        return null\n      bystream.push PS.$watch ( d ) -> whisper '10191-1', 'bysource', jr d\n      bystream = PS.pull bystream...\n      #...................................................................................................\n      mainstream          = []\n      mainstream.push mainsource\n      mainstream.push PS.$wye bystream\n      mainstream.push PS.$async ( d, send, done ) ->\n        send d\n        if probe.min <= d <= probe.max\n          defer ->\n            send null\n            bysource.send null\n            done()\n        else\n          defer ->\n            bysource.send ( 1 - d ) / 2\n            done()\n        return null\n      mainstream.push PS.$defer()\n      mainstream.push PS.$watch ( d ) -> urge CND.white '10191-4', 'confluence', jr d\n      mainstream.push PS.$watch ( d ) -> R.push d\n      mainstream.push PS.$drain drainer\n      PS.pull mainstream...\n      mainsource.send probe.start_value\n      return null\n  done()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"$merge 1\" ]\n  # test @[ \"$wye 1\" ]\n  # test @[ \"$wye 2\" ]\n  # test @[ \"$wye 3\" ]\n  # test @divert\n  # test @bifurcate\n  # test @[ \"wye from asnyc random sources\" ]\n\n"
  ]
}