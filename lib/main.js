// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var $pass_through, $pull_drain, $pull_split, $pull_utf8_decoder, $stringify, $take, $values, CND, CP, FS, L, PATH, after, alert, assign, badge, copy, debug, defer, echo, glob, help, info, is_empty, jr, log, new_pushable, pull, pull_cont, pull_many, pull_through, return_id, rpr, unpack_sym, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  CP = require('child_process');

  glob = require('globby');

  //...........................................................................................................
  new_pushable = require('pull-pushable');

  $pull_split = require('pull-split');

  // $pull_stringify           = require 'pull-stringify'
  $pull_utf8_decoder = require('pull-utf8-decoder');

  $pass_through = require('pull-stream/throughs/through');

  $pull_drain = require('pull-stream/sinks/drain');

  $take = require('pull-stream/throughs/take');

  $stringify = require('pull-stringify');

  $values = require('pull-stream/sources/values');

  pull = require('pull-stream');

  // map                       = pull.map.bind pull
  pull_through = require('pull-through');

  pull_many = require('pull-many');

  pull_cont = require('pull-cont');

  this._$async_map = require('pull-stream/throughs/async-map');

  this._$paramap = require('pull-paramap');

  unpack_sym = Symbol('unpack');

  // pull_infinite             = require 'pull-stream/sources/infinite'
  this._map_errors = require('./_map_errors');

  //...........................................................................................................
  after = function(dts, f) {
    return setTimeout(f, dts * 1000);
  };

  defer = setImmediate;

  return_id = function(x) {
    return x;
  };

  ({is_empty, copy, assign, jr} = CND);

  //===========================================================================================================
  // ISA METHODS
  //-----------------------------------------------------------------------------------------------------------
  /* thx to German Attanasio http://stackoverflow.com/a/28564000/256361 */
  this._isa_njs_stream = function(x) {
    return x instanceof (require('stream')).Stream;
  };

  this._isa_readable_njs_stream = function(x) {
    return (this._isa_njs_stream(x)) && x.readable;
  };

  this._isa_writable_njs_stream = function(x) {
    return (this._isa_njs_stream(x)) && x.writable;
  };

  this._isa_readonly_njs_stream = function(x) {
    return (this._isa_njs_stream(x)) && x.readable && !x.writable;
  };

  this._isa_writeonly_njs_stream = function(x) {
    return (this._isa_njs_stream(x)) && x.writable && !x.readable;
  };

  this._isa_duplex_njs_stream = function(x) {
    return (this._isa_njs_stream(x)) && x.readable && x.writable;
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT refactor: `PS.new_source.from_path`, `PS.new_source.from_text`..., `PS.new_sink.as_text` (???) */
  this.new_text_source = function(text) {
    return $values([text]);
  };

  this.new_text_sink = function() {
    throw new Error("µ8648 not implemented");
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_value_source = function(values) {
    return $values(values);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.map_start = function(method) {
    var arity, is_first, type;
    if ((type = CND.type_of(method)) !== 'function') {
      throw new Error(`µ9413 expected a function, got a ${type}`);
    }
    if ((arity = method.length) !== 0) {
      throw new Error(`µ10178 method arity ${arity} not implemented`);
    }
    is_first = true;
    return this._map_errors((data) => {
      if (is_first) {
        is_first = false;
        method();
      }
      return data;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.map_stop = function(method) {
    var arity, type;
    if ((type = CND.type_of(method)) !== 'function') {
      throw new Error(`µ10943 expected a function, got a ${type}`);
    }
    if ((arity = method.length) !== 0) {
      throw new Error(`µ11708 method arity ${arity} not implemented`);
    }
    return $pass_through(return_id, function(abort) {
      method();
      return abort;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.map_first = function(method) {
    var arity, is_first, type;
    if ((type = CND.type_of(method)) !== 'function') {
      throw new Error(`µ12473 expected a function, got a ${type}`);
    }
    if ((arity = method.length) !== 1) {
      throw new Error(`µ13238 method arity ${arity} not implemented`);
    }
    is_first = true;
    return this._map_errors((data) => {
      if (is_first) {
        is_first = false;
        method(data);
      }
      return data;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.map_last = function(method) {
    var arity, type;
    if ((type = CND.type_of(method)) !== 'function') {
      throw new Error(`µ14003 expected a function, got a ${type}`);
    }
    if ((arity = method.length) !== 1) {
      throw new Error(`µ14768 method arity ${arity} not implemented`);
    }
    throw new Error('meh');
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$filter = function(method) {
    var arity, type;
    if ((type = CND.type_of(method)) !== 'function') {
      throw new Error(`µ15533 expected a function, got a ${type}`);
    }
    switch (arity = method.length) {
      case 1:
        null;
        break;
      default:
        throw new Error(`µ16298 method arity ${arity} not implemented`);
    }
    //.........................................................................................................
    return pull.filter(method);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.map = function(method) {
    var arity, type;
    if ((type = CND.type_of(method)) !== 'function') {
      throw new Error(`µ17063 expected a function, got a ${type}`);
    }
    switch (arity = method.length) {
      case 1:
        null;
        break;
      default:
        throw new Error(`µ17828 method arity ${arity} not implemented`);
    }
    //.........................................................................................................
    return this._map_errors(method);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$ = this.remit = function(hint, method) {
    var arity, client_arity, on_data, on_end, self, send, type;
    switch (arity = arguments.length) {
      case 1:
        method = hint;
        hint = null;
        break;
      case 2:
        if (hint !== 'null') {
          throw new Error(`µ18593 unknown hint ${rpr(hint)}`);
        }
        break;
      default:
        throw new Error(`µ19358 expected 1 or 2 arguments, got ${arity}`);
    }
    //.........................................................................................................
    switch (client_arity = method.length) {
      case 2:
        null;
        break;
      default:
        throw new Error(`µ20123 method arity ${client_arity} not implemented`);
    }
    if ((type = CND.type_of(method)) !== 'function') {
      //.........................................................................................................
      throw new Error(`µ20888 expected a function, got a ${type}`);
    }
    //.........................................................................................................
    self = null;
    send = (data) => {
      return self.queue(data);
    };
    on_end = null;
    //.........................................................................................................
    on_data = function(data) {
      self = this;
      method(data, send);
      self = null;
      return null;
    };
    //.........................................................................................................
    if (hint === 'null') {
      on_end = function() {
        self = this;
        method(null, send);
        self = null;
        /* somewhat hidden in the docs: *must* call `@queue null` to end stream: */
        this.queue(null);
        return null;
      };
    }
    //.........................................................................................................
    return pull_through(on_data, on_end);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$async = function(method) {
    var arity, pipeline, type;
    if ((type = CND.type_of(method)) !== 'function') {
      /* TAINT signature should be ( hint, method ) */
      /* TAINT currently all results from client method are buffered until `done` gets called; see whether
      it is possible to use `await` so that each result can be sent doen the pipeline w/out buffering */
      throw new Error(`µ18187 expected a function, got a ${type}`);
    }
    if ((arity = arguments.length) !== 1) {
      throw new Error(`µ18203 expected one argument, got ${arity}`);
    }
    if ((arity = method.length) !== 3) {
      throw new Error(`µ18219 method arity ${arity} not implemented`);
    }
    pipeline = [];
    //.........................................................................................................
    pipeline.push(this._$paramap((d, handler) => {
      var collector, done, send;
      collector = [];
      collector[unpack_sym] = true;
      //.......................................................................................................
      send = (d) => {
        if (d === null) {
          return handler(true);
        }
        collector.push(d);
        return null;
      };
      //.......................................................................................................
      done = () => {
        handler(null, collector);
        collector = null;
        return null;
      };
      //.......................................................................................................
      method(d, send, done);
      return null;
    }));
    //.........................................................................................................
    pipeline.push(this.$((d, send) => {
      var i, len, results, x;
      if ((CND.isa_list(d)) && d[unpack_sym]) {
        results = [];
        for (i = 0, len = d.length; i < len; i++) {
          x = d[i];
          results.push(send(x));
        }
        return results;
      } else {
        return send(d);
      }
    }));
    //.........................................................................................................
    return this.pull(...pipeline);
  };

  //===========================================================================================================
  // ASYNC TRANSFORMS
  //-----------------------------------------------------------------------------------------------------------
  this.$defer = function() {
    return this.$async(function(d, send, done) {
      return defer(function() {
        send(d);
        return done();
      });
    });
  };

  this.$delay = function(dts) {
    return this.$async(function(d, send, done) {
      return after(dts, function() {
        send(d);
        return done();
      });
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$pass = function() {
    return this._map_errors((data) => {
      return data;
    });
  };

  //...........................................................................................................
  this.$as_line = function() {
    return this._map_errors((line) => {
      return line + '\n';
    });
  };

  this.$trim = function() {
    return this._map_errors((line) => {
      return line.trim();
    });
  };

  this.$split_fields = function() {
    return this._map_errors((line) => {
      return line.split(/\s*\t\s*/);
    });
  };

  this.$skip_empty = function() {
    return this.$filter((line) => {
      return line.length > 0;
    });
  };

  //...........................................................................................................
  this.$push_to_list = function(collector) {
    return this._map_errors((data) => {
      collector.push(data);
      return data;
    });
  };

  this.$add_to_set = function(collector) {
    return this._map_errors((data) => {
      collector.add(data);
      return data;
    });
  };

  //...........................................................................................................
  this.$count = function() {
    throw new Error("µ23183 not implemented");
  };

  this.$take = $take;

  //-----------------------------------------------------------------------------------------------------------
  this.$drain = function(on_end = null) {
    return $pull_drain(null, on_end);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$watch = function(method) {
    return this._map_errors((data) => {
      method(data);
      return data;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT not sure how to call this / how to unify with the rest of the API */
  this._$watch_null = function(method) {
    var on_each, on_stop;
    on_each = function(data) {
      method(data);
      return null;
    };
    on_stop = function(abort) {
      method(null);
      return null;
    };
    return $pass_through(on_each, on_stop);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$name_fields = function(names) {
    var type;
    if ((type = CND.type_of(names)) !== 'list') {
      throw new Error(`µ23948 expected a list, got a ${type}`);
    }
    return this._map_errors((fields) => {
      var R, i, idx, len, name, value;
      if ((type = CND.type_of(fields)) !== 'list') {
        throw new Error(`µ24713 expected a list, got a ${type}`);
      }
      R = {};
      for (idx = i = 0, len = fields.length; i < len; idx = ++i) {
        value = fields[idx];
        name = names[idx] != null ? names[idx] : names[idx] = `field_${idx}`;
        R[name] = value;
      }
      return R;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$trim_fields = function() {
    return this.$watch((fields) => {
      var field, i, idx, len;
      for (idx = i = 0, len = fields.length; i < len; idx = ++i) {
        field = fields[idx];
        fields[idx] = field.trim();
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$split_tsv = function() {
    var R;
    R = [];
    R.push(this.$split());
    R.push(this.$trim());
    R.push(this.$skip_empty());
    R.push(this.$filter(function(line) {
      return !line.startsWith('#');
    }));
    R.push(this.$split_fields());
    // R.push @$trim_fields()
    return this.pull(...R);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.pull = function(...methods) {
    var i, idx, len, method, type;
    if (methods.length === 0) {
      return this.$pass();
    }
    for (idx = i = 0, len = methods.length; i < len; idx = ++i) {
      method = methods[idx];
      if ((type = CND.type_of(method)) === 'function') {
        continue;
      }
      throw new Error(`µ25478 expected a function, got a ${type} for argument # ${idx + 1}`);
    }
    return pull(...methods);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$split = function(settings) {
    var R, mapper, matcher, reverse, skip_last;
    if (settings != null) {
      throw new Error("µ26243 MEH");
    }
    R = [];
    matcher = null;
    mapper = null;
    reverse = false;
    skip_last = true;
    R.push($pull_utf8_decoder());
    R.push($pull_split(matcher, mapper, reverse, skip_last));
    return pull(...R);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$join = function(joiner = null) {
    var collector, is_first, length, type;
    collector = [];
    length = 0;
    type = null;
    is_first = true;
    return this.$('null', function(data, send) {
      var this_type;
      if (data != null) {
        if (is_first) {
          is_first = false;
          type = CND.type_of(data);
          switch (type) {
            case 'text':
              if (joiner == null) {
                joiner = '';
              }
              break;
            case 'buffer':
              if (joiner != null) {
                throw new Error(`µ27008 joiner not supported for buffers, got ${rpr(joiner)}`);
              }
              break;
            default:
              throw new Error(`µ27773 expected a text or a buffer, got a ${type}`);
          }
        } else {
          if ((this_type = CND.type_of(data)) !== type) {
            throw new Error(`µ28538 expected a ${type}, got a ${this_type}`);
          }
        }
        length += data.length;
        collector.push(data);
      } else {
        if ((collector.length === 0) || (length === 0)) {
          return send('');
        }
        if (type === 'text') {
          return send(collector.join(''));
        }
        return send(Buffer.concat(collector, length));
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$gliding_window = function(width, method) {
    var push, section, send;
    if ((CND.type_of(width)) !== 'number') {
      throw new Error(`µ32363 expected a number, got a ${type}`);
    }
    section = [];
    send = null;
    //.........................................................................................................
    push = function(x) {
      var R;
      section.push(x);
      R = (function() {
        var results;
        results = [];
        while (section.length > width) {
          results.push(send(section.shift()));
        }
        return results;
      })();
      return null;
    };
    //.........................................................................................................
    return this.$('null', (new_data, send_) => {
      send = send_;
      if (new_data != null) {
        push(new_data);
        if (section.length >= width) {
          method(section);
        }
      } else {
        while (section.length > 0) {
          send(section.shift());
        }
        send(null);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$collect = function(settings) {
    var collector;
    if (settings != null) {
      throw new Error("µ33128 API changed");
    }
    collector = [];
    return this.$('null', (data, send) => {
      if (data != null) {
        collector.push(data);
      } else {
        send(collector);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$spread = function() {
    return this.$((collection, send) => {
      var element, i, len;
      for (i = 0, len = collection.length; i < len; i++) {
        element = collection[i];
        send(element);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$tee = function(stream) {
    /* **NB** that in contradistinction to `pull-tee`, you can only divert to a single by-stream with each
    call to `PS.$tee` */
    // R = if ( CND.isa_list stream_or_pipeline ) then ( pull stream_or_pipeline ) else stream_or_pipeline
    return (require('pull-tee'))(stream);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$show = function(settings) {
    var ref, ref1, serialize, title;
    title = (ref = settings != null ? settings['title'] : void 0) != null ? ref : '-->';
    serialize = (ref1 = settings != null ? settings['serialize'] : void 0) != null ? ref1 : JSON.stringify;
    return this.$watch((data) => {
      return info(title, serialize(data));
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$as_text = function(settings) {
    var ref, serialize;
    serialize = (ref = settings != null ? settings['serialize'] : void 0) != null ? ref : JSON.stringify;
    return this._map_errors((data) => {
      return serialize(data);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$stringify = function(settings) {
    return $stringify(settings);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$desaturate = function() {
    /* remove ANSI escape sequences */
    var pattern;
    pattern = /\x1b\[[0-9;]*[JKmsu]/g;
    return this.map((line) => {
      return line.replace(pattern, '');
    });
  };

  //===========================================================================================================
  // SAMPLING / THINNING OUT
  //-----------------------------------------------------------------------------------------------------------
  this.$sample = function(p = 0.5, options) {
    var headers, is_first, ref, ref1, rnd, seed;
    //.........................................................................................................
    if (!((0 <= p && p <= 1))) {
      throw new Error(`µ42308 expected a number between 0 and 1, got ${rpr(p)}`);
    }
    if (p === 1) {
      //.........................................................................................................
      /* Handle trivial edge cases faster (hopefully): */
      return this.map((record) => {
        return record;
      });
    }
    if (p === 0) {
      return this.$filter((record) => {
        return false;
      });
    }
    //.........................................................................................................
    headers = (ref = options != null ? options['headers'] : void 0) != null ? ref : false;
    seed = (ref1 = options != null ? options['seed'] : void 0) != null ? ref1 : null;
    is_first = headers;
    rnd = seed != null ? CND.get_rnd(seed) : Math.random;
    //.........................................................................................................
    return this.$((record, send) => {
      if (is_first) {
        is_first = false;
        return send(record);
      }
      if (rnd() < p) {
        return send(record);
      }
    });
  };

  //###########################################################################################################
  /* Gather methods from submodules, bind all methods */
  L = this;

  (function() {
    var i, key, len, module, path, paths, patterns, settings, value;
    patterns = ['*.js', '!main.js', '!_*'];
    settings = {
      cwd: PATH.join(__dirname),
      deep: false,
      absolute: true
    };
    paths = glob.sync(patterns, settings);
//.........................................................................................................
    for (i = 0, len = paths.length; i < len; i++) {
      path = paths[i];
      module = require(path);
      for (key in module) {
        value = module[key];
        if (key.startsWith('_')) {
          // debug '38833', "#{path}##{key}"
          continue;
        }
        if (L[key] != null) {
          throw new Error(`duplicate key ${rpr(key)}`);
        }
        L[key] = value;
      }
    }
//.........................................................................................................
    for (key in L) {
      value = L[key];
      if (!CND.isa_function(value)) {
        continue;
      }
      L[key] = value.bind(L);
    }
    return null;
  })();

}).call(this);

//# sourceMappingURL=main.js.map
