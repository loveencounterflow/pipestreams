// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, badge, debug, defer/* https://github.com/nichoth/pull-mux */, jr, mux, rpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS/WYE-TEE-MERGE';

  // log                       = CND.get_logger 'plain',     badge
  // info                      = CND.get_logger 'info',      badge
  // whisper                   = CND.get_logger 'whisper',   badge
  // alert                     = CND.get_logger 'alert',     badge
  debug = CND.get_logger('debug', badge);

  // warn                      = CND.get_logger 'warn',      badge
  // help                      = CND.get_logger 'help',      badge
  // urge                      = CND.get_logger 'urge',      badge
  // echo                      = CND.echo.bind CND
  ({jr} = CND);

  mux = require('pull-mux');

  defer = setImmediate;

  //-----------------------------------------------------------------------------------------------------------
  this.$tee = function(a, b) {
    var arity;
    switch ((arity = arguments.length)) {
      case 1:
        return this._$tee_without_filter(a);
      case 2:
        return this._$tee_with_filter(a, b);
    }
    throw new Error(`Âµ93002 expected 1 or 2 arguments, got ${arity}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._$tee_without_filter = function(bystream) {
    /* Given a `bystream`, send a data down both the mainstream and the bystream. This allows e.g. to log all
    events to a file sink while continuing to process the same data in the mainline. **NB** that in
    contradistinction to `pull-tee`, you can only divert to a single by-stream with each call to `PS.$tee` */
    return (require('pull-tee'))(bystream);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._$tee_with_filter = function(filter, bystream) {
    /* Given a `filter` function and a `bystream`, send only data `d` for which `filter d` returns true down
    the bystream. No data will be taken out of the mainstream. */
    return this._$tee_without_filter(this.pull(this.$filter(filter), bystream));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$bifurcate = function(filter, bystream) {
    /* Given a `filter` function and a `bystream`, send all data `d` either down the bystream if `filter d`
    returns true, or down the mainstream otherwise, causing a disjunct bifurcation of the data stream. */
    var byline, pipeline;
    byline = [];
    pipeline = [];
    byline.push(this.$(function(d, send) {
      if (d[0]) {
        return send(d[1]);
      }
    }));
    byline.push(bystream);
    pipeline.push(this.$(function(d, send) {
      return send([filter(d), d]);
    }));
    pipeline.push(this._$tee_without_filter(this.pull(...byline)));
    pipeline.push(this.$(function(d, send) {
      if (!d[0]) {
        return send(d[1]);
      }
    }));
    return this.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_merged_source = function(...sources) {
    var $_demux, $_mux, pipeline;
    //.........................................................................................................
    $_mux = (...sources) => {
      var R, i, idx, len, source;
      R = {};
      for (idx = i = 0, len = sources.length; i < len; idx = ++i) {
        source = sources[idx];
        R[idx] = source;
      }
      return mux(R);
    };
    //.........................................................................................................
    $_demux = () => {
      return this.$map(function([k, v]) {
        return v;
      });
    };
    //.........................................................................................................
    pipeline = [];
    pipeline.push($_mux(...sources));
    pipeline.push($_demux());
    return this.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$wye = function(bystream) {
    var byline, bystream_ended, confluence, end_sym, pair, pushable, subline, substream_ended;
    pair = (require('pull-pair'))();
    pushable = this.new_push_source();
    subline = [];
    byline = [];
    end_sym = Symbol('end');
    bystream_ended = false;
    substream_ended = false;
    //.........................................................................................................
    subline.push(pair.source);
    // subline.push @$ { last: end_sym, }, ( d, send ) ->
    //   send d
    subline.push(this.$defer());
    subline.push(this.$async({
      last: end_sym
    }, function(d, send, done) {
      debug(CND.yellow('11190-1', d));
      if (d === end_sym) {
        substream_ended = true;
        debug(CND.white('22209-1 pipestreams.$wye', d, {bystream_ended, substream_ended}));
        if (bystream_ended) {
          // debug '66373-1', "ending pushable"
          // pushable.end()
          // defer -> done()
          defer(function() {
            debug('66373-1', "ending pushable");
            pushable.end();
            return defer(function() {
              return done();
            });
          });
        }
      } else {
        pushable.send(d);
        done();
      }
      return null;
    }));
    subline.push(this.$defer());
    subline.push(this.$drain());
    //.........................................................................................................
    byline.push(bystream);
    byline.push(this.$show({
      title: '33839'
    }));
    byline.push(this.$defer());
    byline.push(this.$async({
      last: end_sym
    }, function(d, send, done) {
      debug(CND.yellow('11190-2', d));
      if (d === end_sym) {
        bystream_ended = true;
        debug(CND.white('22209-2 pipestreams.$wye', d, {bystream_ended, substream_ended}));
        if (substream_ended) {
          // debug '66373-2', "ending pushable"
          // pushable.end()
          // defer -> done()
          defer(function() {
            debug('66373-2', "ending pushable");
            pushable.end();
            return defer(function() {
              return done();
            });
          });
        }
      } else {
        send(d);
        done();
      }
      return null;
    }));
    //.........................................................................................................
    byline.push(this.$defer());
    this.pull(...subline);
    confluence = this.new_merged_source(pushable, this.pull(...byline));
    return {
      sink: pair.sink,
      source: confluence
    };
  };

}).call(this);

//# sourceMappingURL=wye-tee-merge.js.map
