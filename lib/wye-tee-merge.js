// Generated by CoffeeScript 2.3.1
(function() {
  var mux;

  mux = require('pull-mux');

  //-----------------------------------------------------------------------------------------------------------
  this./* https://github.com/nichoth/pull-mux */$tee = function(stream) {
    /* **NB** that in contradistinction to `pull-tee`, you can only divert to a single by-stream with each
    call to `PS.$tee` */
    // R = if ( CND.isa_list stream_or_pipeline ) then ( pull stream_or_pipeline ) else stream_or_pipeline
    return (require('pull-tee'))(stream);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$merge = function(...sources) {
    var $_demux, $_mux, pipeline;
    //.........................................................................................................
    $_mux = (...sources) => {
      var R, i, idx, len, source;
      R = {};
      for (idx = i = 0, len = sources.length; i < len; idx = ++i) {
        source = sources[idx];
        R[idx] = source;
      }
      return mux(R);
    };
    //.........................................................................................................
    $_demux = () => {
      return this.$map(function([k, v]) {
        return v;
      });
    };
    //.........................................................................................................
    pipeline = [];
    pipeline.push($_mux(...sources));
    pipeline.push($_demux());
    return this.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$wye = function(bysource) {
    var R, buffer, bystream, bystream_ended, bystream_started, done, flush, mainstream, mainstream_ended, send, stack;
    mainstream_ended = false;
    bystream_started = false;
    bystream_ended = false;
    send = null;
    done = null;
    buffer = [];
    stack = (x) => {
      return buffer.unshift(x);
    };
    flush = () => {
      var results;
      results = [];
      while (buffer.length > 0) {
        results.push(send(buffer.pop()));
      }
      return results;
    };
    //.........................................................................................................
    bystream = [];
    bystream.push(bysource);
    bystream.push(this.$('null', (d, _send) => {
      if (d != null) {
        /* When `done` is defined, mainstream has ended, but `done` has not been called, meaning we can
        send directly (but avoid calling `done` yet); otherwise, we buffer the data: */
        if (done != null) {
          send(d);
        } else {
          stack(d);
        }
      } else {
        bystream_ended = true;
        if (done != null) {
          flush();
          done();
        }
      }
      return null;
    }));
    bystream.push(this.$drain());
    //.........................................................................................................
    mainstream = [];
    mainstream.push(this.$async('null', (d, _send, _done) => {
      send = _send;
      done = _done;
      //.......................................................................................................
      if (!bystream_started) {
        bystream_started = true;
        this.pull(...bystream);
      }
      //.......................................................................................................
      if (d != null) {
        /* In case there's mainstream data, flush out any bystream data, send d, call `done` and
        un-define it: */
        flush();
        send(d);
        done();
        done = null;
      } else {
        /* In case mainstream data is `null`, mainstream has terminated. If bystream has been terminated
        as well, call `done` and un-define it: */
        flush();
        if (bystream_ended) {
          done();
          done = null;
        }
      }
      //.......................................................................................................
      return null;
    }));
    //.........................................................................................................
    R = this.pull(...mainstream);
    return R;
  };

}).call(this);

//# sourceMappingURL=wye-tee-merge.js.map
