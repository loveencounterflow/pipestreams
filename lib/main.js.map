{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# PATH                      = require 'path'\n# OS                        = require 'os'\nFS                        = require 'fs'\nCP                        = require 'child_process'\n#...........................................................................................................\n### files, conversion from/to NodeJS push streams: ###\n### later\nnew_file_source           = require 'pull-file'\nnew_file_sink             = require 'pull-write-file'\n###\nSTPS                      = require 'stream-to-pull-stream'\n#...........................................................................................................\n### stream creation: ###\nnew_pushable              = require 'pull-pushable'\n#...........................................................................................................\n### transforms: ###\n$pull_split               = require 'pull-split'\n# $pull_stringify           = require 'pull-stringify'\n$pull_utf8_decoder        = require 'pull-utf8-decoder'\n$pass_through             = require 'pull-stream/throughs/through'\n$pull_drain               = require 'pull-stream/sinks/drain'\n$take                     = require 'pull-stream/throughs/take'\n$stringify                = require 'pull-stringify'\n$values                   = require 'pull-stream/sources/values'\npull                      = require 'pull-stream'\n# map                       = pull.map.bind pull\npull_through              = require 'pull-through'\npull_async_map            = require 'pull-stream/throughs/async-map'\npull_many                 = require 'pull-many'\npull_cont                 = require 'pull-cont'\n# pull_infinite             = require 'pull-stream/sources/infinite'\nEvent_emitter             = require 'eventemitter3'\n#...........................................................................................................\nreturn_id                 = ( x ) -> x\n# { step, }                 = CND.suspend\n#-----------------------------------------------------------------------------------------------------------\npluck = ( x, key, fallback ) ->\n  R = x[ key ]\n  R = fallback if R is undefined\n  delete x[ key ]\n  return R\n\n\n#===========================================================================================================\n# EVENTS AND EMITTERS\n#-----------------------------------------------------------------------------------------------------------\n@_new_event_emitter = ->\n  R               = new Event_emitter()\n  _emit           = R.emit.bind R\n  #.........................................................................................................\n  R.emit = ( event_name, P... ) ->\n    _emit '*',  event_name, P... unless event_name is '*'\n    _emit       event_name, P...\n  # #.........................................................................................................\n  # R.on = ( name, P... ) ->\n  #   # ### experimental: accept only 'namespaced' event names a la 'foo/bar' and known names\n  #   # so as to prevent accidental usage of bogus event names like `end`, `close`, `finish` etc: ###\n  #   # unless ( '/' in name ) or ( name is 'stop' )\n  #   #   throw new Error \"unknown event name #{rpr name}\"\n  #   emitter.on name, P...\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_event_collector = ( for_event_name, method ) ->\n  switch arity = arguments.length\n    when 0 then null\n    when 2\n      unless ( type = CND.type_of for_event_name ) is 'text'\n        throw new Error \"expected a text, got a #{type}\"\n      unless ( type = CND.type_of method ) is 'function'\n        throw new Error \"expected a function, got a #{type}\"\n    else throw new Error \"expected 0 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  R               = @_new_event_emitter()\n  R._event_counts = {}\n  R._source_count = 0\n  R._emitters     = new WeakMap()\n  #.........................................................................................................\n  aggregator = ( event_name ) ->\n    event_count = R._event_counts[ event_name ] = ( R._event_counts[ event_name ] ? 0 ) + 1\n    R.emit event_name if event_count is R._source_count\n    return null\n  #.........................................................................................................\n  R.add = ( emitter ) ->\n    ### TAINT only works with PipeStreams event emitters; could overwrite `emit` method otherwise ###\n    unless ( type = CND.type_of emitter.on ) is 'function'\n      throw new Error \"expected an event emitter with an `on` method, got a #{type}\"\n    throw new Error \"got duplicate emitter\" if R._emitters.has emitter\n    R._emitters.set emitter, 1\n    R._source_count += +1\n    emitter.on '*', aggregator\n    return emitter\n  #.........................................................................................................\n  R.on for_event_name, method if method?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_mixin_event_emitter = ( method ) ->\n  emitter = @_new_event_emitter()\n  #.........................................................................................................\n  method.on = ( event_name, P... ) ->\n    emitter.on event_name, P...\n  #.........................................................................................................\n  method.emit = ( event_name, P... ) ->\n    emitter.emit event_name, P...\n  #.........................................................................................................\n  return method\n\n\n### This is the original `pull-stream/throughs/map` implementation with the `try`/`catch` clause removed so\nall errors are thrown. This, until we find out how to properly handle errors the pull-streams way. Note\nthat `_map_errors` behaves exactly like `pull-stream/throughs/filter` which tells me this shouldn't be\ntoo wrong. Also observe that while any library may require all errors to be given to a callback or\nsomesuch, no library can really enforce that because not all client code may be wrapped, so I think\nwe're stuck with throwing errors anyway. ###\n\n```\nvar prop = require('pull-stream/util/prop')\n\nthis._map_errors = function (mapper) {\n  if(!mapper) return return_id\n  mapper = prop(mapper)\n  return function (read) {\n    return function (abort, cb) {\n      read(abort, function (end, data) {\n        // try {\n        data = !end ? mapper(data) : null\n        // } catch (err) {\n        //   return read(err, function () {\n        //     return cb(err)\n        //   })\n        // }\n        cb(end, data)\n      })\n    }\n  }\n}\n```\n\n#===========================================================================================================\n# ISA METHODS\n#-----------------------------------------------------------------------------------------------------------\n### thx to German Attanasio http://stackoverflow.com/a/28564000/256361 ###\n@_isa_njs_stream            = ( x ) -> x instanceof ( require 'stream' ).Stream\n@_isa_readable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable\n@_isa_writable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.writable\n@_isa_readonly_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable and not x.writable\n@_isa_writeonly_njs_stream  = ( x ) -> ( @_isa_njs_stream x ) and x.writable and not x.readable\n@_isa_duplex_njs_stream     = ( x ) -> ( @_isa_njs_stream x ) and x.readable and     x.writable\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_nodejs_input_to_pull_source = ( P... ) -> STPS.source P...\n\n#-----------------------------------------------------------------------------------------------------------\n@new_file_source              = ( P... ) -> @_new_file_source_using_stps      P...\n@new_file_sink                = ( P... ) -> @_new_file_sink_using_stps        P...\n@_new_file_source_using_stps  = ( P... ) -> STPS.source FS.createReadStream   P...\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_file_sink_using_stps = ( path_or_stream ) ->\n  if CND.isa_text path_or_stream\n    path    = path_or_stream\n    stream  = FS.createWriteStream path_or_stream\n  else\n    path    = path_or_stream.path ? '<UNKNOWN PATH>'\n    unless @_isa_njs_stream path_or_stream\n      throw new Error \"expected a path or a stream, got a #{CND.type_of path_or_stream}\"\n    unless path_or_stream.writable\n      throw new Error \"expected a path or a stream, got a #{CND.type_of path_or_stream}\"\n    stream  = path_or_stream\n  ### TAINT intermediate solution ###\n  R       = STPS.sink stream, ( error ) => throw error if error?\n  emitter = @_new_event_emitter()\n  R.on    = ( name, P... ) -> emitter.on name, P...\n  #.........................................................................................................\n  stream.on 'finish', ->\n    if ( not emitter.listeners 'stop', true ) and ( not emitter.listeners '*', true )\n      warn \"stream to #{rpr path} finished without listener\"\n    emitter.emit 'stop'\n  #.........................................................................................................\n  return R\n\n\n### later (perhaps)\n#-----------------------------------------------------------------------------------------------------------\n@_new_file_source_using_pullfile  = ( P... ) -> new_file_source P...\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_file_sink_using_pwf = ( path, options = null ) ->\n  throw new Error \"not implemented\"\n  # TAINT errors with \"DeprecationWarning: Calling an asynchronous function without callback is deprecated.\" (???)\n  options ?= {}\n  return new_file_sink path, options, ( error ) ->\n    throw error if error?\n    return null\n###\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT refactor: `PS.new_source.from_path`, `PS.new_source.from_text`..., `PS.new_sink.as_text` (???) ###\n@new_text_source = ( text ) -> $values [ text, ]\n@new_text_sink = ->\n  throw new Error \"not implemented\"\n\n#-----------------------------------------------------------------------------------------------------------\n@new_value_source = ( values ) -> $values values\n\n#-----------------------------------------------------------------------------------------------------------\n@map_start = ( method ) ->\n  throw new Error \"expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"method arity #{arity} not implemented\" unless ( arity = method.length ) is 0\n  is_first = yes\n  return @_map_errors ( data ) =>\n    if is_first\n      is_first = no\n      method()\n    return data\n\n#-----------------------------------------------------------------------------------------------------------\n@map_stop = ( method ) ->\n  throw new Error \"expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"method arity #{arity} not implemented\" unless ( arity = method.length ) is 0\n  return $pass_through return_id, ( abort ) ->\n    method()\n    return abort\n\n#-----------------------------------------------------------------------------------------------------------\n@map_first = ( method ) ->\n  throw new Error \"expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"method arity #{arity} not implemented\" unless ( arity = method.length ) is 1\n  is_first = yes\n  return @_map_errors ( data ) =>\n    if is_first\n      is_first = no\n      method data\n    return data\n\n#-----------------------------------------------------------------------------------------------------------\n@map_last = ( method ) ->\n  throw new Error \"expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"method arity #{arity} not implemented\" unless ( arity = method.length ) is 1\n  throw new Error 'meh'\n\n#-----------------------------------------------------------------------------------------------------------\n@filter = ( method ) ->\n  throw new Error \"expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return pull.filter method\n\n#-----------------------------------------------------------------------------------------------------------\n@map = ( method ) ->\n  throw new Error \"expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return @_map_errors method\n\n#-----------------------------------------------------------------------------------------------------------\n@$ = @remit = ( hint, method ) ->\n  switch arity = arguments.length\n    when 1\n      method  = hint\n      hint    = null\n    when 2\n      throw new Error \"unknown hint #{rpr hint}\" unless hint is 'null'\n    else throw new Error \"expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  switch client_arity = method.length\n    when 2 then null\n    else throw new Error \"method arity #{client_arity} not implemented\"\n  #.........................................................................................................\n  throw new Error \"expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  #.........................................................................................................\n  self    = null\n  send    = ( data ) => self.queue data\n  on_end  = null\n  #.........................................................................................................\n  on_data = ( data ) ->\n    self = @\n    method data, send\n    self = null\n    return null\n  #.........................................................................................................\n  if hint is 'null'\n    on_end = ->\n      self = @\n      method null, send\n      self = null\n      ### somewhat hidden in the docs: *must* call `@queue null` to end stream: ###\n      @queue null\n      return null\n  #.........................................................................................................\n  return pull_through on_data, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@async_map = pull_async_map\n\n# #-----------------------------------------------------------------------------------------------------------\n# @$async = @remit_async = ( method ) ->\n#   throw new Error \"expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n#   throw new Error \"### MEH ###\" unless ( arity = method.length ) is 2\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$pass            = -> @_map_errors     ( data ) => data\n#...........................................................................................................\n@$as_line         = -> @_map_errors     ( line    ) => line + '\\n'\n@$trim            = -> @_map_errors     ( line    ) => line.trim()\n@$split_fields    = -> @_map_errors     ( line    ) => line.split /\\s*\\t\\s*/\n@$skip_empty      = -> @filter          ( line    ) => line.length > 0\n#...........................................................................................................\n@$push_to_list    = ( collector ) -> @_map_errors ( data ) => collector.push  data; return data\n@$add_to_set      = ( collector ) -> @_map_errors ( data ) => collector.add   data; return data\n#...........................................................................................................\n@$count           = -> throw new Error \"not implemented\"\n@$take            = $take\n\n#-----------------------------------------------------------------------------------------------------------\n@$drain = ( on_end = null ) ->\n  R = @_mixin_event_emitter $pull_drain null, -> R.emit 'stop'\n  R.on 'stop', on_end if on_end?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$watch = ( method ) ->\n  return @_map_errors ( data ) =>\n    method data\n    return data\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT not sure how to call this / how to unify with the rest of the API ###\n@_$watch_null = ( method ) ->\n  on_each = ( data ) ->\n    method data\n    return null\n  on_stop = ( abort ) ->\n    method null\n    return null\n  return $pass_through on_each, on_stop\n\n#-----------------------------------------------------------------------------------------------------------\n@$name_fields = ( names ) ->\n  throw new Error \"expected a list, got a #{type}\" unless ( type = CND.type_of names ) is 'list'\n  return @_map_errors ( fields ) =>\n    throw new Error \"expected a list, got a #{type}\" unless ( type = CND.type_of fields ) is 'list'\n    R = {}\n    for value, idx in fields\n      name      = names[ idx ] ?= \"field_#{idx}\"\n      R[ name ] = value\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$trim_fields = -> @$watch ( fields  ) =>\n  fields[ idx ] = field.trim() for field, idx in fields\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_tsv = ->\n  R = []\n  R.push @$split()\n  R.push @$trim()\n  R.push @$skip_empty()\n  R.push @filter ( line ) -> not line.startsWith '#'\n  R.push @$split_fields()\n  # R.push @$trim_fields()\n  return @pull R...\n\n#-----------------------------------------------------------------------------------------------------------\n@pull = ( methods... ) ->\n  for method, idx in methods\n    continue if ( type = CND.type_of method ) is 'function'\n    throw new Error \"expected a function, got a #{type} for argument # #{idx + 1}\"\n  return pull methods...\n\n#-----------------------------------------------------------------------------------------------------------\n@$split = ( settings ) ->\n  throw new Error \"MEH\" if settings?\n  R         = []\n  matcher   = null\n  mapper    = null\n  reverse   = no\n  skip_last = yes\n  R.push $pull_utf8_decoder()\n  R.push $pull_split matcher, mapper, reverse, skip_last\n  return pull R...\n\n#-----------------------------------------------------------------------------------------------------------\n@$join = ( joiner = null ) ->\n  collector = []\n  length    = 0\n  type      = null\n  is_first  = yes\n  return @$ 'null', ( data, send ) ->\n    if data?\n      if is_first\n        is_first  = no\n        type      = CND.type_of data\n        switch type\n          when 'text'\n            joiner ?= ''\n          when 'buffer'\n            throw new Error \"joiner not supported for buffers, got #{rpr joiner}\" if joiner?\n          else\n            throw new Error \"expected a text or a buffer, got a #{type}\"\n      else\n        unless ( this_type = CND.type_of data ) is type\n          throw new Error \"expected a #{type}, got a #{this_type}\"\n      length += data.length\n      collector.push data\n    else\n      return send '' if ( collector.length is 0 ) or ( length is 0 )\n      return send collector.join '' if type is 'text'\n      return send Buffer.concat collector, length\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$pluck = ( settings ) ->\n  throw new Error \"need settings 'keys', got #{rpr settings}\" unless settings?\n  { keys, } = settings\n  throw new Error \"need settings 'keys', got #{rpr settings}\" unless keys?\n  keys      = keys.split /,\\s*|\\s+/ if CND.isa_text keys\n  throw new Error \"need settings 'keys', got #{rpr settings}\" unless keys.length > 0\n  as        = settings[ 'as' ] ? 'object'\n  unless as in [ 'list', 'object', 'pod', ]\n    throw new Error \"expected 'list', 'object' or 'pod', got #{rpr as}\"\n  if as is 'list'\n    return @map ( data ) => ( data[ key ] for key in keys )\n  return @map ( data ) =>\n    Z         = {}\n    Z[ key ]  = data[ key ] for key in keys\n    return Z\n\n#-----------------------------------------------------------------------------------------------------------\n@$gliding_window = ( width, method ) ->\n  throw new Error \"expected a number, got a #{type}\" unless ( CND.type_of width ) is 'number'\n  section = []\n  send    = null\n  #.........................................................................................................\n  push = ( x ) ->\n    section.push x\n    R =\n    while section.length > width\n      send section.shift()\n    return null\n  #.........................................................................................................\n  return @$ 'null', ( new_data, send_ ) =>\n    send = send_\n    if new_data?\n      push new_data\n      method section if section.length >= width\n    else\n      while section.length > 0\n        send section.shift()\n      send null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  throw new Error \"API changed\" if settings?\n  collector = []\n  return @$ 'null', ( data, send ) =>\n    if data? then collector.push data\n    else send collector\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$spread = ->\n  return @$ ( collection, send ) =>\n    send element for element in collection\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$sort = ( settings ) ->\n  ### https://github.com/mziccard/node-timsort ###\n  TIMSORT   = require 'timsort'\n  direction = 'ascending'\n  sorter    = null\n  key       = null\n  switch arity = arguments.length\n    when 0 then null\n    when 1\n      direction = settings[ 'direction' ] ? 'ascending'\n      sorter    = settings[ 'sorter'    ] ? null\n      key       = settings[ 'key'       ] ? null\n    else throw new Error \"expected 0 or 1 arguments, got #{arity}\"\n  #.........................................................................................................\n  unless direction in [ 'ascending', 'descending', ]\n    throw new Error \"expected 'ascending' or 'descending' for direction, got #{rpr direction}\"\n  #.........................................................................................................\n  unless sorter?\n    #.......................................................................................................\n    type_of = ( x ) =>\n      ### NOTE for the purposes of magnitude comparison, `Infinity` can be treated as a number: ###\n      R = CND.type_of x\n      return if R is 'infinity' then 'number' else R\n    #.......................................................................................................\n    validate_type = ( type_a, type_b, include_list = no ) =>\n      unless type_a is type_b\n        throw new Error \"unable to compare a #{type_a} with a #{type_b}\"\n      if include_list\n        unless type_a in [ 'number', 'date', 'text', 'list', ]\n          throw new Error \"unable to compare values of type #{type_a}\"\n      else\n        unless type_a in [ 'number', 'date', 'text', ]\n          throw new Error \"unable to compare values of type #{type_a}\"\n      return null\n    #.......................................................................................................\n    if key?\n      sorter = ( a, b ) =>\n        a = a[ key ]\n        b = b[ key ]\n        validate_type ( type_of a ), ( type_of b ), no\n        return +1 if ( if direction is 'ascending' then a > b else a < b )\n        return -1 if ( if direction is 'ascending' then a < b else a > b )\n        return  0\n    #.......................................................................................................\n    else\n      sorter = ( a, b ) =>\n        validate_type ( type_a = type_of a ), ( type_b = type_of b ), yes\n        if type_a is 'list'\n          a = a[ 0 ]\n          b = b[ 0 ]\n          validate_type ( type_of a ), ( type_of b ), no\n        return +1 if ( if direction is 'ascending' then a > b else a < b )\n        return -1 if ( if direction is 'ascending' then a < b else a > b )\n        return  0\n  #.........................................................................................................\n  $sort = =>\n    collector = []\n    return @$ 'null', ( data, send ) =>\n      if data?\n        collector.push data\n      else\n        TIMSORT.sort collector, sorter\n        send x for x in collector\n        collector.length = 0\n      return null\n  #.........................................................................................................\n  return $sort()\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee = ( stream ) ->\n  ### **NB** that in contradistinction to `pull-tee`, you can only divert to a single by-stream with each\n  call to `PS.$tee` ###\n  # R = if ( CND.isa_list stream_or_pipeline ) then ( pull stream_or_pipeline ) else stream_or_pipeline\n  return ( require 'pull-tee' ) stream\n\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( settings ) ->\n  title     = settings?[ 'title'      ] ? '-->'\n  serialize = settings?[ 'serialize'  ] ? JSON.stringify\n  return @$watch ( data ) => info title, serialize data\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_text = ( settings ) ->\n  serialize = settings?[ 'serialize' ] ? JSON.stringify\n  return @_map_errors ( data ) => serialize data\n\n#-----------------------------------------------------------------------------------------------------------\n@$stringify = ( settings ) -> $stringify settings\n\n#-----------------------------------------------------------------------------------------------------------\n@$desaturate = ->\n  ### remove ANSI escape sequences ###\n  pattern = /\\x1b\\[[0-9;]*[JKmsu]/g\n  return @map ( line ) =>\n    return line.replace pattern, ''\n\n\n#===========================================================================================================\n# SPAWN\n#-----------------------------------------------------------------------------------------------------------\n@spawn_collect = ( P..., handler ) ->\n  #.........................................................................................................\n  $on_data = =>\n    command   = null\n    stderr    = []\n    stdout    = []\n    return @$watch ( event ) =>\n      [ key, value, ] = event\n      switch key\n        when 'command'  then  command = value\n        when 'stdout'   then  stdout.push value\n        when 'stderr'   then  stderr.push value\n        when 'exit'     then  return handler null, Object.assign { command, stdout, stderr, }, value\n        else throw new Error \"internal error 2201991\"\n      return null\n  #.........................................................................................................\n  source    = @spawn P...\n  pipeline  = []\n  #.........................................................................................................\n  pipeline.push source\n  pipeline.push $on_data()\n  pipeline.push @$drain()\n  #.........................................................................................................\n  pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@spawn = ( P... ) -> ( @_spawn P... )[ 1 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_spawn = ( command, settings ) ->\n  #.........................................................................................................\n  switch arity = arguments.length\n    when 1, 2 then null\n    else throw new Error \"expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  # throw new Error \"deprecated setting: error_to_exit\" if ( pluck settings, 'error_to_exit',  null )?\n  # stderr_target     = pluck settings, 'stderr', 'stderr'\n  settings          = Object.assign { shell: yes, }, settings\n  stdout_is_binary  = pluck settings, 'binary',         no\n  comments          = pluck settings, 'comments',       {}\n  on_data           = pluck settings, 'on_data',        null\n  error_to_exit     = pluck settings, 'error_to_exit',  no\n  command_source    = @new_value_source [ [ 'command', command, ] ]\n  #.........................................................................................................\n  switch command_type = CND.type_of command\n    when 'text'\n      cp = CP.spawn command, settings\n    when 'list'\n      unless command.length > 0\n        throw new Error \"expected a list with at least one value, got #{rpr command}\"\n      cp = CP.spawn command[ 0 ], command[ 1 .. ], settings\n    else throw new Error \"expected a text or a list for command, got #{command_type}\"\n  #.........................................................................................................\n  stdout            = STPS.source cp.stdout\n  stderr            = STPS.source cp.stderr\n  #.........................................................................................................\n  stdout_pipeline   = []\n  stderr_pipeline   = []\n  funnel            = []\n  event_pipeline    = []\n  event_buffer      = []\n  #.........................................................................................................\n  stdout_pipeline.push stdout\n  stdout_pipeline.push @$split() unless stdout_is_binary\n  # stdout_pipeline.push @async_map ( data, handler ) -> defer -> handler null, data\n  stdout_pipeline.push @map ( line ) -> [ 'stdout', line, ]\n  #.........................................................................................................\n  stderr_pipeline.push stderr\n  stderr_pipeline.push @$split()\n  # stderr_pipeline.push @$show title: '**44321**'\n  # stderr_pipeline.push @async_map ( data, handler ) -> defer -> handler null, data\n  stderr_pipeline.push @map ( line ) -> [ 'stderr', line, ]\n  #.........................................................................................................\n  ### Event handling: collect all events from child process ###\n  cp.on 'disconnect',                   => event_buffer.push [ 'disconnect',  null,          ]\n  ### TAINT exit and error events should use same method to do post-processing ###\n  cp.on 'error',      ( error )         => event_buffer.push [ 'error',       error ? null,  ]\n  cp.on 'exit',       ( code, signal )  =>\n    code      = ( 128 + ( @_spawn._signals_and_codes[ signal ] ? 0 ) ) if signal? and not code?\n    comment   = comments[ code ] ? @_spawn._codes_and_comments[ code ] ? signal\n    comment  ?= if code is 0 then 'ok' else comments[ 'error' ] ? 'error'\n    event_buffer.push [ 'exit',   { code, signal, comment, },  ]\n  #.......................................................................................................\n  ### The 'close' event should always come last, so we use that to trigger asynchronous sending of\n  all events collected in the signal buffer. See https://github.com/dominictarr/pull-cont ###\n  event_pipeline.push pull_cont ( handler ) =>\n    cp.on 'close', =>\n      handler null, @new_value_source event_buffer\n      return null\n  #.........................................................................................................\n  ### Since reading from a spawned process is inherently asynchronous, we cannot be sure all of the output\n  from stdout and stderr has been sent down the pipeline before events from the child process arrive.\n  Therefore, we have to buffer those events and send them on only when the confluence stream has indicated\n  exhaustion: ###\n  $ensure_event_order = =>\n    cp_buffer     = []\n    std_buffer    = []\n    command_sent  = no\n    return @$ 'null', ( event, send ) =>\n      if event?\n        [ category, ] = event\n        ### Events from stdout and stderr are buffered until the command event has been sent; after that,\n        they are sent immediately: ###\n        if category in [ 'stdout', 'stderr', ]\n          debug '10921>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>', command_sent, std_buffer\n          # send [ 'stderr', '!!!!!!!!!!!!!!!', ]\n          if command_sent\n            return if on_data? then on_data event else send event\n          return std_buffer.push event\n        ### The command event is sent right away; any buffered stdout, stderr events are flushed: ###\n        if category is 'command'\n          command_sent = yes\n          send event\n          while std_buffer.length > 0\n            if on_data? then on_data std_buffer.shift() else send std_buffer.shift()\n          return\n        ### Keep everything else (i.e. events from child process) for later: ###\n        cp_buffer.push event\n      else\n        ### Send all buffered CP events: ###\n        send cp_buffer.shift() while cp_buffer.length > 0\n        # if on_data? then on_data std_buffer.shift() else send std_buffer.shift()\n      return null\n  #.........................................................................................................\n  confluence = pull_many [\n    ( pull command_source     )\n    ( pull stdout_pipeline... )\n    ( pull stderr_pipeline... )\n    ( pull event_pipeline...  )\n    ]\n  #.........................................................................................................\n  funnel.push confluence\n  funnel.push $ensure_event_order()\n  # funnel.push @$show title: '**21129**'\n  #.........................................................................................................\n  if error_to_exit\n    funnel.push do =>\n      error = []\n      return @$ ( event, send ) =>\n        if event?\n          [ key, value, ] = event\n          switch key\n            when 'command', 'stdout'  then send event\n            when 'stderr'             then error.push value.trimRight()\n            when 'exit'\n              value.error = error.join '\\n'\n              value.error = null if value.error.length is 0\n              send event\n            else throw new Error \"internal error 110918\"\n  #.........................................................................................................\n  source = pull funnel...\n  return [ cp, source, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_spawn._signals_and_codes = {\n  SIGHUP: 1, SIGINT: 2, SIGQUIT: 3, SIGILL: 4, SIGTRAP: 5, SIGABRT: 6, SIGIOT: 6, SIGBUS: 7, SIGFPE: 8,\n  SIGKILL: 9, SIGUSR1: 10, SIGSEGV: 11, SIGUSR2: 12, SIGPIPE: 13, SIGALRM: 14, SIGTERM: 15, SIGSTKFLT: 16,\n  SIGCHLD: 17, SIGCONT: 18, SIGSTOP: 19, SIGTSTP: 20, SIGTTIN: 21, SIGTTOU: 22, SIGURG: 23, SIGXCPU: 24,\n  SIGXFSZ: 25, SIGVTALRM: 26, SIGPROF: 27, SIGWINCH: 28, SIGIO: 29, SIGPOLL: 29, SIGPWR: 30, SIGSYS: 31, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_spawn._codes_and_comments =\n  # 1:      'an error has occurred'\n  126:    'permission denied'\n  127:    'command not found'\n\n\n#===========================================================================================================\n# SAMPLING / THINNING OUT\n#-----------------------------------------------------------------------------------------------------------\n@$sample = ( p = 0.5, options ) ->\n  #.........................................................................................................\n  unless 0 <= p <= 1\n    throw new Error \"expected a number between 0 and 1, got #{rpr p}\"\n  #.........................................................................................................\n  ### Handle trivial edge cases faster (hopefully): ###\n  return ( @map     ( record ) => record  ) if p == 1\n  return ( @filter  ( record ) => false   ) if p == 0\n  #.........................................................................................................\n  headers   = options?[ 'headers'     ] ? false\n  seed      = options?[ 'seed'        ] ? null\n  is_first  = headers\n  rnd       = if seed? then CND.get_rnd seed else Math.random\n  #.........................................................................................................\n  return @$ ( record, send ) =>\n    if is_first\n      is_first = false\n      return send record\n    send record if rnd() < p\n\n\n\n\n\n"
  ]
}