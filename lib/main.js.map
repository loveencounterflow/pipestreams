{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nCP                        = require 'child_process'\nglob                      = require 'globby'\n#...........................................................................................................\n$pass_through             = require 'pull-stream/throughs/through'\n$pull_drain               = require 'pull-stream/sinks/drain'\n$values                   = require 'pull-stream/sources/values'\n$paramap                  = require 'pull-paramap'\npull                      = require 'pull-stream'\npull_through              = require '../deps/pull-through-with-end-symbol'\npull_cont                 = require 'pull-cont'\nmap                       = require './_map_errors'\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\nreturn_id                 = ( x ) -> x\n{ is_empty\n  copy\n  assign\n  jr }                    = CND\n#...........................................................................................................\n@_symbols                 = require './_symbols'\n\n\n#===========================================================================================================\n# ISA METHODS\n#-----------------------------------------------------------------------------------------------------------\n### thx to German Attanasio http://stackoverflow.com/a/28564000/256361 ###\n@_isa_njs_stream            = ( x ) -> x instanceof ( require 'stream' ).Stream\n@_isa_readable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable\n@_isa_writable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.writable\n@_isa_readonly_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable and not x.writable\n@_isa_writeonly_njs_stream  = ( x ) -> ( @_isa_njs_stream x ) and x.writable and not x.readable\n@_isa_duplex_njs_stream     = ( x ) -> ( @_isa_njs_stream x ) and x.readable and     x.writable\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@new_value_source = ( values ) -> $values values\n\n#-----------------------------------------------------------------------------------------------------------\n@new_push_source = ( P... ) ->\n  ### Return a `pull-streams` `pushable`. Methods `push` and `end` will be bound to the instance\n  so they can be freely passed around. ###\n  new_pushable  = require 'pull-pushable'\n  source        = new_pushable P...\n  R             = ( P... ) -> source P...\n  PS            = @\n  #.........................................................................................................\n  send = ( d ) ->\n    return end() if d is PS._symbols.end\n    source.push d\n    return null\n  #.........................................................................................................\n  end = ( P... ) ->\n    source.end P...\n    return null\n  #.........................................................................................................\n  R.send  = send.bind R\n  R.end   = end.bind R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_alternating_source = ( source_a, source_b ) ->\n  ### Given two sources `a` and `b`, return a new source that will emit events\n  from both streams in an interleaved fashion, such that the first data item\n  from `a` is followed from the first item from `b`, followed by the second from\n  `a`, the second from `b` and so on. Once one of the streams has ended, omit\n  the remaining items from the other one, if any, until that stream ends, too.\n  See also https://github.com/tounano/pull-robin. ###\n  merge     = require 'pull-merge'\n  toggle    = +1\n  return merge source_a, source_b, ( -> toggle = -toggle )\n\n#-----------------------------------------------------------------------------------------------------------\n@new_on_demand_source = ( stream ) ->\n  ### Given a stream, return a source `s` with a method `s.next()` such that the next data item from `s`\n  will only be sent as soon as that method is called. ###\n  triggersource   = @new_push_source()\n  pipeline        = []\n  next_sym        = Symbol 'pipestreams:next'\n  pipeline.push @new_alternating_source triggersource, stream\n  pipeline.push @$filter ( d ) -> d isnt next_sym\n  R               = @pull pipeline...\n  R.next          = -> triggersource.send next_sym\n  R.next()\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_random_async_value_source = ( dts, values ) ->\n  ### Given an optional delta time in seconds `dts` (which defaults to 0.1 seconds) and a list of values,\n  return a source that will asynchronously produce values at irregular intervals that randomly oscillate\n  around `dts`. ###\n  switch arity = arguments.length\n    when 1 then [ dts, values, ] = [ 0.1, dts, ]\n    when 2 then null\n    else throw new Error \"µ77749 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  R           = @new_push_source()\n  new_timeout = -> ( Math.random() + 0.001 ) * dts\n  #.........................................................................................................\n  idx         = 0\n  last_idx    = values.length - 1\n  #.........................................................................................................\n  unless ( CND.isa_number last_idx )\n    throw new Error \"µ89231 expected a list-like object, got a #{CND.type_of values}\"\n  #.........................................................................................................\n  tick = =>\n    if idx <= last_idx\n      R.send values[ idx ]\n      idx += +1\n      after new_timeout(), tick\n    else\n      # R.send @_symbols.end\n      R.end()\n    return null\n  #.........................................................................................................\n  after new_timeout(), tick\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_generator_source = ( generator ) ->\n  return ( end, handler ) ->\n    return handler end if end\n    R = generator.next()\n    defer ->\n      return handler true if R.done\n      handler null, R.value\n\n#-----------------------------------------------------------------------------------------------------------\n@new_refillable_source = ( values, settings ) ->\n  ### A refillable source expects a list of `values` (or a listlike object with\n  a `shift()` method); when a read occurs, it will empty `values` one element at\n  a time, always shifting the leftmost element (with index zero) from `values`.\n  Transforms down the line may choose to `values.push()` new values into the\n  list, which will in time be sent down again. When a read occurs and `values`\n  happens to be empty, a special value (the `trailer`, by default\n  `PS._symbols.discard`) will be sent down the line (only to be filtered out\n  immediately) up to `repeat` times (by default one time) in a row to avoid\n  depleting the pipeline. ###\n  settings      = assign { repeat: 1, trailer: @_symbols.discard, show: false, }, settings\n  trailer_count = 0\n  #.........................................................................................................\n  filter        = @$filter ( d ) => d isnt @_symbols.discard\n  #.........................................................................................................\n  read          = ( abort, handler ) =>\n    return handler abort if abort\n    if values.length is 0\n      trailer_count  += +1\n      info '23983', \"refillable source depleted: #{trailer_count} / #{settings.repeat}\" if settings.show\n      if trailer_count < settings.repeat\n        value           = settings.trailer\n      else\n        return handler true\n    else\n      trailer_count = 0\n      value         = values.shift()\n    ### Must defer callback so the the pipeline gets a chance to refill: ###\n    defer -> handler null, value\n    return null\n  #.........................................................................................................\n  R = @pull read, filter\n  # R.end = ->\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter = ( method ) ->\n  throw new Error \"µ15533 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ16298 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return pull.filter method\n\n#-----------------------------------------------------------------------------------------------------------\n@$map = ( method ) ->\n  throw new Error \"µ17063 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ17828 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return map method\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_remit_settings = ( hint, method ) ->\n  defaults  =\n    first:    @_symbols.misfit\n    last:     @_symbols.misfit\n    between:  @_symbols.misfit\n    after:    @_symbols.misfit\n    before:   @_symbols.misfit\n  settings  = assign {}, defaults\n  switch arity = arguments.length\n    when 1\n      method    = hint\n      hint      = null\n    when 2\n      if CND.isa_text hint\n        throw new Error \"µ30902 Deprecated: use `{last:null}` instead of `'null'`\"\n      else\n        settings = assign settings, hint\n    else throw new Error \"µ19358 expected 1 or 2 arguments, got #{arity}\"\n  settings._surround = \\\n    ( settings.first    isnt @_symbols.misfit ) or \\\n    ( settings.last     isnt @_symbols.misfit ) or \\\n    ( settings.between  isnt @_symbols.misfit ) or \\\n    ( settings.after    isnt @_symbols.misfit ) or \\\n    ( settings.before   isnt @_symbols.misfit )\n  return { settings, method, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$ = @remit = ( P... ) ->\n  ### NOTE we're transitioning from the experimental `hint` call convention to the more flexible and\n  standard `settings` (which are here placed first, not last, b/c one frequently wants to write out a\n  function body as last argument). For a limited time, `'null'` is accepted in place of a `settings` object;\n  after that, `{ last: null }` should be used. ###\n  #.........................................................................................................\n  { settings, method, } = @_get_remit_settings P...\n  switch client_arity = method.length\n    when 2 then null\n    else throw new Error \"µ20123 method arity #{client_arity} not implemented\"\n  #.........................................................................................................\n  throw new Error \"µ20888 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  #.........................................................................................................\n  self          = null\n  data_first    = settings.first\n  data_before   = settings.before\n  data_between  = settings.between\n  data_after    = settings.after\n  data_last     = settings.last\n  send_first    = data_first    isnt @_symbols.misfit\n  send_before   = data_before   isnt @_symbols.misfit\n  send_between  = data_between  isnt @_symbols.misfit\n  send_after    = data_after    isnt @_symbols.misfit\n  send_last     = data_last     isnt @_symbols.misfit\n  on_end        = null\n  is_first      = true\n  PS            = @\n  #.........................................................................................................\n  send = ( d ) ->\n    throw new Error \"µ93892 called `send` method too late\" unless self?\n    self.queue d\n  #.........................................................................................................\n  send.end = ->\n    throw new Error \"µ09833 `send.end()` takes no arguments, got #{rpr [arguments...]}\" unless arguments.length is 0\n    self.queue PS._symbols.end\n  #.........................................................................................................\n  on_data = ( d ) ->\n    self = @\n    if is_first\n      is_first = false\n      method data_first, send if send_first\n    else\n      method data_between, send if send_between\n    method data_before, send  if send_before\n    method d,           send\n    method data_after,  send  if send_after\n    self = null\n    return null\n  #.........................................................................................................\n  on_end = ->\n    if send_last\n      self = @\n      method data_last, send\n      self = null\n    # defer -> @queue PS._symbols.end\n    @queue PS._symbols.end\n    return null\n  #.........................................................................................................\n  return pull_through on_data, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@$async = ( P... ) ->\n  ### TAINT currently all results from client method are buffered until `done` gets called; see whether\n  it is possible to use `await` so that each result can be sent doen the pipeline w/out buffering ###\n  #.........................................................................................................\n  ### NOTE we're transitioning from the experimental `hint` call convention to the more flexible and\n  standard `settings` (which are here placed first, not last, b/c one frequently wants to write out a\n  function body as last argument). For a limited time, `'null'` is accepted in place of a `settings` object;\n  after that, `{ last: null }` (or using other value except `PS._symbols.misfit`) should be used. ###\n  #.........................................................................................................\n  { settings, method, } = @_get_remit_settings P...\n  throw new Error \"µ18187 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ18203 expected one or two arguments, got #{arity}\" unless 1 <= ( arity = arguments.length ) <= 2\n  throw new Error \"µ18219 method arity #{arity} not implemented\" unless ( arity = method.length ) is 3\n  #.........................................................................................................\n  pipeline    = []\n  call_count  = 0\n  has_ended   = false\n  #.........................................................................................................\n  pipeline.push @$surround settings if settings._surround\n  pipeline.push @$surround { last: @_symbols.last, }\n  #.........................................................................................................\n  pipeline.push $paramap ( d, handler ) =>\n    collector   = []\n    #.......................................................................................................\n    send = ( d ) =>\n      return handler true if d is @_symbols.end\n      collector.unshift d\n      return null\n    #.......................................................................................................\n    done = =>\n      call_count += -1\n      handler null, collector\n      handler true if has_ended and call_count < 1\n      return null\n    #.......................................................................................................\n    if d is @_symbols.last\n      has_ended = true\n      handler true if call_count < 1\n    else\n      call_count += +1\n      defer -> method d, send, done\n    return null\n  #.........................................................................................................\n  pipeline.push @$defer()\n  pipeline.push @$ ( d, send ) => send d.pop() while d.length > 0\n  #.........................................................................................................\n  return @pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n### Given a `settings` object, add values to the stream as `$ settings, ( d, send ) -> send d` would do,\ne.g. `$surround { first: 'first!', between: 'to appear in-between two values', }`. ###\n@$surround = ( settings ) -> @$ settings, ( d, send ) => send d\n\n\n#===========================================================================================================\n# ASYNC TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$defer =         -> $paramap ( d, handler ) -> defer       -> handler null, d\n@$delay = ( dts ) -> $paramap ( d, handler ) -> after dts,  -> handler null, d\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$pass        =                   -> map ( data ) => data\n@$drain       = ( on_end = null ) -> $pull_drain null, on_end\n@$end_if      = ( filter )        -> @$ ( d, send ) -> if (     filter d ) then send.end() else send d\n@$continue_if = ( filter )        -> @$ ( d, send ) -> if ( not filter d ) then send.end() else send d\n\n#-----------------------------------------------------------------------------------------------------------\n@new_pausable = -> ( require 'pull-pause' )()\n\n#-----------------------------------------------------------------------------------------------------------\n@$watch = ( settings, method ) ->\n  #.........................................................................................................\n  switch arity = arguments.length\n    #.......................................................................................................\n    when 1\n      [ settings, method, ] = [ null, settings, ]\n      #.....................................................................................................\n      return @$ ( d, send ) =>\n        method d\n        send d\n        return null\n    #.......................................................................................................\n    when 2\n      return @$watch method unless settings?\n      settings        = assign {}, settings\n      settings[ key ] = [ @_symbols.surround, value, ] for key, value of settings\n      #.....................................................................................................\n      return @$ settings, ( d, send ) =>\n        if ( CND.isa_list d ) and ( d[ 0 ] is @_symbols.surround )\n          method d[ 1 ]\n        else\n          method d\n          send d\n        return null\n  #.........................................................................................................\n  throw new Error \"µ18244 expected one or two arguments, got #{arity}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@pull = ( methods... ) ->\n  return @$pass() if methods.length is 0\n  for method, idx in methods\n    continue if ( type = CND.type_of method ) is 'function'\n    continue if CND.isa_pod method ### allowing for `{ x.source, x.sink, }` duplex streams ###\n    throw new Error \"µ25478 expected a function, got a #{type} for argument # #{idx + 1}\"\n  return pull methods...\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  collector = settings?.collector ? []\n  return @$ { last: @_symbols.last, }, ( d, send ) =>\n    if d is @_symbols.last then send collector\n    else collector.push d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$spread = ->\n  return @$ ( collection, send ) =>\n    send element for element in collection\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( settings ) ->\n  title     = settings?[ 'title'      ] ? '-->'\n  serialize = settings?[ 'serialize'  ] ? JSON.stringify\n  return @$watch ( data ) => info title, serialize data\n\n\n#===========================================================================================================\n# SAMPLING / THINNING OUT\n#-----------------------------------------------------------------------------------------------------------\n@$sample = ( p = 0.5, options ) ->\n  #.........................................................................................................\n  unless 0 <= p <= 1\n    throw new Error \"µ42308 expected a number between 0 and 1, got #{rpr p}\"\n  #.........................................................................................................\n  ### Handle trivial edge cases faster (hopefully): ###\n  return ( @$map    ( record ) => record  ) if p == 1\n  return ( @$filter ( record ) => false   ) if p == 0\n  #.........................................................................................................\n  headers   = options?[ 'headers'     ] ? false\n  seed      = options?[ 'seed'        ] ? null\n  is_first  = headers\n  rnd       = if seed? then CND.get_rnd seed else Math.random\n  #.........................................................................................................\n  return @$ ( record, send ) =>\n    if is_first\n      is_first = false\n      return send record\n    send record if rnd() < p\n\n\n#===========================================================================================================\n# NEW LIBRARY\n#-----------------------------------------------------------------------------------------------------------\n@_copy_library = ->\n  ### `_copy_library()` may be used to derive a new instance of the PiepStreams library to alter\n  configurations. ###\n  CND.deep_copy @\n\n\n############################################################################################################\n### Gather methods from submodules, bind all methods ###\nL = @\ndo ->\n  patterns  = [ '*.js', '!main.js', '!_*' ]\n  settings  = { cwd: ( PATH.join __dirname ), deep: false, absolute: true, }\n  paths     = glob.sync patterns, settings\n  #.........................................................................................................\n  for path in paths\n    module = require path\n    for key, value of module\n      # continue if key.startsWith '_'\n      throw new Error \"duplicate key #{rpr key}\" if L[ key ]?\n      L[ key ] = value\n  #.........................................................................................................\n  for key, value of L\n    continue unless CND.isa_function value\n    L[ key ] = value.bind L\n  #.........................................................................................................\n  return null\n\n"
  ]
}