{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nCP                        = require 'child_process'\nglob                      = require 'globby'\n#...........................................................................................................\n$pass_through             = require 'pull-stream/throughs/through'\n$pull_drain               = require 'pull-stream/sinks/drain'\n$values                   = require 'pull-stream/sources/values'\n$paramap                  = require 'pull-paramap'\npull                      = require 'pull-stream'\npull_through              = require 'pull-through'\npull_cont                 = require 'pull-cont'\n_map_errors               = require './_map_errors'\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\nreturn_id                 = ( x ) -> x\n{ is_empty\n  copy\n  assign\n  jr }                    = CND\n#...........................................................................................................\nsymbols =\n  misfit:       Symbol 'misfit'\n  last:         Symbol 'last'\n\n\n#===========================================================================================================\n# ISA METHODS\n#-----------------------------------------------------------------------------------------------------------\n### thx to German Attanasio http://stackoverflow.com/a/28564000/256361 ###\n@_isa_njs_stream            = ( x ) -> x instanceof ( require 'stream' ).Stream\n@_isa_readable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable\n@_isa_writable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.writable\n@_isa_readonly_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable and not x.writable\n@_isa_writeonly_njs_stream  = ( x ) -> ( @_isa_njs_stream x ) and x.writable and not x.readable\n@_isa_duplex_njs_stream     = ( x ) -> ( @_isa_njs_stream x ) and x.readable and     x.writable\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@new_value_source = ( values ) -> $values values\n\n#-----------------------------------------------------------------------------------------------------------\n@new_push_source = ->\n  ### Return a `pull-streams` `pushable`. Methods `push` and `end` will be bound to the instance\n  so they can be freely passed around. ###\n  source  = ( require 'pull-pushable' )()\n  R       = ( P... ) -> source P...\n    # buffer:     source.buffer\n  R.push  = ( ( d ) -> warn \"µ38722 Deprecation Warning: use `.send()` instead of `.push()`\"; R.send d ).bind R\n  R.send  = ( ( d ) -> if d? then source.push d else source.end() ).bind R\n  R.end   = ( ( P... ) -> source.end  P...                        ).bind R\n    # read:       ( P... ) ->  P...\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_random_async_value_source = ( dts, values ) ->\n  ### Given an optional delta time in seconds `dts` (which defaults to 0.1 seconds) and a list of values,\n  return a source that will asynchronously produce values at irregular intervals that randomly oscillate\n  around `dts`. ###\n  switch arity = arguments.length\n    when 1 then [ dts, values, ] = [ 0.1, dts, ]\n    when 2 then null\n    else throw new Error \"µ77749 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  R           = @new_push_source()\n  new_timeout = -> ( Math.random() + 0.001 ) * dts\n  #.........................................................................................................\n  idx         = 0\n  last_idx    = values.length - 1\n  #.........................................................................................................\n  unless ( CND.isa_number last_idx )\n    throw new Error \"µ89231 expected a list-like object, got a #{CND.type_of values}\"\n  #.........................................................................................................\n  tick = ->\n    if idx <= last_idx\n      R.send values[ idx ]\n      idx += +1\n      after new_timeout(), tick\n    else\n      R.send null\n    return null\n  #.........................................................................................................\n  after new_timeout(), tick\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_generator_source = ( generator ) ->\n  return ( end, handler ) ->\n    return handler end if end\n    R = generator.next()\n    return handler true if R.done\n    handler null, R.value\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter = ( method ) ->\n  throw new Error \"µ15533 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ16298 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return pull.filter method\n\n#-----------------------------------------------------------------------------------------------------------\n@$map = ( method ) ->\n  throw new Error \"µ17063 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ17828 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return _map_errors method\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_remit_settings = ( hint, method ) ->\n  defaults  =\n    first:    symbols.misfit\n    last:     symbols.misfit\n    between:  symbols.misfit\n    after:    symbols.misfit\n    before:   symbols.misfit\n  settings  = assign {}, defaults\n  switch arity = arguments.length\n    when 1\n      method    = hint\n      hint      = null\n    when 2\n      if CND.isa_text hint\n        throw new Error \"µ18593 unknown hint #{rpr hint}\" unless hint is 'null'\n        warn \"µ30902 Deprecation Warning: use `{last:null}` instead of `'null'`\"\n        process.exit 1\n        settings.last = null\n      else\n        settings = assign settings, hint\n    else throw new Error \"µ19358 expected 1 or 2 arguments, got #{arity}\"\n  settings._surround = \\\n    ( settings.first    isnt symbols.misfit ) or \\\n    ( settings.last     isnt symbols.misfit ) or \\\n    ( settings.between  isnt symbols.misfit ) or \\\n    ( settings.after    isnt symbols.misfit ) or \\\n    ( settings.before   isnt symbols.misfit )\n  return { settings, method, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$ = @remit = ( P... ) ->\n  ### NOTE we're transitioning from the experimental `hint` call convention to the more flexible and\n  standard `settings` (which are here placed first, not last, b/c one frequently wants to write out a\n  function body as last argument). For a limited time, `'null'` is accepted in place of a `settings` object;\n  after that, `{ last: null }` should be used. ###\n  #.........................................................................................................\n  { settings, method, } = @_get_remit_settings P...\n  switch client_arity = method.length\n    when 2 then null\n    else throw new Error \"µ20123 method arity #{client_arity} not implemented\"\n  #.........................................................................................................\n  throw new Error \"µ20888 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  #.........................................................................................................\n  self          = null\n  send          = ( data ) => self.queue data\n  data_first    = settings.first\n  data_before   = settings.before\n  data_between  = settings.between\n  data_after    = settings.after\n  data_last     = settings.last\n  send_first    = data_first    isnt symbols.misfit\n  send_before   = data_before   isnt symbols.misfit\n  send_between  = data_between  isnt symbols.misfit\n  send_after    = data_after    isnt symbols.misfit\n  send_last     = data_last     isnt symbols.misfit\n  on_end        = null\n  is_first      = true\n  PS            = @\n  #.........................................................................................................\n  on_data = ( data ) ->\n    self = @\n    if is_first\n      is_first = false\n      method data_first, send if send_first\n    else\n      method data_between, send if send_between\n    method data_before, send  if send_before\n    method data,        send\n    method data_after,  send  if send_after\n    self = null\n    return null\n  #.........................................................................................................\n  if send_last\n    on_end = ->\n      self = @\n      method data_last, send\n      self = null\n      ### somewhat hidden in the docs: *must* call `@queue null` to end stream: ###\n      @queue null\n      return null\n  #.........................................................................................................\n  return pull_through on_data, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@$async = ( P... ) ->\n  ### TAINT currently all results from client method are buffered until `done` gets called; see whether\n  it is possible to use `await` so that each result can be sent doen the pipeline w/out buffering ###\n  #.........................................................................................................\n  ### NOTE we're transitioning from the experimental `hint` call convention to the more flexible and\n  standard `settings` (which are here placed first, not last, b/c one frequently wants to write out a\n  function body as last argument). For a limited time, `'null'` is accepted in place of a `settings` object;\n  after that, `{ last: null }` (or using other value except `PS.symbols.misfit`) should be used. ###\n  #.........................................................................................................\n  { settings, method, } = @_get_remit_settings P...\n  throw new Error \"µ18187 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ18203 expected one or two arguments, got #{arity}\" unless 1 <= ( arity = arguments.length ) <= 2\n  throw new Error \"µ18219 method arity #{arity} not implemented\" unless ( arity = method.length ) is 3\n  #.........................................................................................................\n  pipeline    = []\n  call_count  = 0\n  has_ended   = false\n  #.........................................................................................................\n  pipeline.push @$surround settings if settings._surround\n  pipeline.push @$surround { last: symbols.last, }\n  #.........................................................................................................\n  pipeline.push $paramap ( d, handler ) =>\n    collector   = []\n    #.......................................................................................................\n    send = ( d ) =>\n      return handler true if d is null\n      collector.unshift d\n      return null\n    #.......................................................................................................\n    done = =>\n      call_count += -1\n      handler null, collector\n      handler true if has_ended and call_count < 1\n      return null\n    #.......................................................................................................\n    if d is symbols.last\n      has_ended = true\n      handler true if call_count < 1\n    else\n      call_count += +1\n      defer -> method d, send, done\n    return null\n  #.........................................................................................................\n  pipeline.push @$defer()\n  pipeline.push @$ ( d, send ) => send d.pop() while d.length > 0\n  #.........................................................................................................\n  return @pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n### Given a `settings` object, add values to the stream as `$ settings, ( d, send ) -> send d` would do,\ne.g. `$surround { first: 'first!', between: 'to appear in-between two values', }`. ###\n@$surround = ( settings ) -> @$ settings, ( d, send ) => send d\n\n\n#===========================================================================================================\n# ASYNC TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$defer =         -> $paramap ( d, handler ) -> defer       -> handler null, d\n@$delay = ( dts ) -> $paramap ( d, handler ) -> after dts,  -> handler null, d\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$pass = -> _map_errors ( data ) => data\n@$drain = ( on_end = null ) -> $pull_drain null, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@$watch = ( method ) ->\n  return _map_errors ( data ) =>\n    method data\n    return data\n\n#-----------------------------------------------------------------------------------------------------------\n@pull = ( methods... ) ->\n  return @$pass() if methods.length is 0\n  for method, idx in methods\n    continue if ( type = CND.type_of method ) is 'function'\n    continue if CND.isa_pod method ### allowing for `{ x.source, x.sink, }` duplex streams ###\n    throw new Error \"µ25478 expected a function, got a #{type} for argument # #{idx + 1}\"\n  return pull methods...\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  throw new Error \"µ33128 API changed\" if settings?\n  collector = []\n  return @$ { last: null, }, ( data, send ) =>\n    if data? then collector.push data\n    else send collector\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$spread = ->\n  return @$ ( collection, send ) =>\n    send element for element in collection\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( settings ) ->\n  title     = settings?[ 'title'      ] ? '-->'\n  serialize = settings?[ 'serialize'  ] ? JSON.stringify\n  return @$watch ( data ) => info title, serialize data\n\n\n#===========================================================================================================\n# SAMPLING / THINNING OUT\n#-----------------------------------------------------------------------------------------------------------\n@$sample = ( p = 0.5, options ) ->\n  #.........................................................................................................\n  unless 0 <= p <= 1\n    throw new Error \"µ42308 expected a number between 0 and 1, got #{rpr p}\"\n  #.........................................................................................................\n  ### Handle trivial edge cases faster (hopefully): ###\n  return ( @$map    ( record ) => record  ) if p == 1\n  return ( @$filter ( record ) => false   ) if p == 0\n  #.........................................................................................................\n  headers   = options?[ 'headers'     ] ? false\n  seed      = options?[ 'seed'        ] ? null\n  is_first  = headers\n  rnd       = if seed? then CND.get_rnd seed else Math.random\n  #.........................................................................................................\n  return @$ ( record, send ) =>\n    if is_first\n      is_first = false\n      return send record\n    send record if rnd() < p\n\n############################################################################################################\n### Gather methods from submodules, bind all methods ###\nL = @\ndo ->\n  patterns  = [ '*.js', '!main.js', '!_*' ]\n  settings  = { cwd: ( PATH.join __dirname ), deep: false, absolute: true, }\n  paths     = glob.sync patterns, settings\n  #.........................................................................................................\n  for path in paths\n    module = require path\n    for key, value of module\n      # continue if key.startsWith '_'\n      throw new Error \"duplicate key #{rpr key}\" if L[ key ]?\n      L[ key ] = value\n  #.........................................................................................................\n  for key, value of L\n    continue unless CND.isa_function value\n    L[ key ] = value.bind L\n  #.........................................................................................................\n  return null\n\n"
  ]
}