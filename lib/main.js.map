{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# #...........................................................................................................\n# PATH                      = require 'path'\n# OS                        = require 'os'\nFS                        = require 'fs'\nCP                        = require 'child_process'\n#...........................................................................................................\n### files, conversion from/to NodeJS push streams: ###\n### later\nnew_file_source           = require 'pull-file'\nnew_file_sink             = require 'pull-write-file'\n###\nSTPS                      = require 'stream-to-pull-stream'\n#...........................................................................................................\n### stream creation: ###\nnew_pushable              = require 'pull-pushable'\n#...........................................................................................................\n### transforms: ###\n$pull_split               = require 'pull-split'\n# $pull_stringify           = require 'pull-stringify'\n$pull_utf8_decoder        = require 'pull-utf8-decoder'\n$pass_through             = require 'pull-stream/throughs/through'\n$pull_drain               = require 'pull-stream/sinks/drain'\n$take                     = require 'pull-stream/throughs/take'\n$stringify                = require 'pull-stringify'\n$values                   = require 'pull-stream/sources/values'\npull                      = require 'pull-stream'\n# map                       = pull.map.bind pull\npull_through              = require 'pull-through'\npull_many                 = require 'pull-many'\npull_cont                 = require 'pull-cont'\n@_$async_map              = require 'pull-stream/throughs/async-map'\n@_$paramap                = require 'pull-paramap'\nunpack_sym                = Symbol 'unpack'\n# pull_infinite             = require 'pull-stream/sources/infinite'\nEvent_emitter             = require 'eventemitter3'\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\ndefer                     = setImmediate\nreturn_id                 = ( x ) -> x\n#-----------------------------------------------------------------------------------------------------------\npluck = ( x, key, fallback ) ->\n  R = x[ key ]\n  R = fallback if R is undefined\n  delete x[ key ]\n  return R\n\n\n#===========================================================================================================\n# EVENTS AND EMITTERS\n#-----------------------------------------------------------------------------------------------------------\n@_new_event_emitter = ->\n  R               = new Event_emitter()\n  _emit           = R.emit.bind R\n  #.........................................................................................................\n  R.emit = ( event_name, P... ) ->\n    _emit '*',  event_name, P... unless event_name is '*'\n    _emit       event_name, P...\n  # #.........................................................................................................\n  # R.on = ( name, P... ) ->\n  #   # ### experimental: accept only 'namespaced' event names a la 'foo/bar' and known names\n  #   # so as to prevent accidental usage of bogus event names like `end`, `close`, `finish` etc: ###\n  #   # unless ( '/' in name ) or ( name is 'stop' )\n  #   #   throw new Error \"µ1763 unknown event name #{rpr name}\"\n  #   emitter.on name, P...\n  #.........................................................................................................\n  return R\n\n# original_map = require 'pull-stream/throughs/map'\n# @_map_errors = ( P... ) -> original_map P...\n\n### This is the original `pull-stream/throughs/map` implementation with the `try`/`catch` clause removed so\nall errors are thrown. This, until we find out how to properly handle errors the pull-streams way. Note\nthat `_map_errors` behaves exactly like `pull-stream/throughs/filter` which tells me this shouldn't be\ntoo wrong. Also observe that while any library may require all errors to be given to a callback or\nsomesuch, no library can really enforce that because not all client code may be wrapped, so I think\nwe're stuck with throwing errors anyway. ###\n\n```\nvar prop = require('pull-stream/util/prop')\n\nthis._map_errors = function (mapper) {\n  if(!mapper) return return_id\n  mapper = prop(mapper)\n  return function (read) {\n    return function (abort, cb) {\n      read(abort, function (end, data) {\n        // try {\n        data = !end ? mapper(data) : null\n        // } catch (err) {\n        //   return read(err, function () {\n        //     return cb(err)\n        //   })\n        // }\n        cb(end, data)\n      })\n    }\n  }\n}\n```\n\n#===========================================================================================================\n# ISA METHODS\n#-----------------------------------------------------------------------------------------------------------\n### thx to German Attanasio http://stackoverflow.com/a/28564000/256361 ###\n@_isa_njs_stream            = ( x ) -> x instanceof ( require 'stream' ).Stream\n@_isa_readable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable\n@_isa_writable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.writable\n@_isa_readonly_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable and not x.writable\n@_isa_writeonly_njs_stream  = ( x ) -> ( @_isa_njs_stream x ) and x.writable and not x.readable\n@_isa_duplex_njs_stream     = ( x ) -> ( @_isa_njs_stream x ) and x.readable and     x.writable\n\n\n#-----------------------------------------------------------------------------------------------------------\n# @_nodejs_input_to_pull_source = ( P... ) -> STPS.source P...\n\n\n#===========================================================================================================\n# READ FROM, WRITE TO FILES, NODEJS STREAMS\n#-----------------------------------------------------------------------------------------------------------\n@read_from_file = ( path, options ) ->\n  ### TAINT consider using https://pull-stream.github.io/#pull-file-reader instead ###\n  switch ( arity = arguments.length )\n    when 1 then null\n    when 2\n      if CND.isa_function options\n        [ path, options, on_stop, ] = [ path, null, options, ]\n    else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  return @read_from_nodejs_stream ( FS.createReadStream path, options )\n\n#-----------------------------------------------------------------------------------------------------------\n@write_to_file = ( path, options, on_stop ) ->\n  ### TAINT consider using https://pull-stream.github.io/#pull-write-file instead ###\n  ### TAINT code duplication ###\n  switch ( arity = arguments.length )\n    when 1 then null\n    when 2\n      if CND.isa_function options\n        [ path, options, on_stop, ] = [ path, null, options, ]\n    when 3\n    else throw new Error \"µ9983 expected 1 to 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  return @write_to_nodejs_stream ( FS.createWriteStream path, options ), on_stop\n\n#-----------------------------------------------------------------------------------------------------------\n@read_from_nodejs_stream = ( stream ) ->\n  switch ( arity = arguments.length )\n    when 1 then null\n    else throw new Error \"µ9983 expected 1 argument, got #{arity}\"\n  #.........................................................................................................\n  return STPS.source stream, ( error ) -> finish error\n\n#-----------------------------------------------------------------------------------------------------------\n@write_to_nodejs_stream = ( stream, on_stop ) ->\n  ### TAINT code duplication ###\n  switch ( arity = arguments.length )\n    when 1, 2 then null\n    else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  if on_stop? and ( ( type = CND.type_of on_stop ) isnt 'function' )\n    throw new Error \"µ9383 expected a function, got a #{type}\"\n  #.........................................................................................................\n  has_finished = false\n  #.........................................................................................................\n  finish = ( error ) ->\n    ### In case there was an error, throw that error if we already called on_stop, or there is no\n    callback given; this is to prevent silent failures: ###\n    if error? and ( has_finished or ( not on_stop? ) )\n      has_finished = true\n      throw error\n    #.......................................................................................................\n    ### Otherwise, call back (with optional error) only in case we have not yet finished; this is to\n    prevent inadvertently calling back more than once: ###\n    if not has_finished\n      has_finished = true\n      if on_stop?\n        debug '39983'\n        return on_stop error if error?\n        return on_stop()\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  stream.on 'close', -> finish()\n  return STPS.sink stream, ( error ) -> finish error\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n### TAINT refactor: `PS.new_source.from_path`, `PS.new_source.from_text`..., `PS.new_sink.as_text` (???) ###\n@new_text_source = ( text ) -> $values [ text, ]\n@new_text_sink = ->\n  throw new Error \"µ8648 not implemented\"\n\n#-----------------------------------------------------------------------------------------------------------\n@new_value_source = ( values ) -> $values values\n\n#-----------------------------------------------------------------------------------------------------------\n@map_start = ( method ) ->\n  throw new Error \"µ9413 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ10178 method arity #{arity} not implemented\" unless ( arity = method.length ) is 0\n  is_first = yes\n  return @_map_errors ( data ) =>\n    if is_first\n      is_first = no\n      method()\n    return data\n\n#-----------------------------------------------------------------------------------------------------------\n@map_stop = ( method ) ->\n  throw new Error \"µ10943 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ11708 method arity #{arity} not implemented\" unless ( arity = method.length ) is 0\n  return $pass_through return_id, ( abort ) ->\n    method()\n    return abort\n\n#-----------------------------------------------------------------------------------------------------------\n@map_first = ( method ) ->\n  throw new Error \"µ12473 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ13238 method arity #{arity} not implemented\" unless ( arity = method.length ) is 1\n  is_first = yes\n  return @_map_errors ( data ) =>\n    if is_first\n      is_first = no\n      method data\n    return data\n\n#-----------------------------------------------------------------------------------------------------------\n@map_last = ( method ) ->\n  throw new Error \"µ14003 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ14768 method arity #{arity} not implemented\" unless ( arity = method.length ) is 1\n  throw new Error 'meh'\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter = ( method ) ->\n  throw new Error \"µ15533 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ16298 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return pull.filter method\n\n#-----------------------------------------------------------------------------------------------------------\n@map = ( method ) ->\n  throw new Error \"µ17063 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ17828 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return @_map_errors method\n\n#-----------------------------------------------------------------------------------------------------------\n@$ = @remit = ( hint, method ) ->\n  switch arity = arguments.length\n    when 1\n      method  = hint\n      hint    = null\n    when 2\n      throw new Error \"µ18593 unknown hint #{rpr hint}\" unless hint is 'null'\n    else throw new Error \"µ19358 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  switch client_arity = method.length\n    when 2 then null\n    else throw new Error \"µ20123 method arity #{client_arity} not implemented\"\n  #.........................................................................................................\n  throw new Error \"µ20888 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  #.........................................................................................................\n  self    = null\n  send    = ( data ) => self.queue data\n  on_end  = null\n  #.........................................................................................................\n  on_data = ( data ) ->\n    self = @\n    method data, send\n    self = null\n    return null\n  #.........................................................................................................\n  if hint is 'null'\n    on_end = ->\n      self = @\n      method null, send\n      self = null\n      ### somewhat hidden in the docs: *must* call `@queue null` to end stream: ###\n      @queue null\n      return null\n  #.........................................................................................................\n  return pull_through on_data, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@$async = ( method ) ->\n  ### TAINT signature should be ( hint, method ) ###\n  ### TAINT currently all results from client method are buffered until `done` gets called; see whether\n  it is possible to use `await` so that each result can be sent doen the pipeline w/out buffering ###\n  throw new Error \"µ18187 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ18203 expected one argument, got #{arity}\" unless ( arity = arguments.length ) is 1\n  throw new Error \"µ18219 method arity #{arity} not implemented\" unless ( arity = method.length ) is 3\n  pipeline = []\n  #.........................................................................................................\n  pipeline.push @_$paramap ( d, handler ) =>\n    collector               = []\n    collector[ unpack_sym ] = true\n    #.......................................................................................................\n    send = ( d ) =>\n      return handler true if d is null\n      collector.push d\n      return null\n    #.......................................................................................................\n    done = =>\n      handler null, collector\n      collector = null\n      return null\n    #.......................................................................................................\n    method d, send, done\n    return null\n  #.........................................................................................................\n  pipeline.push @$ ( d, send ) =>\n    if ( CND.isa_list d ) and d[ unpack_sym ]\n      send x for x in d\n    else\n      send d\n  #.........................................................................................................\n  return @pull pipeline...\n\n\n#===========================================================================================================\n# ASYNC TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$defer =         -> @$async ( d, send, done ) -> defer -> send d; done()\n@$delay = ( dts ) -> @$async ( d, send, done ) -> after dts, -> send d; done()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$pass            = -> @_map_errors     ( data ) => data\n#...........................................................................................................\n@$as_line         = -> @_map_errors     ( line    ) => line + '\\n'\n@$trim            = -> @_map_errors     ( line    ) => line.trim()\n@$split_fields    = -> @_map_errors     ( line    ) => line.split /\\s*\\t\\s*/\n@$skip_empty      = -> @$filter         ( line    ) => line.length > 0\n#...........................................................................................................\n@$push_to_list    = ( collector ) -> @_map_errors ( data ) => collector.push  data; return data\n@$add_to_set      = ( collector ) -> @_map_errors ( data ) => collector.add   data; return data\n#...........................................................................................................\n@$count           = -> throw new Error \"µ23183 not implemented\"\n@$take            = $take\n\n#-----------------------------------------------------------------------------------------------------------\n@$drain = ( on_end = null ) -> $pull_drain null, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@$watch = ( method ) ->\n  return @_map_errors ( data ) =>\n    method data\n    return data\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT not sure how to call this / how to unify with the rest of the API ###\n@_$watch_null = ( method ) ->\n  on_each = ( data ) ->\n    method data\n    return null\n  on_stop = ( abort ) ->\n    method null\n    return null\n  return $pass_through on_each, on_stop\n\n#-----------------------------------------------------------------------------------------------------------\n@$name_fields = ( names ) ->\n  throw new Error \"µ23948 expected a list, got a #{type}\" unless ( type = CND.type_of names ) is 'list'\n  return @_map_errors ( fields ) =>\n    throw new Error \"µ24713 expected a list, got a #{type}\" unless ( type = CND.type_of fields ) is 'list'\n    R = {}\n    for value, idx in fields\n      name      = names[ idx ] ?= \"field_#{idx}\"\n      R[ name ] = value\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$trim_fields = -> @$watch ( fields  ) =>\n  fields[ idx ] = field.trim() for field, idx in fields\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_tsv = ->\n  R = []\n  R.push @$split()\n  R.push @$trim()\n  R.push @$skip_empty()\n  R.push @$filter ( line ) -> not line.startsWith '#'\n  R.push @$split_fields()\n  # R.push @$trim_fields()\n  return @pull R...\n\n#-----------------------------------------------------------------------------------------------------------\n@pull = ( methods... ) ->\n  return @$pass() if methods.length is 0\n  for method, idx in methods\n    continue if ( type = CND.type_of method ) is 'function'\n    throw new Error \"µ25478 expected a function, got a #{type} for argument # #{idx + 1}\"\n  return pull methods...\n\n#-----------------------------------------------------------------------------------------------------------\n@$split = ( settings ) ->\n  throw new Error \"µ26243 MEH\" if settings?\n  R         = []\n  matcher   = null\n  mapper    = null\n  reverse   = no\n  skip_last = yes\n  R.push $pull_utf8_decoder()\n  R.push $pull_split matcher, mapper, reverse, skip_last\n  return pull R...\n\n#-----------------------------------------------------------------------------------------------------------\n@$join = ( joiner = null ) ->\n  collector = []\n  length    = 0\n  type      = null\n  is_first  = yes\n  return @$ 'null', ( data, send ) ->\n    if data?\n      if is_first\n        is_first  = no\n        type      = CND.type_of data\n        switch type\n          when 'text'\n            joiner ?= ''\n          when 'buffer'\n            throw new Error \"µ27008 joiner not supported for buffers, got #{rpr joiner}\" if joiner?\n          else\n            throw new Error \"µ27773 expected a text or a buffer, got a #{type}\"\n      else\n        unless ( this_type = CND.type_of data ) is type\n          throw new Error \"µ28538 expected a #{type}, got a #{this_type}\"\n      length += data.length\n      collector.push data\n    else\n      return send '' if ( collector.length is 0 ) or ( length is 0 )\n      return send collector.join '' if type is 'text'\n      return send Buffer.concat collector, length\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$pluck = ( settings ) ->\n  throw new Error \"µ29303 need settings 'keys', got #{rpr settings}\" unless settings?\n  { keys, } = settings\n  throw new Error \"µ30068 need settings 'keys', got #{rpr settings}\" unless keys?\n  keys      = keys.split /,\\s*|\\s+/ if CND.isa_text keys\n  throw new Error \"µ30833 need settings 'keys', got #{rpr settings}\" unless keys.length > 0\n  as        = settings[ 'as' ] ? 'object'\n  unless as in [ 'list', 'object', 'pod', ]\n    throw new Error \"µ31598 expected 'list', 'object' or 'pod', got #{rpr as}\"\n  if as is 'list'\n    return @map ( data ) => ( data[ key ] for key in keys )\n  return @map ( data ) =>\n    Z         = {}\n    Z[ key ]  = data[ key ] for key in keys\n    return Z\n\n#-----------------------------------------------------------------------------------------------------------\n@$gliding_window = ( width, method ) ->\n  throw new Error \"µ32363 expected a number, got a #{type}\" unless ( CND.type_of width ) is 'number'\n  section = []\n  send    = null\n  #.........................................................................................................\n  push = ( x ) ->\n    section.push x\n    R =\n    while section.length > width\n      send section.shift()\n    return null\n  #.........................................................................................................\n  return @$ 'null', ( new_data, send_ ) =>\n    send = send_\n    if new_data?\n      push new_data\n      method section if section.length >= width\n    else\n      while section.length > 0\n        send section.shift()\n      send null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  throw new Error \"µ33128 API changed\" if settings?\n  collector = []\n  return @$ 'null', ( data, send ) =>\n    if data? then collector.push data\n    else send collector\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$spread = ->\n  return @$ ( collection, send ) =>\n    send element for element in collection\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$sort = ( settings ) ->\n  ### https://github.com/mziccard/node-timsort ###\n  TIMSORT   = require 'timsort'\n  direction = 'ascending'\n  sorter    = null\n  key       = null\n  switch arity = arguments.length\n    when 0 then null\n    when 1\n      direction = settings[ 'direction' ] ? 'ascending'\n      sorter    = settings[ 'sorter'    ] ? null\n      key       = settings[ 'key'       ] ? null\n    else throw new Error \"µ33893 expected 0 or 1 arguments, got #{arity}\"\n  #.........................................................................................................\n  unless direction in [ 'ascending', 'descending', ]\n    throw new Error \"µ34658 expected 'ascending' or 'descending' for direction, got #{rpr direction}\"\n  #.........................................................................................................\n  unless sorter?\n    #.......................................................................................................\n    type_of = ( x ) =>\n      ### NOTE for the purposes of magnitude comparison, `Infinity` can be treated as a number: ###\n      R = CND.type_of x\n      return if R is 'infinity' then 'number' else R\n    #.......................................................................................................\n    validate_type = ( type_a, type_b, include_list = no ) =>\n      unless type_a is type_b\n        throw new Error \"µ35423 unable to compare a #{type_a} with a #{type_b}\"\n      if include_list\n        unless type_a in [ 'number', 'date', 'text', 'list', ]\n          throw new Error \"µ36188 unable to compare values of type #{type_a}\"\n      else\n        unless type_a in [ 'number', 'date', 'text', ]\n          throw new Error \"µ36953 unable to compare values of type #{type_a}\"\n      return null\n    #.......................................................................................................\n    if key?\n      sorter = ( a, b ) =>\n        a = a[ key ]\n        b = b[ key ]\n        validate_type ( type_of a ), ( type_of b ), no\n        return +1 if ( if direction is 'ascending' then a > b else a < b )\n        return -1 if ( if direction is 'ascending' then a < b else a > b )\n        return  0\n    #.......................................................................................................\n    else\n      sorter = ( a, b ) =>\n        validate_type ( type_a = type_of a ), ( type_b = type_of b ), yes\n        if type_a is 'list'\n          a = a[ 0 ]\n          b = b[ 0 ]\n          validate_type ( type_of a ), ( type_of b ), no\n        return +1 if ( if direction is 'ascending' then a > b else a < b )\n        return -1 if ( if direction is 'ascending' then a < b else a > b )\n        return  0\n  #.........................................................................................................\n  $sort = =>\n    collector = []\n    return @$ 'null', ( data, send ) =>\n      if data?\n        collector.push data\n      else\n        TIMSORT.sort collector, sorter\n        send x for x in collector\n        collector.length = 0\n      return null\n  #.........................................................................................................\n  return $sort()\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee = ( stream ) ->\n  ### **NB** that in contradistinction to `pull-tee`, you can only divert to a single by-stream with each\n  call to `PS.$tee` ###\n  # R = if ( CND.isa_list stream_or_pipeline ) then ( pull stream_or_pipeline ) else stream_or_pipeline\n  return ( require 'pull-tee' ) stream\n\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( settings ) ->\n  title     = settings?[ 'title'      ] ? '-->'\n  serialize = settings?[ 'serialize'  ] ? JSON.stringify\n  return @$watch ( data ) => info title, serialize data\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_text = ( settings ) ->\n  serialize = settings?[ 'serialize' ] ? JSON.stringify\n  return @_map_errors ( data ) => serialize data\n\n#-----------------------------------------------------------------------------------------------------------\n@$stringify = ( settings ) -> $stringify settings\n\n#-----------------------------------------------------------------------------------------------------------\n@$desaturate = ->\n  ### remove ANSI escape sequences ###\n  pattern = /\\x1b\\[[0-9;]*[JKmsu]/g\n  return @map ( line ) =>\n    return line.replace pattern, ''\n\n\n#===========================================================================================================\n# SAMPLING / THINNING OUT\n#-----------------------------------------------------------------------------------------------------------\n@$sample = ( p = 0.5, options ) ->\n  #.........................................................................................................\n  unless 0 <= p <= 1\n    throw new Error \"µ42308 expected a number between 0 and 1, got #{rpr p}\"\n  #.........................................................................................................\n  ### Handle trivial edge cases faster (hopefully): ###\n  return ( @map     ( record ) => record  ) if p == 1\n  return ( @$filter ( record ) => false   ) if p == 0\n  #.........................................................................................................\n  headers   = options?[ 'headers'     ] ? false\n  seed      = options?[ 'seed'        ] ? null\n  is_first  = headers\n  rnd       = if seed? then CND.get_rnd seed else Math.random\n  #.........................................................................................................\n  return @$ ( record, send ) =>\n    if is_first\n      is_first = false\n      return send record\n    send record if rnd() < p\n\n\n############################################################################################################\nL = @\ndo ->\n  for key, value of L\n    continue unless CND.isa_function value\n    L[ key ] = value.bind L\n\n\n"
  ]
}