{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nCP                        = require 'child_process'\nglob                      = require 'globby'\n#...........................................................................................................\n_new_push_source          = require 'pull-pushable'\n$pass_through             = require 'pull-stream/throughs/through'\n$pull_drain               = require 'pull-stream/sinks/drain'\n$values                   = require 'pull-stream/sources/values'\n$paramap                  = require 'pull-paramap'\npull                      = require 'pull-stream'\npull_through              = require 'pull-through'\npull_cont                 = require 'pull-cont'\nunpack_sym                = Symbol 'unpack'\n_map_errors               = require './_map_errors'\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\ndefer                     = setImmediate\nreturn_id                 = ( x ) -> x\n{ is_empty\n  copy\n  assign\n  jr }                    = CND\n\n\n#===========================================================================================================\n# ISA METHODS\n#-----------------------------------------------------------------------------------------------------------\n### thx to German Attanasio http://stackoverflow.com/a/28564000/256361 ###\n@_isa_njs_stream            = ( x ) -> x instanceof ( require 'stream' ).Stream\n@_isa_readable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable\n@_isa_writable_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.writable\n@_isa_readonly_njs_stream   = ( x ) -> ( @_isa_njs_stream x ) and x.readable and not x.writable\n@_isa_writeonly_njs_stream  = ( x ) -> ( @_isa_njs_stream x ) and x.writable and not x.readable\n@_isa_duplex_njs_stream     = ( x ) -> ( @_isa_njs_stream x ) and x.readable and     x.writable\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@new_value_source = ( values ) -> $values values\n\n#-----------------------------------------------------------------------------------------------------------\n@new_push_source = ->\n  ### Return a `pull-streams` `pushable`. Methods `push` and `end` will be bound to the instance\n  so they can be freely passed around. ###\n  R       = _new_push_source()\n  R.push  = R.push.bind R\n  R.end   = R.end.bind R\n  return R\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @map_start = ( method ) ->\n#   throw new Error \"µ9413 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n#   throw new Error \"µ10178 method arity #{arity} not implemented\" unless ( arity = method.length ) is 0\n#   is_first = yes\n#   return _map_errors ( data ) =>\n#     if is_first\n#       is_first = no\n#       method()\n#     return data\n\n# #-----------------------------------------------------------------------------------------------------------\n# @map_stop = ( method ) ->\n#   throw new Error \"µ10943 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n#   throw new Error \"µ11708 method arity #{arity} not implemented\" unless ( arity = method.length ) is 0\n#   return $pass_through return_id, ( abort ) ->\n#     method()\n#     return abort\n\n# #-----------------------------------------------------------------------------------------------------------\n# @map_first = ( method ) ->\n#   throw new Error \"µ12473 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n#   throw new Error \"µ13238 method arity #{arity} not implemented\" unless ( arity = method.length ) is 1\n#   is_first = yes\n#   return _map_errors ( data ) =>\n#     if is_first\n#       is_first = no\n#       method data\n#     return data\n\n# #-----------------------------------------------------------------------------------------------------------\n# @map_last = ( method ) ->\n#   throw new Error \"µ14003 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n#   throw new Error \"µ14768 method arity #{arity} not implemented\" unless ( arity = method.length ) is 1\n#   throw new Error 'meh'\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter = ( method ) ->\n  throw new Error \"µ15533 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ16298 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return pull.filter method\n\n#-----------------------------------------------------------------------------------------------------------\n@map = ( method ) ->\n  throw new Error \"µ17063 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  switch arity = method.length\n    when 1 then null\n    else throw new Error \"µ17828 method arity #{arity} not implemented\"\n  #.........................................................................................................\n  return _map_errors method\n\n#-----------------------------------------------------------------------------------------------------------\n@$ = @remit = ( hint, method ) ->\n  switch arity = arguments.length\n    when 1\n      method  = hint\n      hint    = null\n    when 2\n      throw new Error \"µ18593 unknown hint #{rpr hint}\" unless hint is 'null'\n    else throw new Error \"µ19358 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  switch client_arity = method.length\n    when 2 then null\n    else throw new Error \"µ20123 method arity #{client_arity} not implemented\"\n  #.........................................................................................................\n  throw new Error \"µ20888 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  #.........................................................................................................\n  self    = null\n  send    = ( data ) => self.queue data\n  on_end  = null\n  #.........................................................................................................\n  on_data = ( data ) ->\n    self = @\n    method data, send\n    self = null\n    return null\n  #.........................................................................................................\n  if hint is 'null'\n    on_end = ->\n      self = @\n      method null, send\n      self = null\n      ### somewhat hidden in the docs: *must* call `@queue null` to end stream: ###\n      @queue null\n      return null\n  #.........................................................................................................\n  return pull_through on_data, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@$async = ( method ) ->\n  ### TAINT signature should be ( hint, method ) ###\n  ### TAINT currently all results from client method are buffered until `done` gets called; see whether\n  it is possible to use `await` so that each result can be sent doen the pipeline w/out buffering ###\n  throw new Error \"µ18187 expected a function, got a #{type}\" unless ( type = CND.type_of method ) is 'function'\n  throw new Error \"µ18203 expected one argument, got #{arity}\" unless ( arity = arguments.length ) is 1\n  throw new Error \"µ18219 method arity #{arity} not implemented\" unless ( arity = method.length ) is 3\n  pipeline = []\n  #.........................................................................................................\n  pipeline.push $paramap ( d, handler ) =>\n    collector = null\n    #.......................................................................................................\n    send = ( d ) =>\n      return handler true if d is null\n      unless collector?\n        collector               = []\n        collector[ unpack_sym ] = true\n      collector.push d\n      return null\n    #.......................................................................................................\n    done = =>\n      handler null, collector\n      collector = null\n      return null\n    #.......................................................................................................\n    method d, send, done\n    return null\n  #.........................................................................................................\n  pipeline.push @$ ( d, send ) =>\n    if ( CND.isa_list d ) and d[ unpack_sym ]\n      send x for x in d\n    else\n      send d\n  #.........................................................................................................\n  return @pull pipeline...\n\n\n#===========================================================================================================\n# ASYNC TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$defer =         -> @$async ( d, send, done ) -> defer -> send d; done()\n@$delay = ( dts ) -> @$async ( d, send, done ) -> after dts, -> send d; done()\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$pass = -> _map_errors ( data ) => data\n@$drain = ( on_end = null ) -> $pull_drain null, on_end\n\n#-----------------------------------------------------------------------------------------------------------\n@$watch = ( method ) ->\n  return _map_errors ( data ) =>\n    method data\n    return data\n\n#-----------------------------------------------------------------------------------------------------------\n@pull = ( methods... ) ->\n  return @$pass() if methods.length is 0\n  for method, idx in methods\n    continue if ( type = CND.type_of method ) is 'function'\n    throw new Error \"µ25478 expected a function, got a #{type} for argument # #{idx + 1}\"\n  return pull methods...\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$gliding_window = ( width, method ) ->\n  throw new Error \"µ32363 expected a number, got a #{type}\" unless ( CND.type_of width ) is 'number'\n  section = []\n  send    = null\n  #.........................................................................................................\n  push = ( x ) ->\n    section.push x\n    R =\n    while section.length > width\n      send section.shift()\n    return null\n  #.........................................................................................................\n  return @$ 'null', ( new_data, send_ ) =>\n    send = send_\n    if new_data?\n      push new_data\n      method section if section.length >= width\n    else\n      while section.length > 0\n        send section.shift()\n      send null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  throw new Error \"µ33128 API changed\" if settings?\n  collector = []\n  return @$ 'null', ( data, send ) =>\n    if data? then collector.push data\n    else send collector\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$spread = ->\n  return @$ ( collection, send ) =>\n    send element for element in collection\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$generate = ( generator ) ->\n  return ( end, handler ) ->\n    return handler end if end\n    R = generator.next()\n    return handler true if R.done\n    handler null, R.value\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee = ( stream ) ->\n  ### **NB** that in contradistinction to `pull-tee`, you can only divert to a single by-stream with each\n  call to `PS.$tee` ###\n  # R = if ( CND.isa_list stream_or_pipeline ) then ( pull stream_or_pipeline ) else stream_or_pipeline\n  return ( require 'pull-tee' ) stream\n\n#-----------------------------------------------------------------------------------------------------------\n@$show = ( settings ) ->\n  title     = settings?[ 'title'      ] ? '-->'\n  serialize = settings?[ 'serialize'  ] ? JSON.stringify\n  return @$watch ( data ) => info title, serialize data\n\n\n#===========================================================================================================\n# SAMPLING / THINNING OUT\n#-----------------------------------------------------------------------------------------------------------\n@$sample = ( p = 0.5, options ) ->\n  #.........................................................................................................\n  unless 0 <= p <= 1\n    throw new Error \"µ42308 expected a number between 0 and 1, got #{rpr p}\"\n  #.........................................................................................................\n  ### Handle trivial edge cases faster (hopefully): ###\n  return ( @map     ( record ) => record  ) if p == 1\n  return ( @$filter ( record ) => false   ) if p == 0\n  #.........................................................................................................\n  headers   = options?[ 'headers'     ] ? false\n  seed      = options?[ 'seed'        ] ? null\n  is_first  = headers\n  rnd       = if seed? then CND.get_rnd seed else Math.random\n  #.........................................................................................................\n  return @$ ( record, send ) =>\n    if is_first\n      is_first = false\n      return send record\n    send record if rnd() < p\n\n############################################################################################################\n### Gather methods from submodules, bind all methods ###\nL = @\ndo ->\n  patterns  = [ '*.js', '!main.js', '!_*' ]\n  settings  = { cwd: ( PATH.join __dirname ), deep: false, absolute: true, }\n  paths     = glob.sync patterns, settings\n  #.........................................................................................................\n  for path in paths\n    module = require path\n    for key, value of module\n      continue if key.startsWith '_'\n      throw new Error \"duplicate key #{rpr key}\" if L[ key ]?\n      L[ key ] = value\n  #.........................................................................................................\n  for key, value of L\n    continue unless CND.isa_function value\n    L[ key ] = value.bind L\n  #.........................................................................................................\n  return null\n\n"
  ]
}