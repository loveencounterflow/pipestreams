{
  "version": 3,
  "file": "wye-tee-merge.js",
  "sourceRoot": "..",
  "sources": [
    "src/wye-tee-merge.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/WYE-TEE-MERGE'\n# log                       = CND.get_logger 'plain',     badge\n# info                      = CND.get_logger 'info',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# alert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\n# help                      = CND.get_logger 'help',      badge\n# urge                      = CND.get_logger 'urge',      badge\n# echo                      = CND.echo.bind CND\n{ jr }                    = CND\nmux                       = require 'pull-mux' ### https://github.com/nichoth/pull-mux ###\ndefer                     = setImmediate\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee = ( a, b ) ->\n  switch ( arity = arguments.length )\n    when 1 then return @_$tee_without_filter  a\n    when 2 then return @_$tee_with_filter     a, b\n  throw new Error \"Âµ93002 expected 1 or 2 arguments, got #{arity}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_$tee_without_filter = ( bystream ) ->\n  ### Given a `bystream`, send a data down both the mainstream and the bystream. This allows e.g. to log all\n  events to a file sink while continuing to process the same data in the mainline. **NB** that in\n  contradistinction to `pull-tee`, you can only divert to a single by-stream with each call to `PS.$tee` ###\n  return ( require 'pull-tee' ) bystream\n\n#-----------------------------------------------------------------------------------------------------------\n@_$tee_with_filter = ( filter, bystream ) ->\n  ### Given a `filter` function and a `bystream`, send only data `d` for which `filter d` returns true down\n  the bystream. No data will be taken out of the mainstream. ###\n  return @_$tee_without_filter @pull ( @$filter filter ), bystream\n\n#-----------------------------------------------------------------------------------------------------------\n@$bifurcate = ( filter, bystream ) ->\n  ### Given a `filter` function and a `bystream`, send all data `d` either down the bystream if `filter d`\n  returns true, or down the mainstream otherwise, causing a disjunct bifurcation of the data stream. ###\n  byline    = []\n  pipeline  = []\n  byline.push @$ ( d, send ) -> send d[ 1 ] if d[ 0 ]\n  byline.push bystream\n  pipeline.push @$ ( d, send ) -> send [ ( filter d ), d, ]\n  pipeline.push @_$tee_without_filter @pull byline...\n  pipeline.push @$ ( d, send ) -> send d[ 1 ] if not d[ 0 ]\n  return @pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$merge = ( sources... ) ->\n  #.........................................................................................................\n  $_mux = ( sources... ) =>\n    R = {}\n    R[ idx ] = source for source, idx in sources\n    return mux R\n  #.........................................................................................................\n  $_demux = => @$map ( [ k, v, ] ) -> v\n  #.........................................................................................................\n  pipeline  = []\n  pipeline.push $_mux sources...\n  pipeline.push $_demux()\n  return @pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$wye = ( bystream ) ->\n  pair              = ( require 'pull-pair' )()\n  pushable          = @new_push_source()\n  subline           = []\n  byline            = []\n  end_sym           = Symbol 'end'\n  bystream_ended    = false\n  substream_ended   = false\n  dones             = []\n  #.........................................................................................................\n  subline.push pair.source\n  # subline.push @$ { last: end_sym, }, ( d, send ) ->\n  #   send d\n  subline.push @$async { last: end_sym, }, ( d, send, done ) ->\n    if d is end_sym\n      substream_ended = true\n      debug CND.white '22209-1 pipestreams.$wye', d, { bystream_ended, substream_ended, }\n      if bystream_ended\n        pushable.end()\n        defer -> done()\n    else\n      pushable.send d\n      done()\n    return null\n  debug '20922-1'\n  subline.push @$drain()\n  debug '20922-2'\n  #.........................................................................................................\n  byline.push bystream\n  byline.push @$async { last: end_sym, }, ( d, send, done ) ->\n    if d is end_sym\n      bystream_ended = true\n      debug CND.white '22209-2 pipestreams.$wye', d, { bystream_ended, substream_ended, }\n      if substream_ended\n        pushable.end()\n        defer -> done()\n    else\n      send d\n      done()\n    return null\n  #.........................................................................................................\n  debug '20922-3'\n  @pull subline...\n  debug '20922-4'\n  confluence = @$merge pushable, @pull byline...\n  debug '20922-5'\n  return { sink: pair.sink, source: confluence, }\n\n\n\n"
  ]
}