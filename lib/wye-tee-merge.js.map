{
  "version": 3,
  "file": "wye-tee-merge.js",
  "sourceRoot": "..",
  "sources": [
    "src/wye-tee-merge.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "mux = require 'pull-mux' ### https://github.com/nichoth/pull-mux ###\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee = ( stream ) ->\n  ### **NB** that in contradistinction to `pull-tee`, you can only divert to a single by-stream with each\n  call to `PS.$tee` ###\n  # R = if ( CND.isa_list stream_or_pipeline ) then ( pull stream_or_pipeline ) else stream_or_pipeline\n  return ( require 'pull-tee' ) stream\n\n#-----------------------------------------------------------------------------------------------------------\n@$merge = ( sources... ) ->\n  #.........................................................................................................\n  $_mux = ( sources... ) =>\n    R = {}\n    R[ idx ] = source for source, idx in sources\n    return mux R\n  #.........................................................................................................\n  $_demux = => @$map ( [ k, v, ] ) -> v\n  #.........................................................................................................\n  pipeline  = []\n  pipeline.push $_mux sources...\n  pipeline.push $_demux()\n  return @pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$wye = ( bysource ) ->\n  mainstream_ended  = false\n  bystream_started  = false\n  bystream_ended    = false\n  send              = null\n  done              = null\n  buffer            = []\n  stack             = ( x ) => buffer.unshift x\n  flush             = => send buffer.pop() while buffer.length > 0\n  #.........................................................................................................\n  bystream          = []\n  bystream.push bysource\n  bystream.push @$ 'null', ( d, _send ) =>\n    if d?\n      ### When `done` is defined, mainstream has ended, but `done` has not been called, meaning we can\n      send directly (but avoid calling `done` yet); otherwise, we buffer the data: ###\n      if done? then send  d\n      else          stack d\n    else\n      ### When data is `null`, bystream has ended; if mainstream has already ended, `done` is be defined,\n      so we flush out any remaining data, then call `done`: ###\n      bystream_ended = true\n      if done?\n        flush()\n        done()\n    return null\n  bystream.push @$drain()\n  #.........................................................................................................\n  mainstream        = []\n  mainstream.push @$async 'null', ( d, _send, _done ) =>\n    ### `send` and `done` are shared within this method and will be needed to send values from bystream\n    if it terminates later than mainstream: ###\n    send = _send\n    done = _done\n    #.......................................................................................................\n    unless bystream_started\n      ### In case bystream has not yeen been started, do that now: ###\n      bystream_started = true\n      @pull bystream...\n    #.......................................................................................................\n    if d?\n      ### In case there's mainstream data, flush out any bystream data, send d, call `done` and\n      un-define it: ###\n      flush()\n      send d\n      done()\n      done = null\n    else\n      ### In case mainstream data is `null`, mainstream has terminated. If bystream has been terminated\n      as well, call `done` and un-define it: ###\n      flush()\n      if bystream_ended\n        done()\n        done = null\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  R = @pull mainstream...\n  return R\n"
  ]
}