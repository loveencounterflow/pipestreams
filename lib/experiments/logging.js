// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var $, $async, CND, PS, STACKTRACE, after, alert, badge, debug, defer, echo, every, get_logger, get_source/* https://github.com/felixge/node-stack-trace */, get_source_ref, help, info, inspect, is_empty, jr, log, rpr, test, urge, warn, whisper, xrpr,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS/EXPERIMENTS/PULL-STREAM-EXAMPLES-PULL';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  after = function(dts, f) {
    return setTimeout(f, dts * 1000);
  };

  every = function(dts, f) {
    return setInterval(f, dts * 1000);
  };

  defer = setImmediate;

  ({jr, is_empty} = CND);

  //...........................................................................................................
  PS = require('../..');

  ({$, $async} = PS);

  test = require('guy-test');

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //...........................................................................................................
  STACKTRACE = require('stack-trace');

  get_source = require('get-source');

  //-----------------------------------------------------------------------------------------------------------
  /* https://github.com/xpl/get-source */  get_source_ref = function(delta, color) {
    /* TAINT use tabular as in old pipedreams */
    var R, display_path, js_column_nr, js_filename, js_line_nr, target, target_column, target_line, target_line_nr, target_path, trace;
    trace = STACKTRACE.get()[delta + 1];
    js_filename = trace.getFileName();
    js_line_nr = trace.getLineNumber();
    js_column_nr = trace.getColumnNumber();
    target = (get_source(js_filename)).resolve({
      line: js_line_nr,
      column: js_column_nr
    });
    target_column = target.column;
    target_line = target.sourceLine.slice(target_column);
    target_line = target_line.replace(/^\s*(.*?)\s*$/g, '$1');
    target_path = target.sourceFile.path;
    display_path = target_path.replace(/\.[^.]+$/, '');
    display_path = '...' + display_path.slice(display_path.length - 10);
    target_line_nr = target.line;
    R = (CND.grey(display_path)) + ' ' + (CND.white(target_line_nr)) + ' ' + (CND[color](target_line));
    return R.padEnd(150, ' ');
  };

  //-----------------------------------------------------------------------------------------------------------
  get_logger = function(color) {
    var is_first_transform;
    is_first_transform = true;
    return function(transform) {
      var pipeline, source_ref;
      source_ref = get_source_ref(1, color);
      pipeline = [];
      switch (transform.length) {
        case 0:
          pipeline.push(transform);
          pipeline.push(PS.$watch(function(d) {
            return echo(source_ref, xrpr(d));
          }));
          break;
        case 1:
          if (is_first_transform) {
            is_first_transform = false;
            pipeline.push(PS.$watch(function(d) {
              return echo('-'.repeat(108));
            }));
          }
          pipeline.push(PS.$watch(function(d) {
            return echo(source_ref, '->', xrpr(d), '  ');
          }));
          pipeline.push(transform);
      }
      // pipeline.push PS.$watch ( d ) -> echo source_ref, '  ', ( xrpr d ), '->'
      return PS.pull(...pipeline);
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this["demo through with null"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    // through = require 'pull-through'
    // [[ 5, 15, 20, undefined, 25, 30, ], [ 10, 30, 40, undefined, 50, 60 ]]
    probes_and_matchers = [[[1, 2, 3, null, 4, 5], [2, 4, 6, null, 8, 10], null]];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve) {
          var byline, bylog, bystream, collector, is_odd, mainlog, pipeline, source;
          is_odd = function(d) {
            return (modulo(d, 2)) !== 0;
          };
          bylog = get_logger('lime');
          mainlog = get_logger('yellow');
          //.....................................................................................................
          source = PS.new_value_source(probe);
          // source    = PS.new_random_async_value_source probe
          collector = [];
          byline = [];
          byline.push(bylog(PS.$filter(function(d) {
            return modulo(d, 2) === 0;
          })));
          byline.push(bylog($(function(d, send) {
            return send(d != null ? d * 3 : d);
          })));
          // byline.push bylog PS.$watch ( d ) -> info xrpr d
          byline.push(bylog(PS.$drain()));
          bystream = PS.pull(...byline);
          pipeline = [];
          pipeline.push(source);
          // pipeline.push log PS.$watch ( d ) -> info '--->', d
          pipeline.push(mainlog(PS.$tee(bystream)));
          pipeline.push(mainlog($(function(d, send) {
            return send(d != null ? d * 2 : d);
          })));
          // pipeline.push mainlog PS.$tee is_odd, PS.pull byline...
          pipeline.push(mainlog(PS.$collect({collector})));
          pipeline.push(PS.$drain(function() {
            help(collector);
            return resolve(collector);
          }));
          return PS.pull(...pipeline);
        });
      });
    }
    //.........................................................................................................
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    null;
    test(this);
  }

  /*
That covers 3 types of pull streams. Source, Transform, & Sink.
There is one more important type, although it's not used as much.

Duplex streams

(see duplex.js!)
*/

}).call(this);

//# sourceMappingURL=logging.js.map
