{
  "version": 3,
  "file": "pull-stream-examples-pull.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/pull-stream-examples-pull.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/PULL-STREAM-EXAMPLES-PULL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n#...........................................................................................................\nPS                        = require '../..'\ntest                      = require 'guy-test'\n\n\n### Create a simple source stream that reads from an array.\n\nA pull stream is just an async stream that is called repeatedly. Note that when\nevery item in the array has been called back, it returns true in the error slot.\nThis indicates the end of the stream. Both `error` and `end` mean the stream is\nover, but there are many possible ways an error can occur (`error && error !==\ntrue`), and only one way a stream can correctly end (`true`).\n\nIn pull-streams I like to call streams that data comes out of 'sources', while\nin NodeJS they are usually called 'readables'. ###\n\n#-----------------------------------------------------------------------------------------------------------\nsource_from_values = ( list ) ->\n  idx       = -1\n  last_idx  = list.length - 1\n  read = ( abort, handler ) ->\n    return handler abort if abort             # acknowledge `abort` condition, if any\n    return handler true  if idx >= last_idx   # terminate normally with `true`\n    idx += +1\n    ### Can callback later: ###\n    if O.async.value_source\n      defer -> handler null, list[ idx ]\n    else\n      handler null, list[ idx ]\n    return null\n  return read\n\n### Pull-streams don't really have a writable stream per se. 'Writable' implies that\nthe writer is the active partner, and the stream which is written to is passive\n(like you are when you watch TV, the TV writes its lies into neocortex via your retinas).\n\nInstead of a writable, pull-streams have a 'sink', i.e. a 'reader'. Here the\nreader is the active party, actively consuming more data. When you read a book,\nyou are in control, and must actively turn the pages to get more information.\n\nSo, a sink is a function that you pass a source to, which then reads from that\nfunction until it gets to the end or decides to stop. ###\n\n#-----------------------------------------------------------------------------------------------------------\nsink = ( read ) ->\n  ### NOTE this implementation will call the `read()` method recursively, risking to blow the call stack\n  when streams get longer. This can be alleviated (I think) by deferring the callback to the next turn of\n  the event loop, or by using a linear transformation (a trampoline) of the recursive call, as per\n  https://github.com/pull-stream/pull-stream/blob/master/sinks/drain.js. ###\n  #.........................................................................................................\n  next = ( error, data ) ->\n    if error?\n      return whisper \"µ33874 ended\" if error is true\n      throw error\n    debug '89983', data\n    ### Can read next later: ###\n    # recursively call read again!\n    if O.async.standard_sink_2\n      defer -> read null, next\n    else\n      read null, next\n    return null\n  if O.async.standard_sink_1\n    defer -> read null, next\n  else\n    read null, next\n  return null\n\n### We could now consume the source with just these two functions: `sink( source_from_values( [1,2,3] ) )`.\n\nSo simple. We didn't use any libraries, yet, we have streams with two-way\nback-pressure. Since the pattern is async, the source can slow down by\nback-calling slower, and the sink can slow down by waiting longer before calling\n`read()` again!\n\nOkay, to be useful, we also need a way to transform inputs into different\noutputs, i.e. a transform stream. In pull-streams a transform is implemented as\na sink that returns a source. ###\n\n#-----------------------------------------------------------------------------------------------------------\nmap = ( mapper ) ->\n  # a sink function: accept a source...\n  return ( read ) ->\n    # ...but return another source!\n    return ( abort, handler ) ->\n      read abort, ( error, data ) ->\n        # if the stream has ended, pass that on.\n        return handler error if error\n        if O.async.map\n          # apply a mapping to that data\n          defer -> handler null, mapper data\n        else\n          handler null, mapper data\n        return null\n      return null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nmap_with_end = ( mapper ) ->\n  # a sink function: accept a source...\n  return ( read ) ->\n    # ...but return another source!\n    return ( abort, handler ) ->\n      read abort, ( error, data ) ->\n        # if the stream has ended, pass that on.\n        if error\n          return handler error unless error is true\n          if O.async.map\n            defer ->\n              handler null, last_result if ( last_result = mapper null )?\n              handler error\n            return null\n          else\n            handler null, last_result if ( last_result = mapper null )?\n            handler error\n            return null\n        # apply a mapping to that data\n        if O.async.map\n          defer -> handler null, mapper data\n        else\n          handler null, mapper data\n        return null\n      return null\n    return null\n\n\n### right now, we could combine these 3 streams by passing them to each other.\n\nand then combine these with function composition:\n\nsink(mapper(source))\n\nthis would be equavalent to node's .pipe\nexcept with node streams it would look like\n\nsource.pipe(mapper).pipe(sink)\n\nto be honest, it's easier to read if it does left to right.\nbecause the direction the data flows is the same as you read.\n\nlets write a quick function that allows us to compose pull streams left-to-right\n\npull(source, mapper, sink)\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\npull = ( P... ) ->\n  R = P.shift()\n  R = P.shift() R while P.length > 0\n  return R\n\n### thats it! just call the next thing with the previous thing until there are no things left.\nif we return the last thing, then we can even do this:\n\npull(pull(source, mapper), sink) ###\n\n\n### Infinite streams. here is a stream that never ends. ###\n\n#-----------------------------------------------------------------------------------------------------------\ninfinite_counter = ->\n  i = -1\n  return ( abort, handler ) ->\n    return handler abort if abort\n    i += +1\n    handler null, i\n    return null\n\n### Now, reading all of an infinite stream will take forever...\nBUT! the cool thing about pull streams is that they are LAZY.\nthat means it only gives us the next thing when we ask for it.\n\nAlso, you can ABORT a pull stream when you don't want any more.\n\nhere is a take(n) stream that reads n items from a source and then stops.\nit's a transform stream like map, except it will stop early. ###\n\n#-----------------------------------------------------------------------------------------------------------\ntake = ( n ) ->\n  return ( read ) ->\n    return ( abort, handler ) ->\n      # after n reads, tell the source to abort!\n      n += -1\n      return read true, handler if n < 0\n      read null, handler\n      return null\n\n#-----------------------------------------------------------------------------------------------------------\n$is_equal = ( x ) ->\n  return map ( d ) ->\n    if CND.equals d, x\n      help \"ok: #{jr d}\"\n    else\n      warn \"not ok: #{jr d} (expected #{x})\"\n    return d\n\n#-----------------------------------------------------------------------------------------------------------\n$square = -> map ( d ) ->\n  return d unless ( CND.isa_number d )\n  return d ** 2\n\n#-----------------------------------------------------------------------------------------------------------\n$foo = -> map_with_end ( d ) ->\n  if d?\n    return null\n  else\n    urge '$foo: end'\n    return 17\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$collect_A = ( collector = null ) ->\n  pull_map_last = require 'pull-map-last'\n  # _pull         = require 'pull-stream'\n  collector    ?= []\n  discard_sym   = Symbol.for 'pipestreams:discard'\n  map_on_data = ( d ) ->\n    collector.push d\n    debug \"$collect/on_data: #{rpr d}, #{rpr collector}\"\n    return discard_sym\n  map_on_end = ->\n    debug \"$collect/on_end: #{rpr collector}\"\n    return collector\n  # return pull ( pull_map_last map_on_data, map_on_end ), ( _pull.filter ( d ) -> d isnt discard_sym )\n  return pull_map_last map_on_data, map_on_end\n\n#-----------------------------------------------------------------------------------------------------------\nO =\n  async:\n    value_source:     false\n    standard_sink_2:  false\n    standard_sink_1:  false\n    map:              false\n\n\n### now we can pipe the infinite stream through this,\nand it will stop after n items! ###\n\n# pipeline = []\n# pipeline.push infinite_counter()\n# pipeline.push $square()\n# pipeline.push $foo()\n# pipeline.push take 10\n# pipeline.push PS.$show { title: 'A', }\n# pipeline.push PS.$collect()\n# pipeline.push $is_equal [0,1,4,9,16,25,36,49,64,81]\n# pipeline.push sink\n# pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"list with nulls\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[ 5, 15, 20, null, 25, 30, ], [25,225,400,null,625,900]]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      # source    = source_from_values [ 5, 15, 20, 25, 30, ]\n      repeated  = 0\n      source    = source_from_values probe\n      # through = require 'pull-stream/throughs/through'\n      pipeline  = []\n      pipeline.push source\n      pipeline.push $square()\n      pipeline.push PS.$show { title: 'B1', }\n      pipeline.push PS.$collect()\n      # pipeline.push $collect_A()\n      # pipeline.push through -> debug ( key for key of @ )\n      # pipeline.push ( require 'pull-stream' ).filter ( d ) -> d isnt Symbol.for 'pipestreams:discard'\n      pipeline.push PS.$show { title: 'B2', }\n      pipeline.push map ( d ) ->\n        info '--->', d\n        debug repeated\n        throw new Error \"called more than once\" if ++repeated isnt 1\n        resolve d\n        return d\n      pipeline.push ( require 'pull-stream/sinks/drain' )()\n      # pipeline.push sink\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo through with null\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  through = require '../../../pull-through-with-end-symbol'\n  probes_and_matchers = [\n    [[true,[ 5, 15, 20, undefined, 25, 30, ]], [ 10, 30, 40, undefined, 50, 60 ]]\n    [[false,[ 5, 15, 20, undefined, 25, 30, ]], [ 10, 30, 40, undefined, 50, 60 ]]\n    [[true,[ 5, 15, 20, null, 25, 30, ]], [ 10, 30, 40, null, 50, 60 ]]\n    [[false,[ 5, 15, 20, null, 25, 30, ]], [ 10, 30, 40, null, 50, 60 ]]\n    ]\n  #.........................................................................................................\n  remit = ( use_on_end, method ) ->\n    end_sym = Symbol.for 'pipestreams:end'\n    self    = null\n    count   = 0\n    #.....................................................................................................\n    send    = ( d ) ->\n      # debug '20092-1', 'send', rpr d\n      # self.queue if d is null then end_sym else d\n      self.queue d\n    #.....................................................................................................\n    on_data = ( d ) ->\n      # debug '20092-2', 'on_data', rpr d\n      self = @\n      method d, send\n    #.....................................................................................................\n    on_end = ->\n      process.exit 1 if count++ > 10\n      self = @\n      debug '11109', 'on_end'\n      @queue end_sym\n    #.....................................................................................................\n    return through on_data, on_end if use_on_end\n    return through on_data\n    # return through on_data, on_end\n    # return through on_data\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      [ use_on_end, values, ] = probe\n      #.....................................................................................................\n      on_data = ( d ) ->\n        @queue if d? then d * 2 else d\n      #.....................................................................................................\n      on_end = ->\n        @queue null\n      #.....................................................................................................\n      source    = source_from_values values\n      collector = []\n      pipeline  = []\n      pipeline.push source\n      pipeline.push map ( d ) -> info '--->', d; return d\n      pipeline.push remit use_on_end, ( d, send ) -> send if d? then d * 2 else d\n      pipeline.push map ( d ) -> info '--->', d; return d\n      # pipeline.push map ( d ) -> if d? then d * 2 else d\n      # pipeline.push through on_data, on_end\n      pipeline.push map ( d ) -> collector.push d; return d\n      pipeline.push PS.$drain ->\n        help collector\n        resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  null\n  # test @\n  test @[ \"demo through with null\" ]\n\n\n###\nThat covers 3 types of pull streams. Source, Transform, & Sink.\nThere is one more important type, although it's not used as much.\n\nDuplex streams\n\n(see duplex.js!)\n###\n"
  ]
}