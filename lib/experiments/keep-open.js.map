{
  "version": 3,
  "file": "keep-open.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/keep-open.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,CAAF,EAAK,MAAL,CAAA,GAA4B,EAA5B,EAjBA;;;EAmBA,KAAA,GAA4B,QAAA,CAAE,GAAF,EAAO,CAAP,CAAA;WAAc,UAAA,CAAY,CAAZ,EAAe,GAAA,GAAM,IAArB;EAAd;;EAC5B,KAAA,GAA4B,QAAA,CAAE,GAAF,EAAO,CAAP,CAAA;WAAc,WAAA,CAAY,CAAZ,EAAe,GAAA,GAAM,IAArB;EAAd;;EAC5B,KAAA,GAA4B;;EAC5B,CAAA,CAAE,EAAF,EACE,QADF,CAAA,GAC4B,GAD5B,EAtBA;;;EA2BA,iBAAA,GAAoB,MAAA,QAAA,CAAA,CAAA;AAClB,QAAA,cAAA,EAAA,qBAAA,EAAA,wBAAA,EAAA,CAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,YAAA,EAAA;IAAA,CAAA,GAAkB,OAAA,CAAQ,aAAR;IAClB,YAAA,GAAkB,OAAA,CAAQ,cAAR;IAClB,YAAA,GAAkB,OAAA,CAAQ,eAAR;IAClB,GAAA,GAAkB,OAAA,CAAQ,gBAAR;IAClB,OAAA,GAAkB,MAAM,CAAC,GAAP,CAAW,iBAAX,EAJlB;;IAMA,qBAAA,GAAwB,QAAA,CAAA,CAAA;AACtB,UAAA;MAAA,KAAA,GAAQ,KAAA,CAAM,CAAN,EAAS,QAAA,CAAA,CAAA;eAAG,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,GAArB;MAAH,CAAT;MACR,OAAO,CAAC,EAAR,CAAW,oBAAX,EAAkC,QAAA,CAAE,MAAF,EAAU,OAAV,CAAA;QAChC,aAAA,CAAc,KAAd;QACA,MAAM;MAF0B,CAAlC;AAGA,aAAO,GAAA,CAAI,QAAA,CAAE,CAAF,CAAA;QACT,KAAA,CAAM,OAAN,EAAe,CAAf,EAAA;;QAEA,IAAG,CAAA,KAAK,OAAR;UACE,aAAA,CAAc,KAAd,EADF;;AAEA,eAAO;MALE,CAAJ;IALe,EANxB;;IAkBA,wBAAA,GAA2B,QAAA,CAAA,CAAA;AACzB,aAAO,CAAC,CAAC,QAAF,CAAW,QAAA,CAAE,CAAF,EAAK,OAAL,CAAA;QAAkB,IAAG,CAAA,KAAK,OAAR;iBAAqB,OAAA,CAAQ,IAAR,EAArB;SAAA,MAAA;iBAAuC,OAAA,CAAQ,IAAR,EAAc,CAAd,EAAvC;;MAAlB,CAAX;IADkB,EAlB3B;;IAqBA,cAAA,GAAiB,QAAA,CAAA,CAAA;AACf,UAAA,KAAA,EAAA,OAAA,EAAA;MAAA,KAAA,GAAQ;MACR,OAAA,GAAU,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,KAAD,CAAO,CAAP;MAAT;MACV,MAAA,GAAS,QAAA,CAAA,CAAA;QACP,KAAA,IAAS,CAAC;QACV,IAAyD,KAAA,GAAQ,CAAjE;UAAA,MAAM,IAAI,KAAJ,CAAU,qCAAV,EAAN;;QACA,IAAA,CAAK,QAAL;QACA,IAAC,CAAA,KAAD,CAAO,IAAP;eACA,IAAC,CAAA,KAAD,CAAO,OAAP;MALO;AAMT,aAAO,YAAA,CAAa,OAAb,EAAsB,MAAtB;IATQ,EArBjB;;IAgCA,IAAA,GAAO,QAAA,CAAA,CAAA;aAAG,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;AACpB,YAAA,eAAA,EAAA,QAAA,EAAA;QAAA,eAAA,GAAkB,EAAE,CAAC;QACrB,MAAA,GAAkB,eAAA,CAAA;QAClB,QAAA,GAAgB;QAChB,QAAQ,CAAC,IAAT,CAAc,MAAd;QACA,QAAQ,CAAC,IAAT,CAAc,cAAA,CAAA,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,qBAAA,CAAA,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,GAAA,CAAI,QAAA,CAAE,CAAF,CAAA;UAAS,OAAA,CAAQ,CAAR;AAAW,iBAAO;QAA3B,CAAJ,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,QAAF,CAAW,QAAA,CAAE,CAAF,EAAK,OAAL,CAAA;iBACvB,KAAA,CAAM,GAAN,EAAW,QAAA,CAAA,CAAA;mBAAG,OAAA,CAAQ,IAAR,EAAc,CAAd;UAAH,CAAX;QADuB,CAAX,CAAd,EAPA;;QAUA,QAAQ,CAAC,IAAT,CAAc,wBAAA,CAAA,CAAd;QACA,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,KAAF,CAAQ,QAAA,CAAA,CAAA;UAAG,IAAA,CAAK,IAAL;iBAAW,OAAA,CAAA;QAAd,CAAR,CAAd,EAXA;;QAaA,CAAC,CAAC,IAAF,CAAO,GAAA,QAAP;QACA,MAAM,CAAC,IAAP,CAAY,EAAZ;QACA,KAAA,CAAM,GAAN,EAAW,QAAA,CAAA,CAAA;iBAAG,MAAM,CAAC,IAAP,CAAY,IAAZ;QAAH,CAAX;AACA,eAAO;MAjBa,CAAZ;IAAH;IAkBP,MAAM,IAAA,CAAA;AACN,WAAO;EApDW,EA3BpB;;;EAoFA,MAAA,GAAS,MAAA,QAAA,CAAA,CAAA;AAEP,QAAA,IAAA;;IAAA,IAAA,GAAO,QAAA,CAAA,CAAA;aAAG,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,CAAA;AACpB,YAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,YAAA,EAAA,QAAA,EAAA,YAAA,EAAA;QAAA,CAAA,GAAkB,OAAA,CAAQ,aAAR;QAClB,YAAA,GAAkB,OAAA,CAAQ,cAAR;QAClB,YAAA,GAAkB,OAAA,CAAQ,eAAR;QAClB,KAAA,GAAkB,OAAA,CAAQ,YAAR;QAClB,MAAA,GAAkB,EAAE,CAAC,eAAH,CAAA;QAClB,QAAA,GAAkB,EAAE,CAAC,eAAH,CAAA;QAClB,QAAA,GAAkB;QAEF,KAAS,0BAAT,GAAA;;UAAhB,QAAQ,CAAC,IAAT,CAAc,CAAd;QAAgB;QAChB,QAAQ,CAAC,IAAT,CAAc,MAAd;QACA,QAAQ,CAAC,IAAT,CAAiB,CAAA,QAAA,CAAA,CAAA;AACf,cAAA,UAAA,EAAA,WAAA,EAAA,OAAA,EAAA;UAAA,WAAA,GAAc,EAAE,CAAC,eAAH,CAAA;UACd,OAAA,GAAU,GADV;;UAGA,UAAA,GAAa;UAEb,CAAA,GAAI,CAAC;UACL,OAAO,CAAC,IAAR,CAAa,KAAA,CAAM,QAAN,EAAgB,WAAhB,EAA6B,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;mBAAY,CAAA,GAAI,CAAC;UAAjB,CAA7B,CAAb;UACA,OAAO,CAAC,IAAR,CAAa,EAAE,CAAC,KAAH,CAAS;YAAA,KAAA,EAAO;UAAP,CAAT,CAAb;UACA,OAAO,CAAC,IAAR,CAAa,EAAE,CAAC,MAAH,CAAU,QAAA,CAAA,CAAA;mBAAG;UAAH,CAAV,CAAb;UACA,EAAE,CAAC,IAAH,CAAQ,GAAA,OAAR;UACA,WAAW,CAAC,IAAZ,CAAiB,GAAjB;UACA,WAAW,CAAC,IAAZ,CAAiB,GAAjB;UACA,WAAW,CAAC,IAAZ,CAAiB,GAAjB;UACA,KAAA,CAAM,CAAN,EAAS,QAAA,CAAA,CAAA,EAAA,CAAT,EAbA;;AAeA,iBAAO,CAAA,CAAE;YAAE,IAAA,EAAM;UAAR,CAAF,EAAmB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;YACxB,IAAG,SAAH;qBACE,IAAA,CAAK,CAAL,EADF;aAAA,MAAA;qBAGE,IAAA,CAAK,IAAL,EAHF;;UADwB,CAAnB;QAhBQ,CAAA,CAAH,CAAA,CAAd,EAVA;;;;;;;;;;;AAyCA,eAAO;MA1Ca,CAAZ;IAAH;IA2CP,MAAM,IAAA,CAAA;AACN,WAAO;EA9CA,EApFT;;;EAuIA,IAAO,qBAAP;IACK,CAAA,MAAA,QAAA,CAAA,CAAA,EAAA;;aAED,CAAA,MAAM,MAAA,CAAA,CAAN;IAFC,CAAA,CAAH,CAAA,EADF;;AAvIA",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/VARIOUS-PULL-STREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n\n\n#-----------------------------------------------------------------------------------------------------------\ntest_continuity_1 = ->\n  P               = require 'pull-stream'\n  pull_through    = require 'pull-through'\n  new_pushable    = require 'pull-pushable'\n  map             = require '../_map_errors'\n  end_sym         = Symbol.for 'pipestreams:end'\n  #.........................................................................................................\n  $keep_open_with_timer = ->\n    timer = every 1, -> process.stdout.write '*'\n    process.on 'unhandledRejection',  ( reason, promise ) ->\n      clearInterval timer\n      throw reason\n    return map ( d ) ->\n      debug '20922', d\n      # debug '20922', send\n      if d is end_sym\n        clearInterval timer\n      return d\n  #.........................................................................................................\n  $terminate_on_end_symbol = ->\n    return P.asyncMap ( d, handler ) -> if d is end_sym then handler true else handler null, d\n  #.........................................................................................................\n  $end_as_symbol = ->\n    count = 0\n    on_data = ( d ) -> @queue d\n    on_end = ->\n      count += +1\n      throw new Error \"Âµ30903 on_end called more than once\" if count > 1\n      help 'on_end'\n      @queue 'yo'\n      @queue end_sym\n    return pull_through on_data, on_end\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    new_PS_pushable = PS.new_push_source\n    source          = new_PS_pushable()\n    pipeline      = []\n    pipeline.push source\n    pipeline.push $end_as_symbol()\n    pipeline.push $keep_open_with_timer()\n    pipeline.push map ( d ) -> whisper d; return d\n    pipeline.push P.asyncMap ( d, handler ) ->\n      after 0.1, -> handler null, d\n    ### Convert end symbol to actual end action ###\n    pipeline.push $terminate_on_end_symbol()\n    pipeline.push P.onEnd -> help 'ok'; resolve()\n    #.......................................................................................................\n    P.pull pipeline...\n    source.send 42\n    after 0.5, -> source.send null\n    return null\n  await demo()\n  return null\n\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_x = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    P               = require 'pull-stream'\n    pull_through    = require 'pull-through'\n    new_pushable    = require 'pull-pushable'\n    merge           = require 'pull-merge'\n    source          = PS.new_push_source()\n    bysource        = PS.new_push_source()\n    pipeline        = []\n    # pipeline.push P.values [ 1 .. 3 ]\n    bysource.send n for n in [ 1 .. 5 ]\n    pipeline.push source\n    pipeline.push do ->\n      othersource = PS.new_push_source()\n      subline = []\n      # subline.push merge bysource, othersource, ( -> -1 )\n      next_value = null\n\n      x = +1\n      subline.push merge bysource, othersource, ( a, b ) -> x = -x\n      subline.push PS.$show title: 'subline'\n      subline.push PS.$drain -> \"subline terminated\"\n      PS.pull subline...\n      othersource.send 'a'\n      othersource.send 'b'\n      othersource.send 'c'\n      after 5, ->\n      # othersource.end()\n      return $ { last: null, }, ( d, send ) ->\n        if d?\n          send d\n        else\n          info 'ok'\n    # pipeline.push P.asyncMap ( d, handler ) ->\n    #   after 0.1, -> handler null, d\n    # pipeline.push PS.$show title: '-->'\n    # pipeline.push P.onEnd -> help 'ok'; resolve()\n    # # pipeline.push P.drain -> help 'ok'; resolve()\n    # P.pull pipeline...\n    # source.send 108\n    # # source.end()\n    # after 0.5, -> source.send null\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  do ->\n    # await test_continuity_1()\n    await demo_x()\n\n\n\n\n\n"
  ]
}