{
  "version": 3,
  "file": "logging.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/logging.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/PULL-STREAM-EXAMPLES-PULL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\ntest                      = require 'guy-test'\nassign                    = Object.assign\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nSTACKTRACE                = require 'stack-trace' ### https://github.com/felixge/node-stack-trace ###\nget_source                = require 'get-source' ### https://github.com/xpl/get-source ###\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_source_ref = ( delta, prefix, color ) ->\n  trace           = STACKTRACE.get()[ delta + 1 ]\n  js_filename     = trace.getFileName()\n  js_line_nr      = trace.getLineNumber()\n  js_column_nr    = trace.getColumnNumber()\n  target          = ( get_source js_filename ).resolve { line: js_line_nr, column: js_column_nr, }\n  target_column   = target.column\n  target_line     = target.sourceLine[ target_column .. ]\n  target_line     = target_line.replace /^\\s*(.*?)\\s*$/g, '$1'\n  target_path     = target.sourceFile.path\n  display_path    = target_path.replace /\\.[^.]+$/, ''\n  display_path    = '...' + display_path[ display_path.length - 10 .. ]\n  target_line_nr  = target.line\n  ### TAINT use tabular as in old pipedreams ###\n  R               = \"#{CND.gold prefix} #{CND.grey display_path} #{CND.white target_line_nr} #{CND[ color ] target_line}\"\n  return R.padEnd 150, ' '\n\n#-----------------------------------------------------------------------------------------------------------\nget_logger = ( letter, color ) ->\n  transform_nr = 0\n  return ( transform ) ->\n    transform_nr   += +1\n    prefix          = \"#{CND[ color ] CND.reverse '  '} #{CND[ color ] letter + transform_nr}\"\n    source_ref      = get_source_ref 1, prefix, color\n    pipeline        = []\n    leader          = '  '.repeat transform_nr\n    echo source_ref\n    if transform.source? and transform.sink?\n      throw new Error \"unable to use logging with duplex stream\"\n    switch transform.length\n      when 0\n        pipeline.push transform\n        pipeline.push PS.$watch ( d ) -> echo \"#{prefix}#{leader}#{xrpr d}\"\n      when 1\n        if transform_nr is 1\n          pipeline.push PS.$watch ( d ) -> echo '-'.repeat 108\n        pipeline.push PS.$watch ( d ) -> echo \"#{prefix}#{leader}#{CND[ color ] CND.reverse '  '} #{xrpr d}\"\n        pipeline.push transform\n        pipeline.push PS.$watch ( d ) -> echo \"#{prefix}#{leader}#{CND[ color ] CND.reverse '  '} #{xrpr d}\"\n    return PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo through with null\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    # [[ 5, 15, 20, undefined, 25, 30, ], [ 10, 30, 40, undefined, 50, 60 ]]\n    [[1,2,3,null,4,5],[2,6,4,6,null,null,12,8,10],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      is_odd    = ( d ) -> ( d %% 2 ) isnt 0\n      bylog     = get_logger 'b', 'red'\n      mainlog   = get_logger 'm', 'gold'\n      #.....................................................................................................\n      # source    = PS.new_value_source probe\n      source    = PS.new_random_async_value_source probe\n      collector = []\n      byline    = []\n      byline.push bylog PS.$pass()\n      byline.push PS.$filter ( d ) -> d %% 2 is 0\n      byline.push $ ( d, send ) -> send if d? then d * 3 else d\n      # byline.push PS.$watch ( d ) -> info xrpr d\n      byline.push bylog PS.$pass()\n      byline.push PS.$collect { collector, }\n      byline.push bylog PS.$pass()\n      byline.push PS.$drain()\n      bystream  = PS.pull byline...\n      mainline  = []\n      mainline.push source\n      # mainline.push log PS.$watch ( d ) -> info '--->', d\n      mainline.push mainlog PS.$tee bystream\n      mainline.push mainlog PS.$defer()\n      mainline.push mainlog $ ( d, send ) -> send if d? then d * 2 else d\n      # mainline.push mainlog PS.$tee is_odd, PS.pull byline...\n      mainline.push mainlog PS.$collect { collector, }\n      mainline.push mainlog PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"circular pipeline 1\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    # [[ 5, 15, 20, undefined, 25, 30, ], [ 10, 30, 40, undefined, 50, 60 ]]\n    # [[1,2,3,4,5],[2,6,4,6,null,null,12,8,10],null]\n    [[3,4],[3,4,10,2,5,1,16,8,4,2,1],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #-----------------------------------------------------------------------------------------------------\n      bylog                   = get_logger 'b', 'red'\n      mainlog                 = get_logger 'm', 'gold'\n      #.....................................................................................................\n      use_defer               = true\n      buffer                  = [ probe..., ]\n      mainsource              = PS.new_refillable_source buffer, { repeat: 1, }\n      collector               = []\n      mainline                = []\n      mainline.push mainsource\n      mainline.push mainlog PS.$defer() if use_defer\n      mainline.push mainlog $ ( d, send ) ->\n        if d > 1\n          if d %% 2 is 0 then buffer.push d / 2\n          else                buffer.push d * 3 + 1\n        send d\n        # send PS.symbols.end if d is 1\n      mainline.push mainlog PS.$collect { collector, }\n      mainline.push mainlog PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n      # mainsource.send 3\n      # mainsource.end()\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"circular pipeline 2\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    # [[ 5, 15, 20, undefined, 25, 30, ], [ 10, 30, 40, undefined, 50, 60 ]]\n    # [[1,2,3,4,5],[2,6,4,6,null,null,12,8,10],null]\n    [[3,4],[3,4,10,2,5,1,16,8,4,2,1],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      get_source = ->\n        loop\n          yield Symbol.for 'tick'\n        return null\n      #-----------------------------------------------------------------------------------------------------\n      bylog                   = get_logger 'b', 'red'\n      mainlog                 = get_logger 'm', 'gold'\n      #.....................................................................................................\n      use_defer               = true\n      collector               = []\n      mainline                = []\n      mainline.push PS.new_generator_source get_source()\n      mainline.push PS.$defer() if use_defer\n      mainline.push PS.$watch ( d ) -> urge xrpr d\n      # mainline.push $ ( d, send ) ->\n      #   if d > 1\n      #     if d %% 2 is 0 then buffer.push d / 2\n      #     else                buffer.push d * 3 + 1\n      #   send d\n      #   # send PS.symbols.end if d is 1\n      mainline.push PS.$collect { collector, }\n      # mainline.push mainlog PS.$drain ->\n      mainline.push PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"duplex\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[1,2,3,4,5],[11,12,13,14,15],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      bylog         = get_logger 'b', 'red'\n      mainlog       = get_logger 'm', 'gold'\n      mainsource    = PS.new_value_source probe\n      collector     = []\n      mainline      = []\n      # duplexsource = PS.new_push_source()\n      stream_a = PS.pull ( bylog $ ( d, send ) -> send d * 3 )\n      stream_b = PS.pull ( bylog $ ( d, send ) -> send d * 2 )\n      stream_c = { source: stream_a, sink: stream_b, }\n      #.....................................................................................................\n      mainline.push mainsource\n      mainline.push mainlog stream_c\n      # mainline.push mainlog stream_c\n      # # mainline.push mainlog PS.$defer()\n      # mainline.push mainlog PS.$pass()\n      # mainline.push mainlog $ ( d, send ) -> send d + 10\n      # # mainline.push mainlog $async ( d, send, done ) -> send d + 10; done()\n      mainline.push mainlog PS.$watch ( d ) -> collector.push d\n      mainline.push mainlog PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull mainline...\n  #.........................................................................................................\n  done()\n  return null\n\n###\nDuplex streams are used to communicate with a remote service,\nand they are a pair of source and sink streams `{source, sink}`\n\nin node, you see duplex streams to connect replication or rpc protocols.\nclient.pipe(server).pipe(client)\nor\nserver.pipe(client).pipe(server)\nboth do the same thing.\n\nthe pull function we wrote before doesn't detect this,\nbut if you use the pull-stream module it will.\nThen we can pipe duplex pull-streams like this:\n\nvar pull = require('pull-stream')\npull(client, server, client)\n\nAlso, sometimes you'll need to interact with a regular node stream.\nthere are two modules for this.\n\nstream-to-pull-stream\nand\npull-stream-to-stream\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_duplex 1\" ] = ->\n  NET           = require 'net'\n  toPull        = require 'stream-to-pull-stream'\n  pull          = require 'pull-stream'\n  bylog         = get_logger 'b', 'red'\n  mainlog       = get_logger 'm', 'gold'\n  #.........................................................................................................\n  server_as_duplex_stream = ( nodejs_stream ) ->\n    ### convert into a duplex pull-stream ###\n    server_stream = toPull.duplex nodejs_stream\n    pipeline      = []\n    pipeline.push server_stream\n    pipeline.push bylog PS.$split()\n    pipeline.push bylog pull.map ( x ) -> x.toString().toUpperCase() + '!!!'\n    # pipeline.push server_stream\n    pipeline.push bylog pull.map ( x ) -> \"*#{x}*\"\n    pipeline.push bylog PS.$as_line()\n    pipeline.push PS.$watch ( d ) -> debug '32387', xrpr d\n    pipeline.push server_stream\n    # pipeline.push PS.$watch ( d ) -> console.log d.toString()\n    # pipeline.push bylog PS.$drain()\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server = NET.createServer server_as_duplex_stream\n  listener = ->\n    client_stream = toPull.duplex NET.connect 9999\n    pipeline      = []\n    pipeline.push PS.new_random_async_value_source [ 'quiet stream\\n', 'great thing\\n', ]\n    # pipeline.push PS.new_value_source [ 'quiet stream\\n', 'great thing\\n', ]\n    pipeline.push client_stream\n    pipeline.push mainlog PS.$split()\n    pipeline.push mainlog PS.$drain ->\n      help 'ok'\n      server.close()\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server.listen 9999, listener\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_duplex 2\" ] = ->\n  NET           = require 'net'\n  toPull        = require 'stream-to-pull-stream'\n  pull          = require 'pull-stream'\n  bylog         = get_logger 'b', 'red'\n  mainlog       = get_logger 'm', 'gold'\n  #.........................................................................................................\n  server_as_duplex_stream = ( nodejs_stream ) ->\n    ### convert into a duplex pull-stream ###\n    server_stream = toPull.duplex nodejs_stream\n    pipeline      = []\n    pipeline.push server_stream\n    pipeline.push bylog PS.$split()\n    pipeline.push bylog pull.map ( x ) -> x.toString().toUpperCase() + '!!!'\n    # pipeline.push server_stream\n    pipeline.push bylog pull.map ( x ) -> \"*#{x}*\"\n    pipeline.push bylog PS.$as_line()\n    pipeline.push PS.$watch ( d ) -> debug '32387', xrpr d\n    pipeline.push server_stream\n    # pipeline.push PS.$watch ( d ) -> console.log d.toString()\n    # pipeline.push bylog PS.$drain()\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server = NET.createServer server_as_duplex_stream\n  listener = ->\n    client_stream = toPull.duplex NET.connect 9999\n    pipeline      = []\n    pipeline.push PS.new_random_async_value_source [ 'quiet stream\\n', 'great thing\\n', ]\n    # pipeline.push PS.new_value_source [ 'quiet stream\\n', 'great thing\\n', ]\n    pipeline.push client_stream\n    pipeline.push mainlog PS.$split()\n    pipeline.push mainlog PS.$drain ->\n      help 'ok'\n      server.close()\n    PS.pull pipeline...\n    return null\n  #.........................................................................................................\n  server.listen 9999, listener\n\n\n\n############################################################################################################\nunless module.parent?\n  null\n  # test @\n  # test @[ \"circular pipeline 1\" ], { timeout: 5000, }\n  test @[ \"circular pipeline 2\" ], { timeout: 5000, }\n  # test @[ \"duplex\" ]\n  # @[ \"_duplex 1\" ]()\n  # @[ \"_duplex 2\" ]()\n\n"
  ]
}