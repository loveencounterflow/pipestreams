{
  "version": 3,
  "file": "logging.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/logging.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/PULL-STREAM-EXAMPLES-PULL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\ntest                      = require 'guy-test'\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nSTACKTRACE                = require 'stack-trace' ### https://github.com/felixge/node-stack-trace ###\nget_source                = require 'get-source' ### https://github.com/xpl/get-source ###\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_source_ref = ( delta, color ) ->\n  trace           = STACKTRACE.get()[ delta + 1 ]\n  js_filename     = trace.getFileName()\n  js_line_nr      = trace.getLineNumber()\n  js_column_nr    = trace.getColumnNumber()\n  target          = ( get_source js_filename ).resolve { line: js_line_nr, column: js_column_nr, }\n  target_column   = target.column\n  target_line     = target.sourceLine[ target_column .. ]\n  target_line     = target_line.replace /^\\s*(.*?)\\s*$/g, '$1'\n  target_path     = target.sourceFile.path\n  display_path    = target_path.replace /\\.[^.]+$/, ''\n  display_path    = '...' + display_path[ display_path.length - 10 .. ]\n  target_line_nr  = target.line\n  ### TAINT use tabular as in old pipedreams ###\n  R               = ( CND.grey display_path ) + ' ' + ( CND.white target_line_nr ) + ' ' + ( CND[ color ] target_line )\n  return R.padEnd 150, ' '\n\n#-----------------------------------------------------------------------------------------------------------\nget_logger = ( color ) ->\n  is_first_transform = true\n  return ( transform ) ->\n    source_ref = get_source_ref 1, color\n    pipeline      = []\n    switch transform.length\n      when 0\n        pipeline.push transform\n        pipeline.push PS.$watch ( d ) -> echo source_ref, xrpr d\n      when 1\n        if is_first_transform\n          is_first_transform = false\n          pipeline.push PS.$watch ( d ) -> echo '-'.repeat 108\n        pipeline.push PS.$watch ( d ) -> echo source_ref, '->', ( xrpr d ), '  '\n        pipeline.push transform\n        # pipeline.push PS.$watch ( d ) -> echo source_ref, '  ', ( xrpr d ), '->'\n    return PS.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo through with null\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    # [[ 5, 15, 20, undefined, 25, 30, ], [ 10, 30, 40, undefined, 50, 60 ]]\n    [[1,2,3,null,4,5],[2,4,6,null,8,10],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      is_odd    = ( d ) -> ( d %% 2 ) isnt 0\n      bylog     = get_logger 'lime'\n      mainlog   = get_logger 'yellow'\n      #.....................................................................................................\n      source    = PS.new_value_source probe\n      # source    = PS.new_random_async_value_source probe\n      collector = []\n      byline    = []\n      byline.push bylog PS.$filter ( d ) -> d %% 2 is 0\n      byline.push bylog $ ( d, send ) -> send if d? then d * 3 else d\n      # byline.push bylog PS.$watch ( d ) -> info xrpr d\n      byline.push bylog PS.$drain()\n      bystream  = PS.pull byline...\n      pipeline  = []\n      pipeline.push source\n      # pipeline.push log PS.$watch ( d ) -> info '--->', d\n      pipeline.push mainlog PS.$tee bystream\n      pipeline.push mainlog $ ( d, send ) -> send if d? then d * 2 else d\n      # pipeline.push mainlog PS.$tee is_odd, PS.pull byline...\n      pipeline.push mainlog PS.$collect { collector, }\n      pipeline.push PS.$drain ->\n        help collector\n        resolve collector\n      PS.pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  null\n  test @\n\n\n###\nThat covers 3 types of pull streams. Source, Transform, & Sink.\nThere is one more important type, although it's not used as much.\n\nDuplex streams\n\n(see duplex.js!)\n###\n"
  ]
}