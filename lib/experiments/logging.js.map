{
  "version": 3,
  "file": "logging.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/logging.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/PULL-STREAM-EXAMPLES-PULL'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n#...........................................................................................................\nPS                        = require '../..'\ntest                      = require 'guy-test'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo through with null\" ] = ( T, done ) ->\n  # through = require 'pull-through'\n  probes_and_matchers = [\n    [[ 5, 15, 20, undefined, 25, 30, ], [ 10, 30, 40, undefined, 50, 60 ]]\n    [[ 5, 15, 20, null, 25, 30, ], [ 10, 30, 40, null, 50, 60 ]]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      #.....................................................................................................\n      source    = source_from_values probe\n      collector = []\n      pipeline  = []\n      pipeline.push source\n      pipeline.push map ( d ) -> info '--->', d; return d\n      pipeline.push PS.$ ( d, send ) -> send if d? then d * 2 else d\n      # pipeline.push map ( d ) -> collector.push d; return d\n      pipeline.push PS.$collect { collector, }\n      pipeline.push PS.$drain ->\n        help collector\n        resolve collector\n      pull pipeline...\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  null\n  test @\n\n\n###\nThat covers 3 types of pull streams. Source, Transform, & Sink.\nThere is one more important type, although it's not used as much.\n\nDuplex streams\n\n(see duplex.js!)\n###\n"
  ]
}