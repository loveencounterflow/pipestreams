{
  "version": 3,
  "file": "various-pull-streams.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/various-pull-streams.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/VARIOUS-PULL-STREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n\n# https://pull-stream.github.io/#pull-through\n# nope https://github.com/dominictarr/pull-flow (https://github.com/pull-stream/pull-stream/issues/4)\n\n# https://github.com/pull-stream/pull-cont\n# https://github.com/pull-stream/pull-defer\n# https://github.com/scrapjs/pull-imux\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_merge_1 = ->\n  ### https://github.com/pull-stream/pull-merge ###\n  pull      = require 'pull-stream'\n  merge     = require 'pull-merge'\n  pipeline  = []\n  # pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [ 2, 4, 7, ] )\n  # pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [ 2, 4, 7, 10, 11, 12, ] )\n  # pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [] )\n  # pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [ 1, 5, 6, ] )\n  # pipeline.push merge ( pull.values [ [1], [5], [6], ] ), ( pull.values [ [1], [5], [6], [7], ] )\n  x = +1\n  pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [ 20, 19, 18, 17, ] ), ( a, b ) -> x = -x\n  pipeline.push pull.collect ( error, collector ) ->\n    throw error if error?\n    help collector\n  pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_async_source = ( name ) ->\n    source    = PS.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$watch ( d ) -> urge name, jr d\n    R         = PS.pull pipeline...\n    R.push    = ( x ) -> source.push x\n    R.end     = -> source.end()\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_merge_async_sources = ->\n  ### won't take all inputs from both sources ###\n  merge     = require 'pull-merge'\n  source_1 = new_async_source 's1'\n  source_2 = new_async_source 's2'\n  return new Promise ( resolve ) ->\n    pipeline  = []\n    pipeline.push merge source_2, source_1, ( a, b ) -> -1\n    pipeline.push PS.$watch ( d ) -> help '-->', jr d\n    pipeline.push PS.$drain ->\n      help 'ok'\n      resolve null\n    PS.pull pipeline...\n    after 0.1, -> source_2.push 4\n    after 0.2, -> source_2.push 5\n    after 0.3, -> source_2.push 6\n    after 0.4, -> source_1.push 1\n    after 0.5, -> source_1.push 2\n    after 0.6, -> source_1.push 3\n    # after 1.0, -> source_1.push null\n    # after 1.0, -> source_2.push null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_mux_async_sources_1 = ->\n  mux = require 'pull-mux' ### https://github.com/nichoth/pull-mux ###\n  #.........................................................................................................\n  $_mux = ( sources... ) ->\n    R = {}\n    for source, idx in sources\n      R[ idx ] = source\n    return mux R\n  #.........................................................................................................\n  $_demux = ->\n    return PS.$map ( [ k, v, ] ) -> v\n  #.........................................................................................................\n  return new Promise ( resolve ) ->\n    pipeline  = []\n    source_1  = new_async_source 's1'\n    source_2  = new_async_source 's2'\n    pipeline.push $_mux source_1, source_2\n    pipeline.push $_demux()\n    pipeline.push PS.$collect()\n    pipeline.push PS.$watch ( d ) -> help '-->', jr d\n    pipeline.push PS.$drain ->\n      help 'ok'\n      resolve null\n    PS.pull pipeline...\n    after 0.1, -> source_2.push 4\n    after 0.5, -> source_1.push 2\n    after 0.6, -> source_1.push 3\n    after 0.2, -> source_2.push 5\n    after 0.3, -> source_2.push 6\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.05, -> source_2.push 42\n    after 1.0, -> source_1.end()\n    after 1.0, -> source_2.end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_mux_async_sources_2 = ->\n  mux = require 'pull-mux' ### https://github.com/nichoth/pull-mux ###\n  #-----------------------------------------------------------------------------------------------------------\n  PS.$wye = ( sources... ) ->\n    #.........................................................................................................\n    $_mux = ( sources... ) ->\n      R = {}\n      R[ idx ] = source for source, idx in sources\n      return mux R\n    #.........................................................................................................\n    $_demux = -> PS.$map ( [ k, v, ] ) -> v\n    #.........................................................................................................\n    pipeline  = []\n    pipeline.push $_mux sources...\n    pipeline.push $_demux()\n    return PS.pull pipeline...\n  #.........................................................................................................\n  return new Promise ( resolve ) ->\n    pipeline  = []\n    source_1  = new_async_source 's1'\n    source_2  = new_async_source 's2'\n    pipeline.push PS.$wye source_1, source_2\n    pipeline.push PS.$collect()\n    pipeline.push PS.$watch ( d ) -> help '-->', jr d\n    pipeline.push PS.$drain ->\n      help 'ok'\n      resolve null\n    PS.pull pipeline...\n    after 0.1, -> source_2.push 4\n    after 0.5, -> source_1.push 2\n    after 0.6, -> source_1.push 3\n    after 0.2, -> source_2.push 5\n    after 0.3, -> source_2.push 6\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.05, -> source_2.push 42\n    after 1.0, -> source_1.end()\n    after 1.0, -> source_2.end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_through = ->\n  through = require 'pull-through' ### https://github.com/pull-stream/pull-through ###\n\n#-----------------------------------------------------------------------------------------------------------\nasync_with_end_detection = ->\n  buffer    = [ 11 .. 15 ]\n  pipeline  = []\n  send      = null\n  flush     = => send buffer.pop() while not is_empty buffer\n  pipeline.push PS.new_value_source [ 1 .. 5 ]\n  pipeline.push PS.$defer()\n  #.........................................................................................................\n  pipeline.push do =>\n    is_first = true\n    return $ { last: PS.symbols.last, }, ( d, send ) =>\n      if is_first\n        is_first = false\n        send PS.symbols.first\n      send d\n  #.........................................................................................................\n  pipeline.push PS.$async ( d, _send, done ) =>\n    send = _send\n    switch d\n      when PS.symbols.first\n        debug 'start'\n        send buffer.pop()\n        done()\n      when PS.symbols.last\n        flush()\n        debug 'end'\n        # done()\n        after 2, done\n      else\n        send d\n        done()\n    return null\n  #.........................................................................................................\n  pipeline.push PS.$show()\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nasync_with_end_detection_2 = ->\n  buffer    = [ 11 .. 15 ]\n  pipeline  = []\n  send      = null\n  flush     = => send buffer.pop() while not is_empty buffer\n  #.........................................................................................................\n  pipeline.push PS.new_value_source [ 1 .. 5 ]\n  pipeline.push PS.$defer()\n  #.........................................................................................................\n  pipeline.push PS.$async 'null', ( d, _send, done ) =>\n    send = _send\n    if d?\n      send d\n      done()\n    else\n      flush()\n      debug 'end'\n      # done()\n      after 2, done\n    return null\n  #.........................................................................................................\n  pipeline.push PS.$show()\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nsync_with_first_and_last = ->\n  drainer   = -> help 'ok'\n  pipeline  = []\n  pipeline.push PS.new_value_source [ 1 .. 5 ]\n  #.........................................................................................................\n  pipeline.push PS.$surround { first: '[', last: ']', before: '(', between: ',', after: ')' }\n  pipeline.push PS.$surround { first: 'first', last: 'last', }\n  # pipeline.push PS.$surround { first: 'first', last: 'last', before: 'before', between: 'between', after: 'after' }\n  # pipeline.push PS.$surround { first: '[', last: ']', }\n  #.........................................................................................................\n  pipeline.push PS.$collect()\n  pipeline.push $ ( d, send ) -> send ( x.toString() for x in d ).join ''\n  pipeline.push PS.$show()\n  pipeline.push PS.$drain drainer\n  PS.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nasync_with_first_and_last = ->\n  drainer   = -> help 'ok'\n  pipeline  = []\n  pipeline.push PS.new_value_source [ 1 .. 3 ]\n  #.........................................................................................................\n  pipeline.push PS.$surround { first: 'first', last: 'last', }\n  pipeline.push $async { first: '[', last: ']', between: '|', }, ( d, send, done ) =>\n    defer ->\n      # debug '22922', jr d\n      send d\n      done()\n  #.........................................................................................................\n  # pipeline.push PS.$watch ( d ) -> urge '20292', d\n  pipeline.push PS.$collect()\n  pipeline.push $ ( d, send ) -> send ( x.toString() for x in d ).join ''\n  pipeline.push PS.$show()\n  pipeline.push PS.$drain drainer\n  PS.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\npull_pair_1 = ->\n  new_pair    = require 'pull-pair'\n  pair        = new_pair()\n  pipeline_1  = []\n  pipeline_2  = []\n  #.........................................................................................................\n  # read values into this sink...\n  pipeline_1.push PS.new_value_source [ 1, 2, 3, ]\n  pipeline_1.push PS.$watch ( d ) -> urge d\n  pipeline_1.push pair.sink\n  PS.pull pipeline_1...\n  #.........................................................................................................\n  # but that should become the source over here.\n  pipeline_2.push pair.source\n  pipeline_2.push PS.$collect()\n  pipeline_2.push PS.$show()\n  pipeline_2.push PS.$drain()\n  #.........................................................................................................\n  PS.pull pipeline_2...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\npull_pair_2 = ->\n  new_pair    = require 'pull-pair'\n  #.........................................................................................................\n  f = ->\n    pair        = new_pair()\n    pushable    = PS.new_push_source()\n    pipeline_1  = []\n    #.......................................................................................................\n    pipeline_1.push pair.source\n    pipeline_1.push PS.$surround before: '(', after: ')', between: '-'\n    pipeline_1.push PS.$join()\n    pipeline_1.push PS.$show title: 'substream'\n    pipeline_1.push PS.$watch ( d ) -> pushable.push d\n    pipeline_1.push PS.$drain()\n    #.......................................................................................................\n    PS.pull pipeline_1...\n    return { sink: pair.sink, source: pushable, }\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push PS.new_value_source \"just a few words\".split /\\s/\n  pipeline.push PS.$watch ( d ) -> whisper d\n  pipeline.push f()\n  pipeline.push PS.$show title: 'mainstream'\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_3b = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    bysource  = PS.new_push_source()\n    byline    = []\n    byline.push bysource\n    byline.push $ ( d, send ) ->\n      if CND.isa_text d\n        send d.length\n      else\n        send d\n      return null\n    byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n    #.......................................................................................................\n    mainline = []\n    mainline.push PS.new_random_async_value_source \"just a few words\".split /\\s/\n    mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PS.$wye PS.pull byline...\n    mainline.push $ ( d, send ) ->\n      if CND.isa_text d\n        bysource.send d\n        send d\n      else\n        send d\n      return null\n    mainline.push PS.$show title: 'confluence'\n    mainline.push PS.$collect()\n    mainline.push PS.$show title: 'mainstream'\n    mainline.push PS.$drain -> help 'ok'; resolve()\n    PS.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_4 = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    bysource  = PS.new_push_source()\n    byline    = []\n    byline.push bysource\n    byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n    bystream = PS.pull byline...\n    #.......................................................................................................\n    mainline = []\n    mainline.push PS.new_value_source [ 5, 7, ]\n    mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PS.$wye bystream\n    mainline.push PS.$show title: 'confluence'\n    mainline.push $ ( d, send ) ->\n      if d < 1.001\n        send null\n      else\n        send d\n        bysource.send Math.sqrt d\n    mainline.push PS.$map ( d ) -> d.toFixed 3\n    mainline.push PS.$collect()\n    mainline.push PS.$show title: 'mainstream'\n    mainline.push PS.$drain -> help 'ok'; resolve()\n    PS.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nduplex_stream_3 = ->\n  new_duplex_pair     = require 'pull-pair/duplex'\n  [ client, server, ] = new_duplex_pair()\n  pipeline_1          = []\n  pipeline_2          = []\n  #.........................................................................................................\n  pipeline_1.push PS.new_value_source [ 1, 2, 3, ]\n  pipeline_1.push client\n  pipeline_1.push PS.$collect()\n  pipeline_1.push PS.$show()\n  # pipeline_1.push client\n  pipeline_1.push PS.$drain()\n  PS.pull pipeline_1...\n  #.........................................................................................................\n  # pipe the second duplex stream back to itself.\n  pipeline_2.push server\n  pipeline_2.push PS.$watch ( d ) -> urge d\n  pipeline_2.push $ ( d, send ) -> send d * 10\n  pipeline_2.push server\n  PS.pull pipeline_2...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_1 = ->\n  new_pair    = require 'pull-pair'\n  #.........................................................................................................\n  $wye = ( bystream ) ->\n    pair        = new_pair()\n    pushable    = PS.new_push_source()\n    pipeline_1  = []\n    pipeline_2  = []\n    #.......................................................................................................\n    pipeline_1.push pair.source\n    pipeline_1.push PS.$surround before: '(', after: ')', between: '-'\n    # pipeline_1.push PS.$join()\n    pipeline_1.push PS.$show title: 'substream'\n    pipeline_1.push PS.$watch ( d ) -> pushable.push d\n    pipeline_1.push PS.$drain -> urge \"substream ended\"\n    #.......................................................................................................\n    pipeline_2.push bystream\n    pipeline_2.push $ { last: null, }, ( d, send ) -> urge \"bystream ended\" unless d?; send d\n    pipeline_2.push PS.$show title: 'bystream'\n    #.......................................................................................................\n    PS.pull pipeline_1...\n    confluence = PS.$merge pushable, PS.pull pipeline_2...\n    return { sink: pair.sink, source: confluence, }\n  #.........................................................................................................\n  bysource = PS.new_value_source [ 3 .. 7 ]\n  pipeline = []\n  pipeline.push PS.new_value_source \"just a few words\".split /\\s/\n  # pipeline.push PS.$watch ( d ) -> whisper d\n  pipeline.push $wye bysource\n  pipeline.push PS.$collect()\n  pipeline.push PS.$show title: 'mainstream'\n  pipeline.push PS.$drain -> help 'ok'\n  PS.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_2 = ->\n  new_pair    = require 'pull-pair'\n  #.........................................................................................................\n  $wye = ( bystream ) ->\n    pair              = new_pair()\n    pushable          = PS.new_push_source()\n    subline           = []\n    byline            = []\n    end_sym           = Symbol 'end'\n    bystream_ended    = false\n    substream_ended   = false\n    #.......................................................................................................\n    subline.push pair.source\n    subline.push $ { last: end_sym, }, ( d, send ) ->\n      if d is end_sym\n        substream_ended = true\n        pushable.end() if bystream_ended\n      else\n        pushable.push d\n    subline.push PS.$drain()\n    #.......................................................................................................\n    byline.push bystream\n    byline.push $ { last: end_sym, }, ( d, send ) ->\n      if d is end_sym\n        bystream_ended = true\n        pushable.end() if substream_ended\n      else\n        send d\n    #.......................................................................................................\n    PS.pull subline...\n    confluence = PS.$merge pushable, PS.pull byline...\n    return { sink: pair.sink, source: confluence, }\n  #.........................................................................................................\n  demo = ->\n    return new Promise ( resolve ) ->\n      byline = []\n      byline.push PS.new_value_source [ 3 .. 7 ]\n      byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n      #.......................................................................................................\n      mainline = []\n      mainline.push PS.new_value_source \"just a few words\".split /\\s/\n      mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n      mainline.push $wye PS.pull byline...\n      mainline.push PS.$collect()\n      mainline.push PS.$show title: 'mainstream'\n      mainline.push PS.$drain -> help 'ok'; resolve()\n      PS.pull mainline...\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_with_random_value_source = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    byline    = []\n    byline.push PS.new_random_async_value_source 0.1, [ 3 .. 8 ]\n    byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n    #.......................................................................................................\n    mainline = []\n    mainline.push PS.new_random_async_value_source \"just a few words\".split /\\s/\n    mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PS.$wye PS.pull byline...\n    mainline.push PS.$show title: 'confluence'\n    mainline.push PS.$collect()\n    mainline.push PS.$show title: 'mainstream'\n    mainline.push PS.$drain -> help 'ok'; resolve()\n    PS.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_with_value_source = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    byline    = []\n    byline.push PS.new_value_source [ 3 .. 8 ]\n    byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n    #.......................................................................................................\n    mainline = []\n    mainline.push PS.new_random_async_value_source \"just a few words\".split /\\s/\n    mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PS.$wye PS.pull byline...\n    mainline.push PS.$show title: 'confluence'\n    mainline.push PS.$collect()\n    mainline.push PS.$show title: 'mainstream'\n    mainline.push PS.$drain -> help 'ok'; resolve()\n    PS.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_with_external_push_source = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    bysource  = PS.new_push_source ( error ) -> debug '10203', \"Bysource ended\"\n    byline    = []\n    byline.push bysource\n    byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n    #.......................................................................................................\n    mainline = []\n    mainline.push PS.new_random_async_value_source \"just a few words\".split /\\s/\n    mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PS.$wye PS.pull byline...\n    mainline.push PS.$show title: 'confluence'\n    mainline.push PS.$collect()\n    mainline.push PS.$show title: 'mainstream'\n    mainline.push PS.$drain -> help 'ok'; resolve()\n    PS.pull mainline...\n    for x in [ 3 .. 8 ]\n      bysource.send x\n    bysource.send null\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_with_internal_push_source = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    tick = ->\n      process.stdout.write '*'\n      after 0.5, tick\n      return null\n    after 0.5, tick\n    #.......................................................................................................\n    bysource  = PS.new_push_source ( error ) -> debug '10203', \"Bysource ended\"\n    # bysource  = PS.new_push_source()\n    byline    = []\n    byline.push bysource\n    byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n    #.......................................................................................................\n    mainline = []\n    mainline.push PS.new_random_async_value_source \"just a few words\".split /\\s/\n    mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PS.$wye PS.pull byline...\n    mainline.push $async ( d, send, done ) ->\n      debug '34844', d\n      send d\n      done() if d isnt 'few'\n    mainline.push PS.$show title: 'confluence'\n    mainline.push $ { last: null, }, ( d, send ) ->\n      debug '10191', CND.green d\n      if d?\n        if CND.isa_text d\n          bysource.send d.length\n          send d\n        else\n          send d\n      else\n        bysource.send null\n      return null\n    mainline.push PS.$defer()\n    mainline.push PS.$collect()\n    mainline.push PS.$show title: 'mainstream'\n    mainline.push PS.$drain -> help 'ok'; resolve()\n    PS.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ngenerator_source = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    #.......................................................................................................\n    g = ->\n      for nr in [ 1 ... 10 ]\n        x = yield nr\n        debug '77873', x\n      return null\n    #.......................................................................................................\n    iterator  = g()\n    bysource  = PS.new_generator_source iterator\n    byline    = []\n    byline.push bysource\n    byline.push PS.$watch ( d ) -> whisper 'bystream', jr d\n    #.......................................................................................................\n    mainline = []\n    mainline.push PS.new_random_async_value_source \"just a few words\".split /\\s/\n    mainline.push PS.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PS.$wye PS.pull byline...\n    mainline.push PS.$show title: 'confluence'\n    mainline.push PS.$collect()\n    mainline.push PS.$show title: 'mainstream'\n    # mainline.push PS.$drain -> help 'ok'; resolve()\n    urge iterator.next()\n    urge iterator.next 'foo'\n    PS.pull mainline...\n    # for x in [ 3 .. 8 ]\n    #   bysource.send x\n    # bysource.send null\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_alternating_source = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    source_1        = PS.new_push_source()\n    source_2        = PS.new_push_source()\n    pipeline        = []\n    pipeline.push PS.new_alternating_source source_1, source_2\n    pipeline.push PS.$show title: 'pipeline'\n    pipeline.push PS.$drain -> \"pipeline terminated\"\n    PS.pull pipeline...\n    source_1.send 'a'\n    source_1.send 'b'\n    # source_1.send 'c'\n    source_2.send n for n in [ 1 .. 5 ]\n    info '----'\n    after 1.0, -> whisper \"source_1 ended\"; source_1.end()\n    after 1.5, -> whisper \"source_2 ended\"; source_2.end()\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_on_demand_source = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    # mainsource            = PS.new_push_source()\n    mainsource            = PS.new_value_source [ 1 .. 5 ]\n    pipeline              = []\n    on_demand_source      = PS.new_on_demand_source mainsource\n    pipeline.push on_demand_source\n    pipeline.push PS.$watch ( d ) -> info ( if ( CND.type_of d ) is 'symbol' then CND.grey else CND.white ) d\n    pipeline.push PS.$drain -> \"pipeline terminated\"\n    PS.pull pipeline...\n    # mainsource.send n for n in [ 1 .. 5 ]\n    for nr in [ 1 .. 3 ]\n      on_demand_source.next()\n    # on_demand_source.next()\n    # on_demand_source.next()\n    info '----'\n    # after 1.0, -> whisper \"triggersource ended\"; triggersource.end()\n    # after 1.5, -> whisper \"mainsource ended\"; mainsource.end()\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_on_demand_transform = ->\n  $gate = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    # mainsource            = PS.new_push_source()\n    mainsource  = PS.new_value_source [ 1 .. 5 ]\n    pipeline    = []\n    gate        = $gate()\n    pipeline.push mainsource\n    pipeline.push gate\n    pipeline.push PS.$drain -> \"pipeline terminated\"\n    PS.pull pipeline...\n    for nr in [ 1 .. 3 ]\n      gate.next()\n    # after 1.5, -> whisper \"mainsource ended\"; mainsource.end()\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  do ->\n    # demo_merge_1()\n    # demo_merge_async_sources()\n    # demo_mux_async_sources_1()\n    # demo_mux_async_sources_2()\n    # demo_through()\n    # async_with_end_detection()\n    # async_with_end_detection_2()\n    # sync_with_first_and_last()\n    # async_with_first_and_last()\n    # pull_pair_1()\n    # pull_pair_2()\n    # wye_1()\n    # wye_2()\n    # await wye_with_random_value_source()\n    # await wye_with_value_source()\n    # await wye_with_external_push_source()\n    # await wye_with_internal_push_source()\n    # await generator_source()\n    # await test_continuity()\n    # wye_3b()\n    # wye_4()\n    # duplex_stream_3()\n    # await demo_alternating_source()\n    await demo_on_demand_source()\n\n\n\n\n"
  ]
}