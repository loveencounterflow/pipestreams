{
  "version": 3,
  "file": "various-pull-streams.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/various-pull-streams.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/VARIOUS-PULL-STREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPS                        = require '../..'\n{ $, $async, }            = PS\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\n{ jr\n  is_empty }              = CND\n\n# https://pull-stream.github.io/#pull-through\n# nope https://github.com/dominictarr/pull-flow (https://github.com/pull-stream/pull-stream/issues/4)\n\n# https://github.com/pull-stream/pull-cont\n# https://github.com/pull-stream/pull-defer\n# https://github.com/scrapjs/pull-imux\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_merge_1 = ->\n  ### https://github.com/pull-stream/pull-merge ###\n  pull      = require 'pull-stream'\n  merge     = require 'pull-merge'\n  pipeline  = []\n  # pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [ 2, 4, 7, ] )\n  # pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [ 2, 4, 7, 10, 11, 12, ] )\n  # pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [] )\n  # pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [ 1, 5, 6, ] )\n  # pipeline.push merge ( pull.values [ [1], [5], [6], ] ), ( pull.values [ [1], [5], [6], [7], ] )\n  pipeline.push merge ( pull.values [ 1, 5, 6, ] ), ( pull.values [ 1, 5, 6, ] ), ( a, b ) -> -1\n  pipeline.push pull.collect ( error, collector ) ->\n    throw error if error?\n    help collector\n  pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_async_source = ( name ) ->\n    source    = PS.new_push_source()\n    pipeline  = []\n    pipeline.push source\n    pipeline.push PS.$watch ( d ) -> urge name, jr d\n    R         = PS.pull pipeline...\n    R.push    = ( x ) -> source.push x\n    R.end     = -> source.end()\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_merge_async_sources = ->\n  ### won't take all inputs from both sources ###\n  merge     = require 'pull-merge'\n  source_1 = new_async_source 's1'\n  source_2 = new_async_source 's2'\n  return new Promise ( resolve ) ->\n    pipeline  = []\n    pipeline.push merge source_2, source_1, ( a, b ) -> -1\n    pipeline.push PS.$watch ( d ) -> help '-->', jr d\n    pipeline.push PS.$drain ->\n      help 'ok'\n      resolve null\n    PS.pull pipeline...\n    after 0.1, -> source_2.push 4\n    after 0.2, -> source_2.push 5\n    after 0.3, -> source_2.push 6\n    after 0.4, -> source_1.push 1\n    after 0.5, -> source_1.push 2\n    after 0.6, -> source_1.push 3\n    # after 1.0, -> source_1.push null\n    # after 1.0, -> source_2.push null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_mux_async_sources_1 = ->\n  mux = require 'pull-mux' ### https://github.com/nichoth/pull-mux ###\n  #.........................................................................................................\n  $_mux = ( sources... ) ->\n    R = {}\n    for source, idx in sources\n      R[ idx ] = source\n    return mux R\n  #.........................................................................................................\n  $_demux = ->\n    return PS.$map ( [ k, v, ] ) -> v\n  #.........................................................................................................\n  return new Promise ( resolve ) ->\n    pipeline  = []\n    source_1  = new_async_source 's1'\n    source_2  = new_async_source 's2'\n    pipeline.push $_mux source_1, source_2\n    pipeline.push $_demux()\n    pipeline.push PS.$collect()\n    pipeline.push PS.$watch ( d ) -> help '-->', jr d\n    pipeline.push PS.$drain ->\n      help 'ok'\n      resolve null\n    PS.pull pipeline...\n    after 0.1, -> source_2.push 4\n    after 0.5, -> source_1.push 2\n    after 0.6, -> source_1.push 3\n    after 0.2, -> source_2.push 5\n    after 0.3, -> source_2.push 6\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.05, -> source_2.push 42\n    after 1.0, -> source_1.end()\n    after 1.0, -> source_2.end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_mux_async_sources_2 = ->\n  mux = require 'pull-mux' ### https://github.com/nichoth/pull-mux ###\n  #-----------------------------------------------------------------------------------------------------------\n  PS.$wye = ( sources... ) ->\n    #.........................................................................................................\n    $_mux = ( sources... ) ->\n      R = {}\n      R[ idx ] = source for source, idx in sources\n      return mux R\n    #.........................................................................................................\n    $_demux = -> PS.$map ( [ k, v, ] ) -> v\n    #.........................................................................................................\n    pipeline  = []\n    pipeline.push $_mux sources...\n    pipeline.push $_demux()\n    return PS.pull pipeline...\n  #.........................................................................................................\n  return new Promise ( resolve ) ->\n    pipeline  = []\n    source_1  = new_async_source 's1'\n    source_2  = new_async_source 's2'\n    pipeline.push PS.$wye source_1, source_2\n    pipeline.push PS.$collect()\n    pipeline.push PS.$watch ( d ) -> help '-->', jr d\n    pipeline.push PS.$drain ->\n      help 'ok'\n      resolve null\n    PS.pull pipeline...\n    after 0.1, -> source_2.push 4\n    after 0.5, -> source_1.push 2\n    after 0.6, -> source_1.push 3\n    after 0.2, -> source_2.push 5\n    after 0.3, -> source_2.push 6\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.4, -> source_1.push 1\n    after 0.05, -> source_2.push 42\n    after 1.0, -> source_1.end()\n    after 1.0, -> source_2.end()\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_through = ->\n  through = require 'pull-through' ### https://github.com/pull-stream/pull-through ###\n\n#-----------------------------------------------------------------------------------------------------------\nasync_with_end_detection = ->\n  start_sym = Symbol 'start'\n  end_sym   = Symbol 'end'\n  buffer    = [ 11 .. 15 ]\n  pipeline  = []\n  send      = null\n  flush     = => send buffer.pop() while not is_empty buffer\n  pipeline.push PS.new_value_source [ 1 .. 5 ]\n  pipeline.push PS.$defer()\n  #.........................................................................................................\n  pipeline.push do =>\n    is_first = true\n    return $ 'null', ( d, send ) =>\n      if is_first\n        is_first = false\n        send start_sym\n      return send d if d?\n      send end_sym\n  #.........................................................................................................\n  pipeline.push PS.$async ( d, _send, done ) =>\n    send = _send\n    switch d\n      when start_sym\n        debug 'start'\n        send buffer.pop()\n        done()\n      when end_sym\n        flush()\n        debug 'end'\n        # done()\n        after 2, done\n      else\n        send d\n        done()\n    return null\n  #.........................................................................................................\n  pipeline.push PS.$show()\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nasync_with_end_detection_2 = ->\n  buffer    = [ 11 .. 15 ]\n  pipeline  = []\n  send      = null\n  flush     = => send buffer.pop() while not is_empty buffer\n  #.........................................................................................................\n  pipeline.push PS.new_value_source [ 1 .. 5 ]\n  pipeline.push PS.$defer()\n  #.........................................................................................................\n  pipeline.push PS.$async 'null', ( d, _send, done ) =>\n    send = _send\n    if d?\n      send d\n      done()\n    else\n      flush()\n      debug 'end'\n      # done()\n      after 2, done\n    return null\n  #.........................................................................................................\n  pipeline.push PS.$show()\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  # demo_merge_1()\n  # demo_merge_async_sources()\n  # demo_mux_async_sources_1()\n  # demo_mux_async_sources_2()\n  # demo_through()\n  # async_with_end_detection()\n  async_with_end_detection_2()\n\n\n\n\n\n"
  ]
}