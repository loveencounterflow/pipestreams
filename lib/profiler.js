// Generated by CoffeeScript 1.12.2
(function() {
  var CND, PATH, _, alert, badge, debug, echo, help, i, info, log, rpr, start_profile, stop_profile, urge, warn, whisper, ƒ;

  PATH = require('path');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPESTREAMS/PROFILER';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  alert = CND.get_logger('alert', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ƒ = CND.format_number.bind(CND);

  this.timers = {};

  this.sums = {};

  this.dt_total = null;

  this.counts = {};

  if (global.performance != null) {
    this.now = global.performance.now.bind(global.performance);
  } else {
    this.now = require('performance-now');
  }

  this.start = function(title) {
    var base;
    ((base = this.timers)[title] != null ? base[title] : base[title] = []).push(-this.now());
    return null;
  };

  this.stop = function(title) {
    this.timers[title].push(this.now() + this.timers[title].pop());
    return null;
  };

  this.wrap = function(title, method) {
    var R, idx, parameters, self, source, title_txt, type;
    if ((type = CND.type_of(title)) !== 'text') {
      throw new Error("expected a text, got a " + type);
    }
    if ((type = CND.type_of(method)) !== 'function') {
      throw new Error("expected a function, got a " + type);
    }
    parameters = ((function() {
      var i, ref, results;
      results = [];
      for (idx = i = 1, ref = method.length; i <= ref; idx = i += +1) {
        results.push("a" + idx);
      }
      return results;
    })()).join(', ');
    title_txt = JSON.stringify(title);
    self = this;
    source = "var R;\nR = function ( " + parameters + " ) {\n  self.start( " + title_txt + " );\n  R = method.apply( null, arguments );\n  self.stop( " + title_txt + " );\n  return R;\n  }";
    R = eval(source);
    return R;
  };

  this._average = function() {

    /* only call after calibration, before actual usage */
    this.aggregate();
    this.dt = this.sums['dt'] / 10;
    delete this.sums['dt'];
    return delete this.counts['dt'];
  };

  this.aggregate = function() {
    var dts, ref, ref1, timers, title;
    if (this.timers['*'] != null) {
      if (this.timers['*'] < 0) {
        this.stop('*');
      }
      this.dt_total = this.timers['*'];
      delete this.timers['*'];
      delete this.counts['*'];
    }
    ref = this.timers;
    for (title in ref) {
      timers = ref[title];
      dts = this.timers[title];
      this.counts[title] = dts.length;
      this.sums[title] = ((ref1 = this.sums[title]) != null ? ref1 : 0) + dts.reduce((function(a, b) {
        return a + b;
      }), 0);
      delete this.timers[title];
    }
    return null;
  };

  this.report = function() {
    var count, dt, dt_reference, dt_sum, dt_txt, i, leader, len, line, lines, percentage_txt, ref, ref1, ref2, results, title;
    this.aggregate();
    lines = [];
    dt_sum = 0;
    ref = this.sums;
    for (title in ref) {
      dt = ref[title];
      count = ' ' + this.counts[title];
      leader = '...';
      while (!(title.length + leader.length + count.length > 50)) {
        leader += '.';
      }
      dt_sum += dt;
      dt_txt = format_float(dt);
      while (!(dt_txt.length > 10)) {
        dt_txt = ' ' + dt_txt;
      }
      line = [title, leader, count, dt_txt].join(' ');
      lines.push([dt, line]);
    }
    lines.sort(function(a, b) {
      if (a[0] > b[0]) {
        return +1;
      }
      if (a[0] < b[0]) {
        return -1;
      }
      return 0;
    });
    dt_reference = (ref1 = this.dt_total) != null ? ref1 : dt_sum;
    whisper("epsilon: " + this.dt);
    percentage_txt = ((dt_sum / dt_reference * 100).toFixed(0)) + '%';
    whisper("dt reference: " + (format_float(dt_reference / 1000)) + "s (" + percentage_txt + ")");
    results = [];
    for (i = 0, len = lines.length; i < len; i++) {
      ref2 = lines[i], dt = ref2[0], line = ref2[1];
      percentage_txt = ((dt / dt_reference * 100).toFixed(0)) + '%';
      while (!(percentage_txt.length > 3)) {
        percentage_txt = ' ' + percentage_txt;
      }
      results.push(info(line, percentage_txt));
    }
    return results;
  };


  /* provide a minmum delta time: */

  for (_ = i = 1; i <= 10; _ = ++i) {
    this.start('dt');
    this.stop('dt');
  }

  this._average();

  start_profile = function(S) {
    S.t0 = Date.now();
    if (running_in_devtools) {
      return console.profile(S.job_name);
    } else if (typeof V8PROFILER !== "undefined" && V8PROFILER !== null) {
      return V8PROFILER.startProfiling(S.job_name);
    }
  };

  stop_profile = function(S, handler) {
    if (running_in_devtools) {
      return console.profileEnd(S.job_name);
    } else if (typeof V8PROFILER !== "undefined" && V8PROFILER !== null) {
      return step(function*(resume) {
        var profile, profile_data;
        profile = V8PROFILER.stopProfiling(S.job_name);
        profile_data = (yield profile["export"](resume));
        S.profile_name = "profile-" + S.job_name + ".json";
        S.profile_home = PATH.resolve(__dirname, '../results', S.fingerprint, 'profiles');
        mkdirp.sync(S.profile_home);
        S.profile_path = PATH.resolve(S.profile_home, S.profile_name);
        FS.writeFileSync(S.profile_path, profile_data);
        return handler();
      });
    }
  };

}).call(this);

//# sourceMappingURL=profiler.js.map
