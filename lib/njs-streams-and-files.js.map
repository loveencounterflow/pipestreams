{
  "version": 3,
  "file": "njs-streams-and-files.js",
  "sourceRoot": "..",
  "sources": [
    "src/njs-streams-and-files.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,KAAA,GAA4B;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,uBAAR,EAP5B;;;;;EAcA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,IAAF,EAAQ,OAAR,CAAA,EAAA;;AAEhB,QAAA,KAAA,EAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc;AAAP;AADP,WAEO,CAFP;QAGI,IAAG,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAAH;UACE,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CAAA,GAA8B,CAAE,IAAF,EAAQ,IAAR,EAAc,OAAd,EADhC;;AADG;AAFP;QAKO,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,KAAxC,CAAA,CAAV;AALb,KAAA;;AAOA,WAAO,IAAC,CAAA,uBAAD,CAA2B,EAAE,CAAC,gBAAH,CAAoB,IAApB,EAA0B,OAA1B,CAA3B;EATS,EAdlB;;;EA0BA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CAAA,EAAA;;;AAGf,QAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc;AAAP;AADP,WAEO,CAFP;QAGI,IAAG,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAAH;UACE,CAAE,IAAF,EAAQ,OAAR,EAAiB,OAAjB,CAAA,GAA8B,CAAE,IAAF,EAAQ,IAAR,EAAc,OAAd,EADhC;;AADG;AAFP,WAKO,CALP;AAKO;AALP;QAMO,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,KAAxC,CAAA,CAAV;AANb,KAAA;;AAQA,WAAO,IAAC,CAAA,sBAAD,CAA0B,EAAE,CAAC,iBAAH,CAAqB,IAArB,EAA2B,OAA3B,CAA1B,EAAgE,OAAhE;EAXQ,EA1BjB;;;EAwCA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,MAAF,CAAA;AACzB,QAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;QACc;AAAP;AADP;QAEO,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,KAAlC,CAAA,CAAV;AAFb,KAAA;;AAIA,WAAO,IAAI,CAAC,MAAL,CAAY,MAAZ,EAAoB,QAAA,CAAE,KAAF,CAAA;aAAa,MAAA,CAAO,KAAP;IAAb,CAApB;EALkB,EAxC3B;;;EAgDA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,MAAF,EAAU,OAAV,CAAA,EAAA;;AAExB,QAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAAA;AAAA,YAAO,CAAE,KAAA,GAAQ,SAAS,CAAC,MAApB,CAAP;AAAA,WACO,CADP;AAAA,WACU,CADV;QACiB;AAAP;AADV;QAEO,MAAM,IAAI,KAAJ,CAAU,CAAA,qCAAA,CAAA,CAAwC,KAAxC,CAAA,CAAV;AAFb,KAAA;;IAIA,IAAG,iBAAA,IAAa,CAAE,CAAE,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAT,CAAA,KAAoC,UAAtC,CAAhB;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,iCAAA,CAAA,CAAoC,IAApC,CAAA,CAAV,EADR;KAJA;;IAOA,YAAA,GAAe,MAPf;;IASA,MAAA,GAAS,QAAA,CAAE,KAAF,CAAA,EAAA;;;MAGP,IAAG,eAAA,IAAW,CAAE,YAAA,IAAgB,CAAM,eAAN,CAAlB,CAAd;QACE,YAAA,GAAe;QACf,MAAM,MAFR;OAAA;;;;MAMA,IAAG,CAAI,YAAP;QACE,YAAA,GAAe;QACf,IAAG,eAAH;UACE,IAAwB,aAAxB;AAAA,mBAAO,OAAA,CAAQ,KAAR,EAAP;;AACA,iBAAO,OAAA,CAAA,EAFT;SAFF;OANA;;AAYA,aAAO;IAfA,EATT;;IA0BA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,QAAA,CAAA,CAAA;aAAG,MAAA,CAAA;IAAH,CAAnB;AACA,WAAO,IAAI,CAAC,IAAL,CAAU,MAAV,EAAkB,QAAA,CAAE,KAAF,CAAA;aAAa,MAAA,CAAO,KAAP;IAAb,CAAlB;EA7BiB;AAhD1B",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'PIPESTREAMS/NJS-STREAMS-AND-FILES'\nFS                        = require 'fs'\nSTPS                      = require 'stream-to-pull-stream'\n\n\n\n#===========================================================================================================\n# READ FROM, WRITE TO FILES, NODEJS STREAMS\n#-----------------------------------------------------------------------------------------------------------\n@read_from_file = ( path, options ) ->\n  ### TAINT consider using https://pull-stream.github.io/#pull-file-reader instead ###\n  switch ( arity = arguments.length )\n    when 1 then null\n    when 2\n      if CND.isa_function options\n        [ path, options, on_stop, ] = [ path, null, options, ]\n    else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  return @read_from_nodejs_stream ( FS.createReadStream path, options )\n\n#-----------------------------------------------------------------------------------------------------------\n@write_to_file = ( path, options, on_stop ) ->\n  ### TAINT consider using https://pull-stream.github.io/#pull-write-file instead ###\n  ### TAINT code duplication ###\n  switch ( arity = arguments.length )\n    when 1 then null\n    when 2\n      if CND.isa_function options\n        [ path, options, on_stop, ] = [ path, null, options, ]\n    when 3\n    else throw new Error \"µ9983 expected 1 to 3 arguments, got #{arity}\"\n  #.........................................................................................................\n  return @write_to_nodejs_stream ( FS.createWriteStream path, options ), on_stop\n\n#-----------------------------------------------------------------------------------------------------------\n@read_from_nodejs_stream = ( stream ) ->\n  switch ( arity = arguments.length )\n    when 1 then null\n    else throw new Error \"µ9983 expected 1 argument, got #{arity}\"\n  #.........................................................................................................\n  return STPS.source stream, ( error ) -> finish error\n\n#-----------------------------------------------------------------------------------------------------------\n@write_to_nodejs_stream = ( stream, on_stop ) ->\n  ### TAINT code duplication ###\n  switch ( arity = arguments.length )\n    when 1, 2 then null\n    else throw new Error \"µ9983 expected 1 or 2 arguments, got #{arity}\"\n  #.........................................................................................................\n  if on_stop? and ( ( type = CND.type_of on_stop ) isnt 'function' )\n    throw new Error \"µ9383 expected a function, got a #{type}\"\n  #.........................................................................................................\n  has_finished = false\n  #.........................................................................................................\n  finish = ( error ) ->\n    ### In case there was an error, throw that error if we already called on_stop, or there is no\n    callback given; this is to prevent silent failures: ###\n    if error? and ( has_finished or ( not on_stop? ) )\n      has_finished = true\n      throw error\n    #.......................................................................................................\n    ### Otherwise, call back (with optional error) only in case we have not yet finished; this is to\n    prevent inadvertently calling back more than once: ###\n    if not has_finished\n      has_finished = true\n      if on_stop?\n        return on_stop error if error?\n        return on_stop()\n    #.......................................................................................................\n    return null\n  #.........................................................................................................\n  stream.on 'close', -> finish()\n  return STPS.sink stream, ( error ) -> finish error\n\n"
  ]
}